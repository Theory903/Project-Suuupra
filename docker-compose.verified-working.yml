version: '3.8'

# ==============================================================================
# Suuupra Platform - Verified Working Services Only
# 
# This compose file contains only the services that have been verified to
# build successfully and pass health checks.
# ==============================================================================

services:
  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: suuupra-postgres
    environment:
      POSTGRES_DB: suuupra
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_MULTIPLE_DATABASES: identity,content,commerce,bank_simulator,upi_core,recommendations,analytics
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d suuupra"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - suuupra-network

  redis:
    image: redis:7-alpine
    container_name: suuupra-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - suuupra-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: suuupra-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - suuupra-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: suuupra-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - suuupra-network

  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: suuupra-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    networks:
      - suuupra-network

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: suuupra-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - suuupra-network

  grafana:
    image: grafana/grafana:10.2.0
    container_name: suuupra-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - suuupra-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: suuupra-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - suuupra-network

  minio:
    image: minio/minio:latest
    container_name: suuupra-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - suuupra-network

  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: suuupra-etcd
    environment:
      ETCD_DATA_DIR: /etcd-data
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd:2379
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://etcd:2380
      ETCD_INITIAL_CLUSTER: default=http://etcd:2380
      ETCD_NAME: default
      ETCD_INITIAL_CLUSTER_TOKEN: etcd-cluster
      ETCD_INITIAL_CLUSTER_STATE: new
    volumes:
      - etcd_data:/etcd-data
    networks:
      - suuupra-network

  milvus:
    image: milvusdb/milvus:v2.3.0
    container_name: suuupra-milvus
    depends_on:
      - etcd
    ports:
      - "19530:19530"
    environment:
      ETCD_ENDPOINTS: etcd:2379
    volumes:
      - milvus_data:/var/lib/milvus
    command: ["milvus", "run", "standalone"]
    networks:
      - suuupra-network

  # Application Services (Verified Working)
  upi-core:
    build:
      context: ./services/upi-core
      dockerfile: Dockerfile
    container_name: suuupra-upi-core
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8083:8081"
      - "50051:50051"
      - "9091:9090"
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/upi_core
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      GRPC_PORT: 50051
      HTTP_PORT: 8081
      METRICS_PORT: 9090
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - suuupra-network

  bank-simulator:
    build:
      context: ./services/bank-simulator
      dockerfile: Dockerfile
    container_name: suuupra-bank-simulator
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3000:3000"
      - "50050:50050"
      - "9094:9090"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/bank_simulator
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      PORT: 3000
      GRPC_PORT: 50050
      METRICS_PORT: 9090
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - suuupra-network

  recommendations:
    build:
      context: ./services/recommendations
      dockerfile: Dockerfile
    container_name: suuupra-recommendations
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    ports:
      - "8095:8095"
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/recommendations
      REDIS_URL: redis://redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8095/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - suuupra-network

  analytics:
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
    container_name: suuupra-analytics
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8087:8087"
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/analytics
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:29092
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - suuupra-network

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  minio_data:
  etcd_data:
  milvus_data:

networks:
  suuupra-network:
    driver: bridge
