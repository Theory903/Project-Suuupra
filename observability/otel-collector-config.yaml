# ===================================================================
# OPENTELEMETRY COLLECTOR CONFIGURATION - Per TODO-010
# Comprehensive telemetry pipeline for Suuupra Platform
# ===================================================================

receivers:
  # ===================================================================
  # OTLP RECEIVERS - Primary telemetry ingestion
  # ===================================================================
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
        max_recv_msg_size_mib: 64  # 64MB
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - http://localhost:3000
            - https://*.suuupra.com

  # ===================================================================
  # PROMETHEUS RECEIVER - Scrape metrics from services
  # ===================================================================
  prometheus:
    config:
      scrape_configs:
      - job_name: 'otel-collector'
        scrape_interval: 30s
        static_configs:
        - targets: ['localhost:8888']
        
      # Scrape application metrics
      - job_name: 'suuupra-services'
        scrape_interval: 15s
        static_configs:
        - targets: 
          - 'host.docker.internal:9091'  # API Gateway
          - 'host.docker.internal:9092'  # Identity Service
          - 'host.docker.internal:9093'  # Payment Service
          - 'host.docker.internal:9094'  # Commerce Service
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: 'go_.*|process_.*|promhttp_.*'
          action: drop  # Drop Go runtime metrics to reduce noise
          
      # Infrastructure metrics
      - job_name: 'infrastructure'
        scrape_interval: 30s
        static_configs:
        - targets:
          - 'postgres-exporter:9187'
          - 'redis-exporter:9121' 
          - 'kafka-exporter:9308'
          - 'minio:9000'

  # ===================================================================
  # JAEGER RECEIVER - Legacy Jaeger traces
  # ===================================================================
  jaeger:
    protocols:
      grpc:
        endpoint: 0.0.0.0:14250
      thrift_http:
        endpoint: 0.0.0.0:14268
      thrift_compact:
        endpoint: 0.0.0.0:6831
      thrift_binary:
        endpoint: 0.0.0.0:6832

  # ===================================================================
  # ZIPKIN RECEIVER - Legacy Zipkin traces  
  # ===================================================================
  zipkin:
    endpoint: 0.0.0.0:9411

  # ===================================================================
  # HOST METRICS - System performance
  # ===================================================================
  hostmetrics:
    collection_interval: 30s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      disk:
        metrics:
          system.disk.operations:
            enabled: true
      filesystem:
        metrics:
          system.filesystem.utilization:
            enabled: true
      network:
        metrics:
          system.network.io:
            enabled: true
          system.network.connections:
            enabled: true

processors:
  # ===================================================================
  # MEMORY LIMITER - Prevent OOM
  # ===================================================================
  memory_limiter:
    check_interval: 1s
    limit_percentage: 75
    spike_limit_percentage: 25

  # ===================================================================
  # BATCH PROCESSOR - Optimize throughput
  # ===================================================================
  batch:
    send_batch_size: 10000
    send_batch_max_size: 11000
    timeout: 10s

  # ===================================================================
  # RESOURCE PROCESSOR - Add metadata
  # ===================================================================
  resource:
    attributes:
    - key: environment
      value: "development"
      action: insert
    - key: service.namespace
      value: "suuupra"
      action: insert
    - key: deployment.environment
      value: "docker-compose"
      action: insert

  # ===================================================================
  # ATTRIBUTES PROCESSOR - Enrich telemetry
  # ===================================================================
  attributes:
    actions:
    - key: container.id
      action: delete  # Remove sensitive container IDs
    - key: process.command_line
      action: delete  # Remove command line args (may contain secrets)
    - key: suuupra.version
      value: "1.0.0"
      action: insert

  # ===================================================================
  # SPAN PROCESSOR - Trace enrichment
  # ===================================================================
  span:
    name:
      to_attributes:
        rules:
        - ^\/api\/v1\/users\/(?P<user_id>.*)$
        - ^\/api\/v1\/payments\/(?P<payment_id>.*)$

  # ===================================================================
  # PROBABILISTIC SAMPLER - Control trace volume
  # ===================================================================
  probabilistic_sampler:
    hash_seed: 42
    sampling_percentage: 20  # Sample 20% of traces

  # ===================================================================
  # TAIL SAMPLING - Keep important traces
  # ===================================================================
  tail_sampling:
    decision_wait: 10s
    num_traces: 50000
    expected_new_traces_per_sec: 100
    policies:
    # Always keep error traces
    - name: error-policy
      type: status_code
      status_code:
        status_codes: [ERROR]
    
    # Keep slow traces (>1s)
    - name: latency-policy
      type: latency
      latency:
        threshold_ms: 1000
    
    # Keep payment-related traces
    - name: payment-policy
      type: string_attribute
      string_attribute:
        key: http.route
        values: ["/api/v1/payments.*"]
        enabled_regex_matching: true
    
    # Sample other traces at 10%
    - name: probabilistic-policy
      type: probabilistic
      probabilistic:
        sampling_percentage: 10

  # ===================================================================
  # METRIC TRANSFORMS - Business logic
  # ===================================================================
  metricstransform:
    transforms:
    # Convert HTTP request duration to business SLI
    - include: http_request_duration_seconds
      match_type: regexp
      action: update
      new_name: suuupra_request_sli
      operations:
      - action: aggregate_labels
        aggregation_type: max
        label: quantile
        
    # Transform payment metrics
    - include: suuupra_payments_total
      match_type: strict  
      action: update
      operations:
      - action: add_label
        new_label: business_metric
        new_value: revenue

exporters:
  # ===================================================================
  # PROMETHEUS EXPORTER - Metrics export
  # ===================================================================
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: suuupra
    const_labels:
      platform: docker-compose
    send_timestamps: true
    metric_expiration: 5m
    enable_open_metrics: true
    add_metric_suffixes: false

  # ===================================================================
  # OTLP EXPORTER - Send to Jaeger
  # ===================================================================
  otlp/jaeger:
    endpoint: jaeger:4317
    tls:
      insecure: true
    sending_queue:
      queue_size: 1000
      num_consumers: 10
    retry_on_failure:
      enabled: true
      initial_interval: 1s
      max_interval: 30s
      max_elapsed_time: 300s

  # ===================================================================
  # LOGGING EXPORTER - Debug output
  # ===================================================================
  logging:
    loglevel: info
    sampling_initial: 2
    sampling_thereafter: 500

  # ===================================================================
  # DEBUG EXPORTER - Troubleshooting
  # ===================================================================
  debug:
    verbosity: basic
    sampling_initial: 5
    sampling_thereafter: 200

extensions:
  # Health check extension
  health_check:
    endpoint: 0.0.0.0:13133
    
  # Performance profiling
  pprof:
    endpoint: 0.0.0.0:1777
    
  # Memory ballast for stability
  memory_ballast:
    size_in_percentage: 20

service:
  # ===================================================================
  # TELEMETRY - Self-monitoring
  # ===================================================================
  telemetry:
    logs:
      level: info
      development: false
      sampling:
        initial: 5
        thereafter: 200
    metrics:
      level: detailed
      address: 0.0.0.0:8888
    
  # ===================================================================
  # EXTENSIONS
  # ===================================================================
  extensions: [health_check, pprof, memory_ballast]

  # ===================================================================
  # PIPELINES - Data flow configuration
  # ===================================================================
  pipelines:
    # TRACES PIPELINE
    traces:
      receivers: [otlp, jaeger, zipkin]
      processors: 
        - memory_limiter
        - resource
        - attributes  
        - span
        - tail_sampling
        - batch
      exporters: [otlp/jaeger, logging]

    # METRICS PIPELINE  
    metrics:
      receivers: [otlp, prometheus, hostmetrics]
      processors:
        - memory_limiter
        - resource
        - attributes
        - metricstransform
        - batch
      exporters: [prometheus, logging]

    # LOGS PIPELINE (if enabled)
    logs:
      receivers: [otlp]
      processors:
        - memory_limiter
        - resource
        - attributes
        - batch
      exporters: [logging]
