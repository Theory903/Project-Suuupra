# Kong API Gateway - Production Configuration
# High-Performance, Enterprise-Grade Gateway with Rate Limiting, Auth, and Observability

apiVersion: v1
kind: Namespace
metadata:
  name: kong-system
  labels:
    name: kong-system
    linkerd.io/inject: enabled
---
# Kong Database (PostgreSQL) for Gateway Configuration
apiVersion: v1
kind: Secret
metadata:
  name: kong-postgres-secret
  namespace: kong-system
type: Opaque
stringData:
  POSTGRES_USER: kong
  POSTGRES_PASSWORD: kong-secure-password-2024
  POSTGRES_DB: kong
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong-postgres
  namespace: kong-system
  labels:
    app: kong-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kong-postgres
  template:
    metadata:
      labels:
        app: kong-postgres
      annotations:
        linkerd.io/inject: enabled
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: kong-postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kong-postgres-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: kong-postgres-secret
              key: POSTGRES_DB
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kong
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kong
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: kong-postgres-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kong-postgres-pvc
  namespace: kong-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: kong-postgres
  namespace: kong-system
spec:
  selector:
    app: kong-postgres
  ports:
  - port: 5432
    targetPort: 5432
---
# Kong Migration Job
apiVersion: batch/v1
kind: Job
metadata:
  name: kong-migrations
  namespace: kong-system
  labels:
    app: kong-migrations
spec:
  template:
    metadata:
      name: kong-migrations
      labels:
        app: kong-migrations
    spec:
      restartPolicy: OnFailure
      containers:
      - name: kong-migrations
        image: kong:3.4
        env:
        - name: KONG_DATABASE
          value: postgres
        - name: KONG_PG_HOST
          value: kong-postgres
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_USER
          valueFrom:
            secretKeyRef:
              name: kong-postgres-secret
              key: POSTGRES_USER
        - name: KONG_PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kong-postgres-secret
              key: POSTGRES_PASSWORD
        - name: KONG_PG_DATABASE
          valueFrom:
            secretKeyRef:
              name: kong-postgres-secret
              key: POSTGRES_DB
        command: ["kong", "migrations", "bootstrap"]
---
# Kong Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-config
  namespace: kong-system
data:
  kong.conf: |
    # Database configuration
    database = postgres
    pg_host = kong-postgres
    pg_port = 5432
    pg_timeout = 5000
    pg_user = kong
    pg_database = kong
    pg_ssl = off
    
    # Proxy configuration
    proxy_listen = 0.0.0.0:8000, 0.0.0.0:8443 ssl
    admin_listen = 0.0.0.0:8001
    admin_api_uri = http://localhost:8001
    
    # Performance optimizations
    worker_processes = auto
    worker_connections = 4096
    upstream_keepalive_pool_size = 512
    upstream_keepalive_max_requests = 10000
    upstream_keepalive_idle_timeout = 60s
    
    # Security
    ssl_protocols = TLSv1.2 TLSv1.3
    ssl_prefer_server_ciphers = on
    ssl_session_tickets = on
    ssl_session_timeout = 1d
    
    # Logging
    log_level = notice
    access_log = /dev/stdout
    error_log = /dev/stderr
    
    # Rate limiting
    rate_limiting_policy = local
    
    # Clustering (for multi-instance deployments)
    cluster_listen = 0.0.0.0:8005
    cluster_control_plane = off
    
    # Observability
    status_listen = 0.0.0.0:8100
    
    # Memory management
    mem_cache_size = 128m
    
    # Nginx directives
    nginx_worker_processes = auto
    nginx_daemon = off
---
# Kong Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong-gateway
  namespace: kong-system
  labels:
    app: kong-gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: kong-gateway
  template:
    metadata:
      labels:
        app: kong-gateway
      annotations:
        linkerd.io/inject: enabled
        prometheus.io/scrape: "true"
        prometheus.io/port: "8100"
        prometheus.io/path: "/status"
    spec:
      containers:
      - name: kong
        image: kong:3.4
        ports:
        - name: proxy
          containerPort: 8000
          protocol: TCP
        - name: proxy-ssl
          containerPort: 8443
          protocol: TCP
        - name: admin
          containerPort: 8001
          protocol: TCP
        - name: status
          containerPort: 8100
          protocol: TCP
        - name: cluster
          containerPort: 8005
          protocol: TCP
        env:
        - name: KONG_DATABASE
          value: postgres
        - name: KONG_PG_HOST
          value: kong-postgres
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_USER
          valueFrom:
            secretKeyRef:
              name: kong-postgres-secret
              key: POSTGRES_USER
        - name: KONG_PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kong-postgres-secret
              key: POSTGRES_PASSWORD
        - name: KONG_PG_DATABASE
          valueFrom:
            secretKeyRef:
              name: kong-postgres-secret
              key: POSTGRES_DB
        - name: KONG_PROXY_ACCESS_LOG
          value: /dev/stdout
        - name: KONG_ADMIN_ACCESS_LOG
          value: /dev/stdout
        - name: KONG_PROXY_ERROR_LOG
          value: /dev/stderr
        - name: KONG_ADMIN_ERROR_LOG
          value: /dev/stderr
        - name: KONG_LOG_LEVEL
          value: notice
        - name: KONG_STATUS_LISTEN
          value: 0.0.0.0:8100
        - name: KONG_ADMIN_LISTEN
          value: 0.0.0.0:8001
        - name: KONG_ADMIN_GUI_LISTEN
          value: 0.0.0.0:8002
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /status
            port: 8100
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /status
            port: 8100
          initialDelaySeconds: 10
          periodSeconds: 5
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
---
# Kong Proxy Service (External LoadBalancer)
apiVersion: v1
kind: Service
metadata:
  name: kong-proxy
  namespace: kong-system
  labels:
    app: kong-gateway
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8100"
spec:
  type: LoadBalancer
  selector:
    app: kong-gateway
  ports:
  - name: proxy
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: proxy-ssl
    port: 443
    targetPort: 8443
    protocol: TCP
---
# Kong Admin Service (Internal)
apiVersion: v1
kind: Service
metadata:
  name: kong-admin
  namespace: kong-system
  labels:
    app: kong-gateway
spec:
  type: ClusterIP
  selector:
    app: kong-gateway
  ports:
  - name: admin
    port: 8001
    targetPort: 8001
    protocol: TCP
  - name: status
    port: 8100
    targetPort: 8100
    protocol: TCP
---
# Kong Ingress Class
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: kong
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: ingress-controllers.konghq.com/kong
---
# Kong Ingress Controller RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kong-serviceaccount
  namespace: kong-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kong-ingress
rules:
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch", "create", "patch", "update"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "networking.k8s.io"]  
  resources: ["ingresses/status"]
  verbs: ["update"]
- apiGroups: ["configuration.konghq.com"]
  resources: ["kongingresses", "kongplugins", "kongconsumers", "kongcredentials"]
  verbs: ["get", "list", "watch", "create", "patch", "update", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kong-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kong-ingress
subjects:
- kind: ServiceAccount
  name: kong-serviceaccount
  namespace: kong-system
---
# Kong Ingress Controller
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong-ingress-controller
  namespace: kong-system
  labels:
    app: kong-ingress-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kong-ingress-controller
  template:
    metadata:
      labels:
        app: kong-ingress-controller
      annotations:
        linkerd.io/inject: enabled
    spec:
      serviceAccountName: kong-serviceaccount
      containers:
      - name: kong-ingress-controller
        image: kong/kubernetes-ingress-controller:2.12
        ports:
        - name: webhook
          containerPort: 8080
        - name: crd-validation
          containerPort: 8443
        env:
        - name: CONTROLLER_KONG_ADMIN_URL
          value: "http://kong-admin.kong-system.svc.cluster.local:8001"
        - name: CONTROLLER_PUBLISH_SERVICE
          value: "kong-system/kong-proxy"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONTROLLER_INGRESS_CLASS
          value: "kong"
        - name: CONTROLLER_ELECTION_ID
          value: "kong-ingress-controller-leader-kong"
        - name: CONTROLLER_LOG_LEVEL
          value: "info"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10254
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /readyz
            port: 10254
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 1000
          runAsGroup: 1000
