# ===================================================================
# KAFKA EVENT-DRIVEN ARCHITECTURE - PHASE 2  
# Production-Grade Event Streaming with Comprehensive Schemas
# ===================================================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-topics-config
  namespace: suuupra-platform
data:
  create-topics.sh: |
    #!/bin/bash
    
    # Kafka broker endpoint
    KAFKA_BROKER="kafka:9092"
    
    # Core platform events
    kafka-topics --create --topic user-events --bootstrap-server $KAFKA_BROKER \
      --partitions 12 --replication-factor 3 \
      --config cleanup.policy=compact \
      --config retention.ms=604800000 \
      --config compression.type=lz4
    
    kafka-topics --create --topic course-events --bootstrap-server $KAFKA_BROKER \
      --partitions 8 --replication-factor 3 \
      --config cleanup.policy=delete \
      --config retention.ms=2592000000 \
      --config compression.type=lz4
    
    kafka-topics --create --topic commerce-events --bootstrap-server $KAFKA_BROKER \
      --partitions 6 --replication-factor 3 \
      --config cleanup.policy=delete \
      --config retention.ms=7776000000 \
      --config compression.type=lz4
    
    kafka-topics --create --topic payment-events --bootstrap-server $KAFKA_BROKER \
      --partitions 8 --replication-factor 3 \
      --config cleanup.policy=delete \
      --config retention.ms=31536000000 \
      --config compression.type=lz4
    
    kafka-topics --create --topic notification-events --bootstrap-server $KAFKA_BROKER \
      --partitions 6 --replication-factor 3 \
      --config cleanup.policy=delete \
      --config retention.ms=1209600000 \
      --config compression.type=lz4
    
    # Live streaming events
    kafka-topics --create --topic live-session-events --bootstrap-server $KAFKA_BROKER \
      --partitions 4 --replication-factor 3 \
      --config cleanup.policy=delete \
      --config retention.ms=604800000 \
      --config compression.type=lz4
    
    # Analytics and tracking
    kafka-topics --create --topic analytics-events --bootstrap-server $KAFKA_BROKER \
      --partitions 16 --replication-factor 3 \
      --config cleanup.policy=delete \
      --config retention.ms=2592000000 \
      --config compression.type=lz4
    
    # API Gateway events
    kafka-topics --create --topic gateway-events --bootstrap-server $KAFKA_BROKER \
      --partitions 8 --replication-factor 3 \
      --config cleanup.policy=delete \
      --config retention.ms=604800000 \
      --config compression.type=lz4
    
    # Dead letter queues
    kafka-topics --create --topic dlq-events --bootstrap-server $KAFKA_BROKER \
      --partitions 4 --replication-factor 3 \
      --config cleanup.policy=delete \
      --config retention.ms=7776000000 \
      --config compression.type=lz4
    
    echo "âœ… All Kafka topics created successfully!"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-event-schemas
  namespace: suuupra-platform
data:
  event-schemas.json: |
    {
      "schemas": {
        "user-events": {
          "user.registered": {
            "schema_version": "1.0",
            "description": "User registration completed",
            "required": ["user_id", "email", "tier", "timestamp"],
            "properties": {
              "user_id": {"type": "string", "format": "uuid"},
              "email": {"type": "string", "format": "email"},
              "username": {"type": "string"},
              "tier": {"type": "string", "enum": ["free", "premium", "enterprise"]},
              "tenant_id": {"type": "string", "format": "uuid"},
              "registration_source": {"type": "string"},
              "metadata": {"type": "object"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "user.profile_updated": {
            "schema_version": "1.0",
            "description": "User profile information updated",
            "required": ["user_id", "timestamp"],
            "properties": {
              "user_id": {"type": "string", "format": "uuid"},
              "changed_fields": {"type": "array", "items": {"type": "string"}},
              "previous_values": {"type": "object"},
              "new_values": {"type": "object"},
              "updated_by": {"type": "string", "format": "uuid"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "user.tier_upgraded": {
            "schema_version": "1.0",
            "description": "User subscription tier upgraded",
            "required": ["user_id", "from_tier", "to_tier", "timestamp"],
            "properties": {
              "user_id": {"type": "string", "format": "uuid"},
              "from_tier": {"type": "string"},
              "to_tier": {"type": "string"},
              "upgrade_reason": {"type": "string"},
              "order_id": {"type": "string", "format": "uuid"},
              "effective_date": {"type": "string", "format": "date-time"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "user.login": {
            "schema_version": "1.0",
            "description": "User successful login",
            "required": ["user_id", "session_id", "timestamp"],
            "properties": {
              "user_id": {"type": "string", "format": "uuid"},
              "session_id": {"type": "string", "format": "uuid"},
              "ip_address": {"type": "string", "format": "ipv4"},
              "user_agent": {"type": "string"},
              "device_type": {"type": "string"},
              "location": {"type": "object"},
              "login_method": {"type": "string"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          }
        },
        
        "course-events": {
          "course.created": {
            "schema_version": "1.0",
            "description": "New course created",
            "required": ["course_id", "instructor_id", "title", "timestamp"],
            "properties": {
              "course_id": {"type": "string", "format": "uuid"},
              "instructor_id": {"type": "string", "format": "uuid"},
              "title": {"type": "string"},
              "description": {"type": "string"},
              "category": {"type": "string"},
              "level": {"type": "string", "enum": ["beginner", "intermediate", "advanced"]},
              "price": {"type": "number"},
              "currency": {"type": "string"},
              "tags": {"type": "array", "items": {"type": "string"}},
              "metadata": {"type": "object"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "course.published": {
            "schema_version": "1.0",
            "description": "Course published and made available",
            "required": ["course_id", "instructor_id", "timestamp"],
            "properties": {
              "course_id": {"type": "string", "format": "uuid"},
              "instructor_id": {"type": "string", "format": "uuid"},
              "title": {"type": "string"},
              "published_by": {"type": "string", "format": "uuid"},
              "approval_workflow_id": {"type": "string"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "course.enrollment": {
            "schema_version": "1.0",
            "description": "User enrolled in course",
            "required": ["enrollment_id", "user_id", "course_id", "timestamp"],
            "properties": {
              "enrollment_id": {"type": "string", "format": "uuid"},
              "user_id": {"type": "string", "format": "uuid"},
              "course_id": {"type": "string", "format": "uuid"},
              "order_id": {"type": "string", "format": "uuid"},
              "enrollment_type": {"type": "string", "enum": ["paid", "free", "trial"]},
              "price_paid": {"type": "number"},
              "currency": {"type": "string"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "course.progress_updated": {
            "schema_version": "1.0", 
            "description": "User progress on course updated",
            "required": ["user_id", "course_id", "lesson_id", "progress_percentage", "timestamp"],
            "properties": {
              "user_id": {"type": "string", "format": "uuid"},
              "course_id": {"type": "string", "format": "uuid"},
              "lesson_id": {"type": "string", "format": "uuid"},
              "progress_percentage": {"type": "number", "minimum": 0, "maximum": 100},
              "time_spent_minutes": {"type": "number"},
              "completed": {"type": "boolean"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "course.completed": {
            "schema_version": "1.0",
            "description": "User completed entire course",
            "required": ["user_id", "course_id", "completion_percentage", "timestamp"],
            "properties": {
              "user_id": {"type": "string", "format": "uuid"},
              "course_id": {"type": "string", "format": "uuid"},
              "completion_percentage": {"type": "number"},
              "total_time_spent_minutes": {"type": "number"},
              "certificate_id": {"type": "string", "format": "uuid"},
              "grade": {"type": "number"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          }
        },

        "commerce-events": {
          "order.created": {
            "schema_version": "1.0",
            "description": "New order created",
            "required": ["order_id", "user_id", "total_amount", "currency", "timestamp"],
            "properties": {
              "order_id": {"type": "string", "format": "uuid"},
              "order_number": {"type": "string"},
              "user_id": {"type": "string", "format": "uuid"},
              "items": {"type": "array", "items": {"type": "object"}},
              "total_amount": {"type": "number"},
              "discount_amount": {"type": "number"},
              "tax_amount": {"type": "number"},
              "currency": {"type": "string"},
              "billing_address": {"type": "object"},
              "metadata": {"type": "object"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "order.payment_completed": {
            "schema_version": "1.0", 
            "description": "Order payment successfully processed",
            "required": ["order_id", "transaction_id", "amount", "timestamp"],
            "properties": {
              "order_id": {"type": "string", "format": "uuid"},
              "transaction_id": {"type": "string", "format": "uuid"},
              "payment_method": {"type": "string"},
              "amount": {"type": "number"},
              "currency": {"type": "string"},
              "provider": {"type": "string"},
              "provider_transaction_id": {"type": "string"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "order.fulfilled": {
            "schema_version": "1.0",
            "description": "Order fulfillment completed",
            "required": ["order_id", "user_id", "timestamp"],
            "properties": {
              "order_id": {"type": "string", "format": "uuid"},
              "user_id": {"type": "string", "format": "uuid"},
              "items_fulfilled": {"type": "array", "items": {"type": "object"}},
              "enrollments_created": {"type": "array", "items": {"type": "string"}},
              "access_granted": {"type": "array", "items": {"type": "object"}},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "order.refunded": {
            "schema_version": "1.0",
            "description": "Order refund processed",
            "required": ["order_id", "refund_amount", "reason", "timestamp"],
            "properties": {
              "order_id": {"type": "string", "format": "uuid"},
              "user_id": {"type": "string", "format": "uuid"},
              "refund_amount": {"type": "number"},
              "currency": {"type": "string"},
              "reason": {"type": "string"},
              "refunded_by": {"type": "string", "format": "uuid"},
              "access_revoked": {"type": "array", "items": {"type": "string"}},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          }
        },

        "payment-events": {
          "payment.initiated": {
            "schema_version": "1.0",
            "description": "Payment process initiated",
            "required": ["payment_id", "order_id", "amount", "provider", "timestamp"],
            "properties": {
              "payment_id": {"type": "string", "format": "uuid"},
              "order_id": {"type": "string", "format": "uuid"},
              "user_id": {"type": "string", "format": "uuid"},
              "amount": {"type": "number"},
              "currency": {"type": "string"},
              "payment_method": {"type": "string"},
              "provider": {"type": "string"},
              "provider_payment_id": {"type": "string"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "payment.completed": {
            "schema_version": "1.0",
            "description": "Payment successfully processed",
            "required": ["payment_id", "transaction_id", "amount", "timestamp"],
            "properties": {
              "payment_id": {"type": "string", "format": "uuid"},
              "transaction_id": {"type": "string", "format": "uuid"},
              "order_id": {"type": "string", "format": "uuid"},
              "amount": {"type": "number"},
              "currency": {"type": "string"},
              "fees": {"type": "number"},
              "net_amount": {"type": "number"},
              "provider_response": {"type": "object"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "payment.failed": {
            "schema_version": "1.0",
            "description": "Payment processing failed",
            "required": ["payment_id", "failure_reason", "timestamp"],
            "properties": {
              "payment_id": {"type": "string", "format": "uuid"},
              "order_id": {"type": "string", "format": "uuid"},
              "user_id": {"type": "string", "format": "uuid"},
              "amount": {"type": "number"},
              "currency": {"type": "string"},
              "failure_reason": {"type": "string"},
              "failure_code": {"type": "string"},
              "provider_error": {"type": "object"},
              "retry_count": {"type": "number"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          }
        },

        "live-session-events": {
          "session.scheduled": {
            "schema_version": "1.0",
            "description": "Live session scheduled",
            "required": ["session_id", "instructor_id", "scheduled_start", "timestamp"],
            "properties": {
              "session_id": {"type": "string", "format": "uuid"},
              "course_id": {"type": "string", "format": "uuid"},
              "instructor_id": {"type": "string", "format": "uuid"},
              "title": {"type": "string"},
              "description": {"type": "string"},
              "scheduled_start": {"type": "string", "format": "date-time"},
              "scheduled_end": {"type": "string", "format": "date-time"},
              "max_participants": {"type": "number"},
              "room_id": {"type": "string"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "session.started": {
            "schema_version": "1.0",
            "description": "Live session started",
            "required": ["session_id", "instructor_id", "actual_start", "timestamp"],
            "properties": {
              "session_id": {"type": "string", "format": "uuid"},
              "instructor_id": {"type": "string", "format": "uuid"},
              "actual_start": {"type": "string", "format": "date-time"},
              "stream_url": {"type": "string"},
              "room_id": {"type": "string"},
              "participant_count": {"type": "number"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "session.participant_joined": {
            "schema_version": "1.0",
            "description": "Participant joined live session",
            "required": ["session_id", "user_id", "timestamp"],
            "properties": {
              "session_id": {"type": "string", "format": "uuid"},
              "user_id": {"type": "string", "format": "uuid"},
              "participant_role": {"type": "string", "enum": ["participant", "moderator", "instructor"]},
              "join_time": {"type": "string", "format": "date-time"},
              "device_type": {"type": "string"},
              "connection_quality": {"type": "string"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "session.ended": {
            "schema_version": "1.0", 
            "description": "Live session ended",
            "required": ["session_id", "actual_end", "duration_minutes", "timestamp"],
            "properties": {
              "session_id": {"type": "string", "format": "uuid"},
              "instructor_id": {"type": "string", "format": "uuid"},
              "actual_end": {"type": "string", "format": "date-time"},
              "duration_minutes": {"type": "number"},
              "total_participants": {"type": "number"},
              "peak_participants": {"type": "number"},
              "recording_url": {"type": "string"},
              "recording_duration": {"type": "number"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          }
        },

        "gateway-events": {
          "request.received": {
            "schema_version": "1.0",
            "description": "API request received at gateway",
            "required": ["request_id", "method", "path", "timestamp"],
            "properties": {
              "request_id": {"type": "string", "format": "uuid"},
              "correlation_id": {"type": "string"},
              "method": {"type": "string"},
              "path": {"type": "string"},
              "service_name": {"type": "string"},
              "route_id": {"type": "string"},
              "user_id": {"type": "string", "format": "uuid"},
              "ip_address": {"type": "string"},
              "user_agent": {"type": "string"},
              "headers": {"type": "object"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "request.completed": {
            "schema_version": "1.0",
            "description": "API request processing completed",
            "required": ["request_id", "status_code", "duration_ms", "timestamp"],
            "properties": {
              "request_id": {"type": "string", "format": "uuid"},
              "correlation_id": {"type": "string"},
              "route_id": {"type": "string"},
              "service_name": {"type": "string"},
              "status_code": {"type": "number"},
              "duration_ms": {"type": "number"},
              "response_size_bytes": {"type": "number"},
              "cache_hit": {"type": "boolean"},
              "retry_count": {"type": "number"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "rate_limit.exceeded": {
            "schema_version": "1.0",
            "description": "Rate limit exceeded for request",
            "required": ["request_id", "limit_key", "limit_type", "timestamp"],
            "properties": {
              "request_id": {"type": "string", "format": "uuid"},
              "user_id": {"type": "string", "format": "uuid"},
              "ip_address": {"type": "string"},
              "route_id": {"type": "string"},
              "limit_key": {"type": "string"},
              "limit_type": {"type": "string"},
              "current_count": {"type": "number"},
              "limit_threshold": {"type": "number"},
              "reset_time": {"type": "string", "format": "date-time"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "circuit_breaker.opened": {
            "schema_version": "1.0",
            "description": "Circuit breaker opened for service",
            "required": ["service_name", "failure_rate", "timestamp"],
            "properties": {
              "service_name": {"type": "string"},
              "route_id": {"type": "string"},
              "failure_rate": {"type": "number"},
              "failure_threshold": {"type": "number"},
              "request_count": {"type": "number"},
              "error_count": {"type": "number"},
              "last_failure_reason": {"type": "string"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          }
        },

        "analytics-events": {
          "user.page_view": {
            "schema_version": "1.0",
            "description": "User page view tracked",
            "required": ["user_id", "page_url", "timestamp"],
            "properties": {
              "user_id": {"type": "string", "format": "uuid"},
              "session_id": {"type": "string", "format": "uuid"},
              "page_url": {"type": "string"},
              "page_title": {"type": "string"},
              "referrer": {"type": "string"},
              "user_agent": {"type": "string"},
              "device_type": {"type": "string"},
              "browser": {"type": "string"},
              "os": {"type": "string"},
              "screen_resolution": {"type": "string"},
              "viewport_size": {"type": "string"},
              "load_time_ms": {"type": "number"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "user.interaction": {
            "schema_version": "1.0",
            "description": "User interaction event",
            "required": ["user_id", "interaction_type", "element", "timestamp"],
            "properties": {
              "user_id": {"type": "string", "format": "uuid"},
              "session_id": {"type": "string", "format": "uuid"},
              "interaction_type": {"type": "string", "enum": ["click", "scroll", "hover", "form_submit", "video_play", "video_pause"]},
              "element": {"type": "string"},
              "element_text": {"type": "string"},
              "page_url": {"type": "string"},
              "x_coordinate": {"type": "number"},
              "y_coordinate": {"type": "number"},
              "metadata": {"type": "object"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "session.started": {
            "schema_version": "1.0",
            "description": "User session started",
            "required": ["session_id", "user_id", "timestamp"],
            "properties": {
              "session_id": {"type": "string", "format": "uuid"},
              "user_id": {"type": "string", "format": "uuid"},
              "ip_address": {"type": "string"},
              "user_agent": {"type": "string"},
              "device_type": {"type": "string"},
              "browser": {"type": "string"},
              "os": {"type": "string"},
              "country": {"type": "string"},
              "city": {"type": "string"},
              "referrer": {"type": "string"},
              "landing_page": {"type": "string"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "session.ended": {
            "schema_version": "1.0",
            "description": "User session ended",
            "required": ["session_id", "duration_minutes", "timestamp"],
            "properties": {
              "session_id": {"type": "string", "format": "uuid"},
              "user_id": {"type": "string", "format": "uuid"},
              "duration_minutes": {"type": "number"},
              "page_views": {"type": "number"},
              "interactions": {"type": "number"},
              "bounce": {"type": "boolean"},
              "conversion_events": {"type": "array", "items": {"type": "string"}},
              "exit_page": {"type": "string"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          }
        },

        "notification-events": {
          "notification.queued": {
            "schema_version": "1.0",
            "description": "Notification queued for delivery",
            "required": ["notification_id", "user_id", "type", "timestamp"],
            "properties": {
              "notification_id": {"type": "string", "format": "uuid"},
              "user_id": {"type": "string", "format": "uuid"},
              "type": {"type": "string", "enum": ["email", "sms", "push", "in_app"]},
              "template_id": {"type": "string", "format": "uuid"},
              "subject": {"type": "string"},
              "message": {"type": "string"},
              "data": {"type": "object"},
              "priority": {"type": "string", "enum": ["low", "normal", "high", "urgent"]},
              "scheduled_at": {"type": "string", "format": "date-time"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "notification.sent": {
            "schema_version": "1.0",
            "description": "Notification sent successfully",
            "required": ["notification_id", "provider", "timestamp"],
            "properties": {
              "notification_id": {"type": "string", "format": "uuid"},
              "user_id": {"type": "string", "format": "uuid"},
              "type": {"type": "string"},
              "provider": {"type": "string"},
              "provider_id": {"type": "string"},
              "delivery_time_ms": {"type": "number"},
              "attempt_count": {"type": "number"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "notification.failed": {
            "schema_version": "1.0",
            "description": "Notification delivery failed",
            "required": ["notification_id", "failure_reason", "timestamp"],
            "properties": {
              "notification_id": {"type": "string", "format": "uuid"},
              "user_id": {"type": "string", "format": "uuid"},
              "type": {"type": "string"},
              "provider": {"type": "string"},
              "failure_reason": {"type": "string"},
              "failure_code": {"type": "string"},
              "retry_count": {"type": "number"},
              "will_retry": {"type": "boolean"},
              "next_retry_at": {"type": "string", "format": "date-time"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          },
          "notification.delivered": {
            "schema_version": "1.0",
            "description": "Notification confirmed delivered",
            "required": ["notification_id", "timestamp"],
            "properties": {
              "notification_id": {"type": "string", "format": "uuid"},
              "user_id": {"type": "string", "format": "uuid"},
              "type": {"type": "string"},
              "provider": {"type": "string"},
              "delivered_at": {"type": "string", "format": "date-time"},
              "total_delivery_time_ms": {"type": "number"},
              "timestamp": {"type": "string", "format": "date-time"}
            }
          }
        }
      }
    }

---
# Kafka Consumer Groups Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-consumer-groups
  namespace: suuupra-platform
data:
  consumer-groups.yaml: |
    consumer_groups:
      # Identity service consumers
      identity-service:
        topics: 
          - user-events
          - gateway-events
        partition_assignment_strategy: range
        session_timeout_ms: 30000
        heartbeat_interval_ms: 3000
        max_poll_records: 500
        auto_offset_reset: latest
        enable_auto_commit: true
        auto_commit_interval_ms: 5000
        
      # Content service consumers  
      content-service:
        topics:
          - user-events
          - course-events
          - analytics-events
        partition_assignment_strategy: range
        session_timeout_ms: 30000
        max_poll_records: 1000
        auto_offset_reset: latest
        
      # Commerce service consumers
      commerce-service:
        topics:
          - user-events
          - course-events
          - payment-events
          - commerce-events
        partition_assignment_strategy: range
        session_timeout_ms: 30000
        max_poll_records: 500
        auto_offset_reset: latest
        
      # Payment service consumers
      payment-service:
        topics:
          - commerce-events
          - payment-events
        partition_assignment_strategy: sticky
        session_timeout_ms: 30000
        max_poll_records: 200
        auto_offset_reset: latest
        processing_guarantee: exactly_once
        
      # Notifications service consumers
      notifications-service:
        topics:
          - user-events
          - course-events
          - commerce-events
          - payment-events
          - live-session-events
          - notification-events
        partition_assignment_strategy: round_robin
        session_timeout_ms: 30000
        max_poll_records: 1000
        auto_offset_reset: latest
        
      # Analytics service consumers
      analytics-service:
        topics:
          - user-events
          - course-events
          - commerce-events
          - payment-events
          - live-session-events
          - gateway-events
          - analytics-events
        partition_assignment_strategy: range
        session_timeout_ms: 45000
        max_poll_records: 2000
        auto_offset_reset: earliest
        
      # Live classes service consumers
      live-classes-service:
        topics:
          - user-events
          - course-events
          - live-session-events
        partition_assignment_strategy: range
        session_timeout_ms: 30000
        max_poll_records: 500
        auto_offset_reset: latest
        
      # API Gateway consumers
      api-gateway-service:
        topics:
          - user-events
          - gateway-events
        partition_assignment_strategy: sticky
        session_timeout_ms: 30000
        max_poll_records: 1000
        auto_offset_reset: latest

---
# Kafka Connect Configuration for External Integrations
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-connect-config
  namespace: suuupra-platform
data:
  connect-config.properties: |
    # Kafka Connect configuration for external system integration
    bootstrap.servers=kafka:9092
    group.id=suuupra-connect-cluster
    key.converter=org.apache.kafka.connect.json.JsonConverter
    value.converter=org.apache.kafka.connect.json.JsonConverter
    key.converter.schemas.enable=true
    value.converter.schemas.enable=true
    offset.storage.topic=connect-offsets
    offset.storage.replication.factor=3
    config.storage.topic=connect-configs
    config.storage.replication.factor=3
    status.storage.topic=connect-status
    status.storage.replication.factor=3
    offset.flush.interval.ms=10000
    
  connectors.json: |
    {
      "elasticsearch-sink": {
        "name": "elasticsearch-analytics-sink",
        "config": {
          "connector.class": "io.confluent.connect.elasticsearch.ElasticsearchSinkConnector",
          "tasks.max": "3",
          "topics": "analytics-events,user-events,gateway-events",
          "connection.url": "http://elasticsearch:9200",
          "type.name": "_doc",
          "key.ignore": "false",
          "schema.ignore": "true",
          "batch.size": "100",
          "max.buffered.records": "1000",
          "flush.timeout.ms": "10000"
        }
      },
      
      "webhook-sink": {
        "name": "webhook-notifications-sink", 
        "config": {
          "connector.class": "com.github.castorm.kafka.connect.http.HttpSinkConnector",
          "tasks.max": "2",
          "topics": "notification-events,payment-events",
          "http.api.url": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
          "request.method": "POST",
          "headers": "Content-Type:application/json",
          "batch.max.size": "10",
          "retry.backoff.ms": "3000",
          "max.retries": "3"
        }
      },
      
      "s3-archive": {
        "name": "s3-events-archive",
        "config": {
          "connector.class": "io.confluent.connect.s3.S3SinkConnector",
          "tasks.max": "4",
          "topics": "user-events,course-events,commerce-events,payment-events",
          "s3.bucket.name": "suuupra-events-archive",
          "s3.part.size": "26214400",
          "flush.size": "1000",
          "rotate.interval.ms": "3600000",
          "timezone": "UTC",
          "partitioner.class": "io.confluent.connect.storage.partitioner.TimeBasedPartitioner",
          "path.format": "'year'=YYYY/'month'=MM/'day'=dd/'hour'=HH",
          "locale": "US",
          "format.class": "io.confluent.connect.s3.format.json.JsonFormat"
        }
      }
    }

---
# Event Processing Rules and Transformations
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-stream-processing
  namespace: suuupra-platform
data:
  streams-config.properties: |
    # Kafka Streams configuration for real-time event processing
    application.id=suuupra-stream-processor
    bootstrap.servers=kafka:9092
    default.key.serde=org.apache.kafka.common.serialization.Serdes$StringSerde
    default.value.serde=org.apache.kafka.common.serialization.Serdes$StringSerde
    num.stream.threads=4
    processing.guarantee=exactly_once_v2
    commit.interval.ms=1000
    cache.max.bytes.buffering=10485760
    
  stream-topologies.yaml: |
    topologies:
      user-analytics-aggregator:
        description: "Aggregate user behavior events in real-time"
        input_topics:
          - analytics-events
          - user-events
        output_topics:
          - user-analytics-summary
        processing:
          - type: "filter"
            condition: "event_type in ['page_view', 'interaction', 'login']"
          - type: "group_by"
            key: "user_id"
          - type: "window"
            type: "tumbling"
            duration_ms: 300000  # 5 minutes
          - type: "aggregate"
            operations:
              - "count(page_views)"
              - "count(interactions)"
              - "sum(session_duration)"
              - "collect_set(pages_visited)"
              
      revenue-calculator:
        description: "Calculate real-time revenue metrics"
        input_topics:
          - payment-events
          - commerce-events
        output_topics:
          - revenue-metrics
        processing:
          - type: "filter"
            condition: "event_type = 'payment.completed'"
          - type: "transform"
            fields:
              - "extract_date(timestamp) as revenue_date"
              - "amount as revenue_amount"
          - type: "group_by"
            key: "revenue_date"
          - type: "window"
            type: "tumbling"
            duration_ms: 3600000  # 1 hour
          - type: "aggregate"
            operations:
              - "sum(revenue_amount) as total_revenue"
              - "count(*) as transaction_count"
              - "avg(revenue_amount) as avg_transaction_value"
              
      fraud-detection:
        description: "Real-time fraud detection pipeline"
        input_topics:
          - payment-events
          - user-events
          - gateway-events
        output_topics:
          - fraud-alerts
        processing:
          - type: "join"
            join_type: "stream-stream"
            window_ms: 60000
            condition: "user_id"
          - type: "filter"
            condition: "multiple_payment_attempts OR suspicious_location OR rate_limit_exceeded"
          - type: "enrich"
            lookup_table: "user_profiles"
          - type: "score"
            algorithm: "ml_fraud_model"
            threshold: 0.7
          - type: "alert"
            severity: "high"
            channels: ["slack", "email", "pagerduty"]
            
      course-recommendations:
        description: "Generate course recommendations based on user behavior"
        input_topics:
          - user-events
          - course-events
          - analytics-events
        output_topics:
          - course-recommendations
        processing:
          - type: "filter"
            condition: "event_type in ['course.completed', 'course.progress_updated']"
          - type: "group_by"
            key: "user_id"
          - type: "window"
            type: "session"
            inactivity_gap_ms: 1800000  # 30 minutes
          - type: "aggregate"
            operations:
              - "collect_list(course_categories)"
              - "collect_list(completed_courses)"
              - "avg(completion_rate)"
          - type: "ml_inference"
            model: "course_recommendation_model"
            features: ["user_tier", "learning_patterns", "category_preferences"]
            output: "recommended_courses"

# Event Schema Registry Integration
---
apiVersion: v1  
kind: ConfigMap
metadata:
  name: schema-registry-config
  namespace: suuupra-platform
data:
  schema-registry.properties: |
    # Schema Registry configuration
    listeners=http://0.0.0.0:8081
    kafkastore.bootstrap.servers=kafka:9092
    kafkastore.topic=_schemas
    kafkastore.topic.replication.factor=3
    debug=false
    
  compatibility-config.json: |
    {
      "default_compatibility_level": "BACKWARD",
      "schema_policies": {
        "user-events": {
          "compatibility": "BACKWARD_TRANSITIVE",
          "validation": "strict"
        },
        "payment-events": {
          "compatibility": "FULL_TRANSITIVE", 
          "validation": "strict"
        },
        "course-events": {
          "compatibility": "BACKWARD",
          "validation": "lenient"
        },
        "analytics-events": {
          "compatibility": "FORWARD",
          "validation": "lenient"
        }
      }
    }
