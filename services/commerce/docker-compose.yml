version: '3.8'

services:
  # Commerce Service
  commerce-service:
    build: .
    ports:
      - "8084:8084"
      - "9090:9090"  # Prometheus metrics
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://commerce:commerce@postgres:5432/commerce_dev
      - REDIS_URL=redis://redis:6379/0
      - JAEGER_ENDPOINT=http://jaeger:14268
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - commerce-network
    volumes:
      - ./src:/app/src  # For development
    command: ["python", "-m", "uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8084", "--reload"]

  # PostgreSQL for Event Store
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=commerce_dev
      - POSTGRES_USER=commerce
      - POSTGRES_PASSWORD=commerce
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - commerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U commerce -d commerce_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Cart Persistence and Messaging
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - commerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Commander (Development UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - commerce-network
    profiles:
      - dev

  # pgAdmin (Development UI)
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@commerce.local
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "8082:80"
    depends_on:
      - postgres
    networks:
      - commerce-network
    profiles:
      - dev

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - commerce-network

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"  # Different port to avoid conflict
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - commerce-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"  # Different port to avoid conflict
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - commerce-network

networks:
  commerce-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
