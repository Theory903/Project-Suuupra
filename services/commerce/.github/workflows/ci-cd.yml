name: Commerce Service CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
    paths:
      - 'services/commerce/**'
      - '.github/workflows/commerce-*.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/commerce/**'
  release:
    types: [ published ]

env:
  SERVICE_NAME: commerce-service
  SERVICE_PATH: services/commerce
  REGISTRY: ghcr.io
  IMAGE_NAME: suuupra/commerce-service

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      working-directory: ${{ env.SERVICE_PATH }}
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run Bandit security linter
      working-directory: ${{ env.SERVICE_PATH }}
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt

    - name: Run Safety check
      working-directory: ${{ env.SERVICE_PATH }}
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
        generateSarif: "1"

    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

  # Unit and Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: commerce_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ${{ env.SERVICE_PATH }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Set up test environment
      working-directory: ${{ env.SERVICE_PATH }}
      run: |
        cp .env.test.example .env.test
        export PYTHONPATH="${{ github.workspace }}/${{ env.SERVICE_PATH }}/src"

    - name: Run database migrations
      working-directory: ${{ env.SERVICE_PATH }}
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/commerce_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        python -m alembic upgrade head

    - name: Run unit tests
      working-directory: ${{ env.SERVICE_PATH }}
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/commerce_test
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: ${{ github.workspace }}/${{ env.SERVICE_PATH }}/src
      run: |
        python -m pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=80

    - name: Run integration tests
      working-directory: ${{ env.SERVICE_PATH }}
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/commerce_test
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: ${{ github.workspace }}/${{ env.SERVICE_PATH }}/src
      run: |
        python -m pytest tests/integration/ -v --maxfail=5

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ${{ env.SERVICE_PATH }}/coverage.xml
        flags: unittests
        name: commerce-service
        fail_ci_if_error: true

  # End-to-End Tests
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      working-directory: ${{ env.SERVICE_PATH }}
      run: |
        docker build -t commerce-service:test .

    - name: Run E2E tests with Docker Compose
      working-directory: ${{ env.SERVICE_PATH }}
      run: |
        docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit --exit-code-from test
        docker-compose -f docker-compose.test.yml down -v

  # Container Image Build and Security Scan
  build:
    name: Build & Scan Container Image
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.SERVICE_PATH }}
        file: ${{ env.SERVICE_PATH }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          BUILD_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          BUILD_REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk Container scan
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        args: --severity-threshold=high --file=${{ env.SERVICE_PATH }}/Dockerfile

  # Generate SBOM (Software Bill of Materials)
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ needs.build.outputs.image-tag }}
        format: spdx-json
        output-file: commerce-service-sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: commerce-service-sbom
        path: commerce-service-sbom.spdx.json

  # Sign Container Image
  sign:
    name: Sign Container Image
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    steps:
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Sign container image
      run: |
        cosign sign --yes ${{ needs.build.outputs.image-tag }}@${{ needs.build.outputs.image-digest }}

  # Load Testing
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: [build, e2e-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Locust
      run: |
        pip install locust

    - name: Start test environment
      working-directory: ${{ env.SERVICE_PATH }}
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30  # Wait for services to be ready

    - name: Run load tests
      working-directory: ${{ env.SERVICE_PATH }}
      run: |
        locust -f tests/load/locustfile.py --headless \
               --users 100 --spawn-rate 10 --run-time 5m \
               --host http://localhost:8084 \
               --html load-test-report.html

    - name: Upload load test results
      uses: actions/upload-artifact@v3
      with:
        name: load-test-results
        path: ${{ env.SERVICE_PATH }}/load-test-report.html

    - name: Cleanup test environment
      working-directory: ${{ env.SERVICE_PATH }}
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e-test]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-commerce.suuupra.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Deploy to staging
      working-directory: ${{ env.SERVICE_PATH }}
      run: |
        # Update image in deployment
        kubectl set image deployment/commerce-service-staging \
          commerce-service=${{ needs.build.outputs.image-tag }} \
          -n commerce-staging
        
        # Wait for rollout to complete
        kubectl rollout status deployment/commerce-service-staging -n commerce-staging --timeout=300s
        
        # Run smoke tests
        kubectl run smoke-test --rm -i --restart=Never \
          --image=curlimages/curl:latest \
          -- curl -f https://staging-commerce.suuupra.com/health

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, load-test, sign, sbom]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://commerce.suuupra.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Verify image signature
      run: |
        cosign verify ${{ needs.build.outputs.image-tag }}@${{ needs.build.outputs.image-digest }} \
          --certificate-identity-regexp="https://github.com/suuupra/.*" \
          --certificate-oidc-issuer="https://token.actions.githubusercontent.com"

    - name: Deploy to production (Blue-Green)
      working-directory: ${{ env.SERVICE_PATH }}
      run: |
        # Create new deployment with green suffix
        kubectl apply -f k8s/ -n commerce
        
        # Update image in deployment
        kubectl set image deployment/commerce-service \
          commerce-service=${{ needs.build.outputs.image-tag }} \
          -n commerce
        
        # Wait for rollout to complete
        kubectl rollout status deployment/commerce-service -n commerce --timeout=600s
        
        # Run production smoke tests
        kubectl run prod-smoke-test --rm -i --restart=Never \
          --image=curlimages/curl:latest \
          -- curl -f https://commerce.suuupra.com/health

    - name: Run post-deployment tests
      working-directory: ${{ env.SERVICE_PATH }}
      run: |
        # Run critical path tests against production
        python -m pytest tests/e2e/critical_path.py \
          --base-url=https://commerce.suuupra.com \
          --api-key=${{ secrets.PROD_API_KEY }}

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
    - name: Notify Slack on Success
      if: ${{ needs.deploy-production.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: |
          ✅ Commerce Service deployed successfully to production!
          
          🏷️ Version: ${{ github.sha }}
          👤 Deployed by: ${{ github.actor }}
          🔗 URL: https://commerce.suuupra.com
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on Failure
      if: ${{ needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        text: |
          ❌ Commerce Service deployment failed!
          
          🏷️ Version: ${{ github.sha }}
          👤 Attempted by: ${{ github.actor }}
          📋 Check: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main' && needs.deploy-production.result == 'success'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: commerce-service-v${{ github.run_number }}
        release_name: Commerce Service v${{ github.run_number }}
        body: |
          ## Commerce Service Release v${{ github.run_number }}
          
          ### Changes
          - Deployed from commit: ${{ github.sha }}
          - Deployed by: ${{ github.actor }}
          
          ### Deployment
          - ✅ Staging: https://staging-commerce.suuupra.com
          - ✅ Production: https://commerce.suuupra.com
          
          ### Artifacts
          - Container Image: ${{ needs.build.outputs.image-tag }}
          - SBOM: Available in workflow artifacts
        draft: false
        prerelease: false
