version: '3.8'

services:
  # Content Service (Development)
  content-service-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: content-service-dev
    restart: unless-stopped
    ports:
      - "8082:8082"
      - "9090:9090" # Metrics port
      - "9229:9229" # Debug port
    environment:
      NODE_ENV: development
      PORT: 8082
      SERVICE_NAME: content-service
      
      # Database URLs
      MONGODB_URI: mongodb://mongo-dev:27017/content_dev
      ELASTICSEARCH_NODE: http://elasticsearch-dev:9200
      REDIS_URL: redis://redis-dev:6379
      
      # AWS S3 (use MinIO for development)
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      S3_BUCKET_NAME: content-bucket-dev
      S3_BUCKET_REGION: us-east-1
      
      # Authentication (relaxed for development)
      JWT_SECRET: dev-jwt-secret-key
      JWKS_URI: http://localhost:8081/.well-known/jwks.json
      JWT_ISSUER: https://identity.suuupra.local
      JWT_AUDIENCE: suuupra-api
      
      # Features
      ENABLE_CONTENT_VERSIONING: "true"
      ENABLE_APPROVAL_WORKFLOW: "true"
      ENABLE_WEBHOOK_DELIVERY: "false" # Disabled in dev
      ENABLE_CONTENT_MODERATION: "false" # Disabled in dev
      ENABLE_BACKGROUND_JOBS: "true"
      
      # Observability
      LOG_LEVEL: debug
      ENABLE_REQUEST_LOGGING: "true"
      PROMETHEUS_METRICS_PORT: 9090
      
      # Development specific
      NODE_OPTIONS: "--inspect=0.0.0.0:9229"
    
    depends_on:
      - mongo-dev
      - elasticsearch-dev
      - redis-dev
      - minio-dev
    
    networks:
      - suuupra-dev-network
    
    volumes:
      - .:/app
      - /app/node_modules
      - content-dev-logs:/app/logs
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MongoDB (Development)
  mongo-dev:
    image: mongo:6.0
    container_name: content-mongo-dev
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: content_dev
    ports:
      - "27018:27017"
    volumes:
      - mongo-dev-data:/data/db
      - ./scripts/mongo-init-dev.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - suuupra-dev-network
    command: mongod --bind_ip_all

  # Elasticsearch (Development)
  elasticsearch-dev:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: content-elasticsearch-dev
    restart: unless-stopped
    environment:
      - node.name=elasticsearch-dev
      - cluster.name=content-dev-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-dev-data:/usr/share/elasticsearch/data
    ports:
      - "9201:9200"
      - "9301:9300"
    networks:
      - suuupra-dev-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis (Development)
  redis-dev:
    image: redis:7-alpine
    container_name: content-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6380:6379"
    volumes:
      - redis-dev-data:/data
    networks:
      - suuupra-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO (Development)
  minio-dev:
    image: minio/minio:latest
    container_name: content-minio-dev
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9002:9000"
      - "9003:9001"
    volumes:
      - minio-dev-data:/data
    networks:
      - suuupra-dev-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Client (Development)
  minio-client-dev:
    image: minio/mc:latest
    container_name: content-minio-client-dev
    depends_on:
      - minio-dev
    networks:
      - suuupra-dev-network
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc alias set myminio http://minio-dev:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/content-bucket-dev --ignore-existing;
      /usr/bin/mc policy set public myminio/content-bucket-dev;
      echo 'Development MinIO setup complete';
      exit 0;
      "

  # Elasticsearch Head (Development tool)
  elasticsearch-head:
    image: mobz/elasticsearch-head:5
    container_name: content-es-head
    ports:
      - "9100:9100"
    networks:
      - suuupra-dev-network
    depends_on:
      - elasticsearch-dev

  # Redis Commander (Development tool)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: content-redis-commander
    environment:
      REDIS_HOSTS: local:redis-dev:6379
    ports:
      - "8081:8081"
    networks:
      - suuupra-dev-network
    depends_on:
      - redis-dev

  # MongoDB Express (Development tool)
  mongo-express:
    image: mongo-express:latest
    container_name: content-mongo-express
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo-dev
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password
    ports:
      - "8083:8081"
    networks:
      - suuupra-dev-network
    depends_on:
      - mongo-dev

networks:
  suuupra-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  mongo-dev-data:
    driver: local
  es-dev-data:
    driver: local
  redis-dev-data:
    driver: local
  minio-dev-data:
    driver: local
  content-dev-logs:
    driver: local
