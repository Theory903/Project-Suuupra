version: '3.8'

services:
  # Content Service
  content-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: content-service
    restart: unless-stopped
    ports:
      - "8082:8082"
      - "9090:9090" # Metrics port
    environment:
      NODE_ENV: production
      PORT: 8082
      SERVICE_NAME: content-service
      
      # Database URLs
      MONGODB_URI: mongodb://mongo:27017/content_prod
      ELASTICSEARCH_NODE: http://elasticsearch:9200
      REDIS_URL: redis://redis:6379
      
      # AWS S3 (use MinIO for local development)
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      S3_BUCKET_NAME: content-bucket
      S3_BUCKET_REGION: us-east-1
      
      # Authentication
      JWT_SECRET: your-jwt-secret-key-change-in-production
      JWKS_URI: http://identity-service:8081/.well-known/jwks.json
      JWT_ISSUER: https://identity.suuupra.local
      JWT_AUDIENCE: suuupra-api
      
      # Features
      ENABLE_CONTENT_VERSIONING: "true"
      ENABLE_APPROVAL_WORKFLOW: "true"
      ENABLE_WEBHOOK_DELIVERY: "true"
      ENABLE_CONTENT_MODERATION: "true"
      ENABLE_BACKGROUND_JOBS: ${ENABLE_BACKGROUND_JOBS:-false}
      
      # Observability
      LOG_LEVEL: info
      ENABLE_REQUEST_LOGGING: "true"
      PROMETHEUS_METRICS_PORT: 9090
      
      # External Services
      IDENTITY_SERVICE_URL: http://identity-service:8081
      NOTIFICATION_SERVICE_URL: http://notification-service:8085
      ANALYTICS_SERVICE_URL: http://analytics-service:8087
    
    depends_on:
      - mongo
      - elasticsearch
      - redis
      - minio
    
    networks:
      - suuupra-network
    
    volumes:
      - content-logs:/app/logs
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB
  mongo:
    image: mongo:6.0
    container_name: content-mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: content_prod
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - suuupra-network
    command: mongod --auth --bind_ip_all

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: content-elasticsearch
    restart: unless-stopped
    environment:
      - node.name=elasticsearch
      - cluster.name=content-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: content-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis-password
    environment:
      REDIS_PASSWORD: redis-password
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis-password", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO (S3-compatible storage for local development)
  minio:
    image: minio/minio:latest
    container_name: content-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    networks:
      - suuupra-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Client (for bucket creation)
  minio-client:
    image: minio/mc:latest
    container_name: content-minio-client
    depends_on:
      - minio
    networks:
      - suuupra-network
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/content-bucket --ignore-existing;
      /usr/bin/mc policy set public myminio/content-bucket;
      exit 0;
      "

  # Prometheus (for metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: content-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - suuupra-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana (for monitoring dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: content-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - suuupra-network

networks:
  suuupra-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongo-data:
    driver: local
  mongo-config:
    driver: local
  es-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  content-logs:
    driver: local
