{{- if eq .Values.deployment.strategy "canary" }}
apiVersion: argoproj.io/v1alpha1
kind: Rollout
{{- else }}
apiVersion: apps/v1
kind: Deployment
{{- end }}
metadata:
  name: {{ include "content-service.fullname" . }}
  labels:
    app: {{ include "content-service.name" . }}
    chart: {{ include "content-service.chart" . }}
spec:
  {{- if eq .Values.deployment.strategy "canary" }}
  replicas: {{ .Values.replicas }}
  strategy:
    canary:
      steps:
        - setWeight: {{ .Values.canary.weight }}
        - pause: {}
        - setWeight: 100
      trafficRouting:
        # Assuming Istio is used for traffic management
        # You might need to configure this based on your service mesh setup
        # For a simple canary without a service mesh, you might need a separate service
        # and handle traffic splitting at the ingress level.
        istio:
          virtualService:
            name: {{ include "content-service.fullname" . }}
            routes:
              - primary
  {{- else }}
  replicas: {{ .Values.replicas }}
  strategy:
    type: {{ .Values.deployment.strategy }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ include "content-service.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "content-service.name" . }}
    spec:
      containers:
        - name: content-service
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
              name: http
            - containerPort: {{ .Values.service.metricsPort }}
              name: metrics
          env:
            - name: PORT
              value: "{{ .Values.service.port }}"
            - name: PROMETHEUS_METRICS_PORT
              value: "{{ .Values.service.metricsPort }}"
            - name: ENABLE_BACKGROUND_JOBS
              value: "{{ .Values.env.ENABLE_BACKGROUND_JOBS }}"
            - name: NODE_ENV
              value: "{{ .Values.env.NODE_ENV }}"
            - name: LOG_LEVEL
              value: "{{ .Values.env.LOG_LEVEL }}"
            - name: ENABLE_VIRUS_SCANNING
              value: "{{ .Values.env.ENABLE_VIRUS_SCANNING }}"
            - name: CLAMAV_HOST
              value: "{{ .Values.env.CLAMAV_HOST }}"
            - name: CLAMAV_PORT
              value: "{{ .Values.env.CLAMAV_PORT }}"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}

