version: '3.8'

services:
  # UPI PSP Service
  upi-psp-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: upi-psp-service
    restart: unless-stopped
    ports:
      - "8097:8097"
      - "9090:9090"  # Metrics port
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 8097
      SERVICE_NAME: upi-psp-service
      
      # Database Configuration
      DATABASE_URL: postgresql://upi_psp:upi_psp_password@postgres:5432/upi_psp_db
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # UPI Configuration
      UPI_ACQUIRER_ID: ${UPI_ACQUIRER_ID:-SUUUPRA}
      UPI_PSP_ID: ${UPI_PSP_ID:-SUUUPRAPSP}
      UPI_MERCHANT_ID: ${UPI_MERCHANT_ID:-SUUUPRA001}
      
      # Security Configuration
      JWT_SECRET: ${JWT_SECRET:-change-me-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-change-me-in-production}
      
      # External Service URLs
      UPI_CORE_SERVICE_URL: http://upi-core-service:50051
      PAYMENT_SERVICE_URL: http://payment-service:8084
      NOTIFICATION_SERVICE_URL: http://notification-service:8085
      
      # Observability
      LOG_LEVEL: ${LOG_LEVEL:-info}
      PROMETHEUS_METRICS_PORT: 9090
      JAEGER_ENDPOINT: ${JAEGER_ENDPOINT:-http://jaeger:14268}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    networks:
      - upi-psp-network
    
    volumes:
      - upi-psp-logs:/app/logs
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8097/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: upi-psp-postgres
    environment:
      POSTGRES_DB: upi_psp_db
      POSTGRES_USER: upi_psp
      POSTGRES_PASSWORD: upi_psp_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - upi-psp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U upi_psp -d upi_psp_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: upi-psp-redis
    ports:
      - "6381:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - upi-psp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: upi-psp-prometheus
    ports:
      - "9092:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - upi-psp-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  upi-psp-logs:
  prometheus_data:

networks:
  upi-psp-network:
    driver: bridge
    name: upi-psp-network
