version: '4'

services:
  # Identity Service - JWT Auth & User Management
  identity:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-identity
    restart: unless-stopped
    ports:
      - "8081:8081"   # Main service port (aligned with main compose)
      - "9092:9092"   # Metrics port (aligned with main compose)
    environment:
      # Core configuration (aligned with main docker-compose.yml)
      NODE_ENV: production
      PORT: 8081
      METRICS_PORT: 9092
      
      # Database - Using main infrastructure PostgreSQL
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: identity
      POSTGRES_POOL_MIN: 5
      POSTGRES_POOL_MAX: 20
      POSTGRES_IDLE_TIMEOUT: 30000
      
      # Redis for sessions - Using main infrastructure
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_SESSION_PREFIX: "sess:"
      REDIS_SESSION_TTL: 3600
      
      # Security - Using main infrastructure Vault
      JWT_SECRET_KEY_ID: identity-service-key
      JWT_ISSUER: https://auth.suuupra.com
      JWT_AUDIENCE: https://api.suuupra.com
      JWT_EXPIRY: 3600
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET:-refresh-secret-key}
      REFRESH_TOKEN_EXPIRY: 604800  # 7 days
      
      # Vault integration
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN:-myroot}
      VAULT_MOUNT_PATH: identity
      
      # Observability - Using main infrastructure
      OTEL_SERVICE_NAME: identity-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
      # Event publishing - Using main infrastructure Kafka
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: identity-service
      KAFKA_GROUP_ID: identity-consumers
      
      # Rate limiting & security
      BCRYPT_ROUNDS: 12
      MAX_LOGIN_ATTEMPTS: 5
      LOCKOUT_DURATION: 900000  # 15 minutes
      
      # OAuth Configuration
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      
      # CORS
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8080}
      
    volumes:
      - app_logs:/app/logs
    
    # Use main infrastructure services (no separate dependencies)
    external_links:
      - postgres:postgres
      - redis:redis
      - kafka:kafka
      - vault:vault
      - otel-collector:otel-collector
    
    networks:
      - suuupra-network
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9092"

# ===================================================================
# VOLUMES - Aligned with main infrastructure
# ===================================================================
volumes:
  app_logs:
    external: true
    name: suuupra_app_logs

# ===================================================================
# NETWORKS - Using main infrastructure network
# ===================================================================
networks:
  suuupra-network:
    external: true
    name: suuupra-network

# ===================================================================
# NOTES:
# - All infrastructure services (PostgreSQL, Redis, Kafka, Vault, 
#   Prometheus, Grafana, Jaeger) are provided by main infrastructure
# - Use: docker-compose -f ../../docker-compose.infrastructure.yml up -d
# - Then: docker-compose -f docker-compose.yml up -d
# ===================================================================
