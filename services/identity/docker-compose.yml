version: '3.8'

services:
  # Identity Service
  identity-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: identity-service
    restart: unless-stopped
    ports:
      - "8081:8081"
      - "9090:9090"  # Metrics port
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-development}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/identity_db
      SPRING_DATASOURCE_USERNAME: identity_user
      SPRING_DATASOURCE_PASSWORD: identity_password
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_DATABASE: 0
      
      # JWT Configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-change-me-in-production}
      JWT_EXPIRATION_TIME: ${JWT_EXPIRATION_TIME:-3600}
      JWT_REFRESH_EXPIRATION_TIME: ${JWT_REFRESH_EXPIRATION_TIME:-86400}
      
      # OAuth Configuration
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      
      # Logging
      LOGGING_LEVEL_COM_SUUUPRA_IDENTITY: ${LOG_LEVEL:-INFO}
      LOGGING_PATTERN_CONSOLE: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
      
      # Actuator
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when_authorized
      
      # Security
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8080}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    networks:
      - identity-network
    
    volumes:
      - identity-logs:/app/logs
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: identity-postgres
    environment:
      POSTGRES_DB: identity_db
      POSTGRES_USER: identity_user
      POSTGRES_PASSWORD: identity_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - identity-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U identity_user -d identity_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for Session Management and Caching
  redis:
    image: redis:7-alpine
    container_name: identity-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - identity-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus for Metrics Collection (Development)
  prometheus:
    image: prom/prometheus:latest
    container_name: identity-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - identity-network
    profiles:
      - monitoring

  # Grafana for Metrics Visualization (Development)
  grafana:
    image: grafana/grafana:latest
    container_name: identity-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - identity-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  identity-logs:
  prometheus_data:
  grafana_data:

networks:
  identity-network:
    driver: bridge
    name: identity-network
