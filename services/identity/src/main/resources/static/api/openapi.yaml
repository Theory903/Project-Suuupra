openapi: 3.0.3
info:
  title: Suuupra Identity Service API
  description: |
    Comprehensive user authentication, authorization, and profile management service for the Suuupra platform.
    
    ## Features
    - JWT-based authentication with refresh tokens
    - Role-based access control (RBAC)
    - User profile management
    - Administrative user operations
    - Security features and rate limiting
    
    ## Authentication
    Most endpoints require a Bearer token in the Authorization header:
    ```
    Authorization: Bearer <jwt_token>
    ```
    
    ## Rate Limiting
    - Authentication endpoints: 10 requests per minute per IP
    - User management: 100 requests per minute per user
    - Token validation: 1000 requests per minute per token
  version: 1.0.0
  contact:
    name: Suuupra Identity Team
    email: identity-team@suuupra.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://identity.suuupra.com/api/v1
    description: Production server

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new user account with email and password
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              user_registration:
                summary: Standard user registration
                value:
                  email: "user@example.com"
                  password: "SecurePassword123!"
                  firstName: "John"
                  lastName: "Doe"
                  phoneNumber: "+91-9876543210"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT tokens
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              user_login:
                summary: Standard user login
                value:
                  email: "user@example.com"
                  password: "SecurePassword123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: Generate new access token using refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidate user session and tokens
      operationId: logoutUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /auth/validate:
    post:
      tags:
        - Authentication
      summary: Validate JWT token
      description: Verify if JWT token is valid and return user information
      operationId: validateToken
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenValidationResponse'
        '401':
          description: Token is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/profile:
    get:
      tags:
        - User Management
      summary: Get user profile
      description: Get current user's profile information
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - User Management
      summary: Update user profile
      description: Update current user's profile information
      operationId: updateUserProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - User Management
      summary: List users
      description: Get list of users (admin only)
      operationId: listUsers
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search term for email or name
          required: false
          schema:
            type: string
        - name: role
          in: query
          description: Filter by user role
          required: false
          schema:
            type: string
            enum: [USER, ADMIN, TEACHER, CREATOR]
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSummary'
        '403':
          description: Forbidden - admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}:
    get:
      tags:
        - User Management
      summary: Get user by ID
      description: Get user information by user ID (admin only)
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - User Management
      summary: Delete user
      description: Delete user account (admin only)
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}/status:
    put:
      tags:
        - User Management
      summary: Update user status
      description: Update user status (admin only)
      operationId: updateUserStatus
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserStatusRequest'
      responses:
        '200':
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token

  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]'
          example: "SecurePassword123!"
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          example: "John"
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          example: "Doe"
        phoneNumber:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          example: "+91-9876543210"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "SecurePassword123!"

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: "jwt_refresh_token"

    UpdateProfileRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          example: "John"
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          example: "Smith"
        phoneNumber:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          example: "+91-9876543210"

    UpdateUserStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [ACTIVE, INACTIVE, SUSPENDED, DELETED]
          example: "ACTIVE"
        reason:
          type: string
          example: "Account reactivated after verification"

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Authentication successful"
        token:
          type: string
          example: "jwt_access_token"
        refreshToken:
          type: string
          example: "jwt_refresh_token"
        expiresIn:
          type: integer
          example: 3600
        user:
          $ref: '#/components/schemas/UserSummary'

    TokenValidationResponse:
      type: object
      properties:
        valid:
          type: boolean
          example: true
        userId:
          type: string
          example: "user_123"
        email:
          type: string
          example: "user@example.com"
        role:
          type: string
          example: "USER"
        permissions:
          type: array
          items:
            type: string
          example: ["read:profile", "write:profile"]
        expiresAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    UserProfileResponse:
      type: object
      properties:
        id:
          type: string
          example: "user_123"
        email:
          type: string
          example: "user@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        phoneNumber:
          type: string
          example: "+91-9876543210"
        role:
          type: string
          enum: [USER, ADMIN, TEACHER, CREATOR]
          example: "USER"
        status:
          type: string
          enum: [ACTIVE, INACTIVE, SUSPENDED, DELETED]
          example: "ACTIVE"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        lastLoginAt:
          type: string
          format: date-time
          example: "2024-01-15T09:00:00Z"

    UserSummary:
      type: object
      properties:
        id:
          type: string
          example: "user_123"
        email:
          type: string
          example: "user@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        role:
          type: string
          example: "USER"
        status:
          type: string
          example: "ACTIVE"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        lastLoginAt:
          type: string
          format: date-time
          example: "2024-01-15T09:00:00Z"

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error description"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
          example:
            - field: "email"
              message: "Email is required"

tags:
  - name: Authentication
    description: User authentication and authorization operations
  - name: User Management
    description: User profile and administrative operations