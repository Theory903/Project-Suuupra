version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: payments-postgres
    environment:
      POSTGRES_DB: payments
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: payments-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: payments-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Accept jaeger.thrift directly from clients
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: payments-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: payments-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  # Payment Gateway Service
  payments:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: payments-service
    ports:
      - "8084:8084"
    environment:
      - SERVICE_NAME=payments
      - ENVIRONMENT=development
      - PORT=8084
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/payments?sslmode=disable
      - REDIS_URL=redis://redis:6379/0
      - UPI_CORE_GRPC=upi-core:50051
      - JWT_SECRET=dev-jwt-secret-key
      - HMAC_SIGNING_SECRET=dev-hmac-signing-secret
      - FIELD_ENCRYPTION_KEY=dev-32-character-encryption-key!!
      - WEBHOOK_SIGNING_SECRET=dev-webhook-signing-secret
      - LOG_LEVEL=info
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - METRICS_PORT=9090
      - MAX_RETRY_ATTEMPTS=3
      - IDEMPOTENCY_TTL_HOURS=24
      - WEBHOOK_TIMEOUT_SECONDS=30
      - MAX_WEBHOOK_RETRIES=5
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Mock UPI Core Service (for development)
  upi-core-mock:
    image: alpine:latest
    container_name: upi-core-mock
    ports:
      - "50051:50051"
    command: >
      sh -c "echo 'Mock UPI Core service running on port 50051' &&
             sleep infinity"

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: payments-network