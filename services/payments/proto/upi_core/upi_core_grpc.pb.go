// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/upi_core.proto

package upi_core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UpiCore_ProcessTransaction_FullMethodName   = "/upi.core.UpiCore/ProcessTransaction"
	UpiCore_GetTransactionStatus_FullMethodName = "/upi.core.UpiCore/GetTransactionStatus"
	UpiCore_CancelTransaction_FullMethodName    = "/upi.core.UpiCore/CancelTransaction"
	UpiCore_ReverseTransaction_FullMethodName   = "/upi.core.UpiCore/ReverseTransaction"
	UpiCore_ResolveVPA_FullMethodName           = "/upi.core.UpiCore/ResolveVPA"
	UpiCore_RegisterVPA_FullMethodName          = "/upi.core.UpiCore/RegisterVPA"
	UpiCore_UpdateVPA_FullMethodName            = "/upi.core.UpiCore/UpdateVPA"
	UpiCore_DeactivateVPA_FullMethodName        = "/upi.core.UpiCore/DeactivateVPA"
	UpiCore_HealthCheck_FullMethodName          = "/upi.core.UpiCore/HealthCheck"
	UpiCore_GetMetrics_FullMethodName           = "/upi.core.UpiCore/GetMetrics"
)

// UpiCoreClient is the client API for UpiCore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// UPI Core Service Definition
type UpiCoreClient interface {
	// Transaction Processing
	ProcessTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	GetTransactionStatus(ctx context.Context, in *TransactionStatusRequest, opts ...grpc.CallOption) (*TransactionStatusResponse, error)
	CancelTransaction(ctx context.Context, in *CancelTransactionRequest, opts ...grpc.CallOption) (*CancelTransactionResponse, error)
	ReverseTransaction(ctx context.Context, in *ReverseTransactionRequest, opts ...grpc.CallOption) (*ReverseTransactionResponse, error)
	// VPA Management
	ResolveVPA(ctx context.Context, in *ResolveVPARequest, opts ...grpc.CallOption) (*ResolveVPAResponse, error)
	RegisterVPA(ctx context.Context, in *RegisterVPARequest, opts ...grpc.CallOption) (*RegisterVPAResponse, error)
	UpdateVPA(ctx context.Context, in *UpdateVPARequest, opts ...grpc.CallOption) (*UpdateVPAResponse, error)
	DeactivateVPA(ctx context.Context, in *DeactivateVPARequest, opts ...grpc.CallOption) (*DeactivateVPAResponse, error)
	// Health and Monitoring
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
}

type upiCoreClient struct {
	cc grpc.ClientConnInterface
}

func NewUpiCoreClient(cc grpc.ClientConnInterface) UpiCoreClient {
	return &upiCoreClient{cc}
}

func (c *upiCoreClient) ProcessTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, UpiCore_ProcessTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiCoreClient) GetTransactionStatus(ctx context.Context, in *TransactionStatusRequest, opts ...grpc.CallOption) (*TransactionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionStatusResponse)
	err := c.cc.Invoke(ctx, UpiCore_GetTransactionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiCoreClient) CancelTransaction(ctx context.Context, in *CancelTransactionRequest, opts ...grpc.CallOption) (*CancelTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTransactionResponse)
	err := c.cc.Invoke(ctx, UpiCore_CancelTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiCoreClient) ReverseTransaction(ctx context.Context, in *ReverseTransactionRequest, opts ...grpc.CallOption) (*ReverseTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReverseTransactionResponse)
	err := c.cc.Invoke(ctx, UpiCore_ReverseTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiCoreClient) ResolveVPA(ctx context.Context, in *ResolveVPARequest, opts ...grpc.CallOption) (*ResolveVPAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveVPAResponse)
	err := c.cc.Invoke(ctx, UpiCore_ResolveVPA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiCoreClient) RegisterVPA(ctx context.Context, in *RegisterVPARequest, opts ...grpc.CallOption) (*RegisterVPAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterVPAResponse)
	err := c.cc.Invoke(ctx, UpiCore_RegisterVPA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiCoreClient) UpdateVPA(ctx context.Context, in *UpdateVPARequest, opts ...grpc.CallOption) (*UpdateVPAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVPAResponse)
	err := c.cc.Invoke(ctx, UpiCore_UpdateVPA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiCoreClient) DeactivateVPA(ctx context.Context, in *DeactivateVPARequest, opts ...grpc.CallOption) (*DeactivateVPAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeactivateVPAResponse)
	err := c.cc.Invoke(ctx, UpiCore_DeactivateVPA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiCoreClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, UpiCore_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upiCoreClient) GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, UpiCore_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpiCoreServer is the server API for UpiCore service.
// All implementations must embed UnimplementedUpiCoreServer
// for forward compatibility.
//
// UPI Core Service Definition
type UpiCoreServer interface {
	// Transaction Processing
	ProcessTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	GetTransactionStatus(context.Context, *TransactionStatusRequest) (*TransactionStatusResponse, error)
	CancelTransaction(context.Context, *CancelTransactionRequest) (*CancelTransactionResponse, error)
	ReverseTransaction(context.Context, *ReverseTransactionRequest) (*ReverseTransactionResponse, error)
	// VPA Management
	ResolveVPA(context.Context, *ResolveVPARequest) (*ResolveVPAResponse, error)
	RegisterVPA(context.Context, *RegisterVPARequest) (*RegisterVPAResponse, error)
	UpdateVPA(context.Context, *UpdateVPARequest) (*UpdateVPAResponse, error)
	DeactivateVPA(context.Context, *DeactivateVPARequest) (*DeactivateVPAResponse, error)
	// Health and Monitoring
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	GetMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error)
	mustEmbedUnimplementedUpiCoreServer()
}

// UnimplementedUpiCoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUpiCoreServer struct{}

func (UnimplementedUpiCoreServer) ProcessTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTransaction not implemented")
}
func (UnimplementedUpiCoreServer) GetTransactionStatus(context.Context, *TransactionStatusRequest) (*TransactionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionStatus not implemented")
}
func (UnimplementedUpiCoreServer) CancelTransaction(context.Context, *CancelTransactionRequest) (*CancelTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTransaction not implemented")
}
func (UnimplementedUpiCoreServer) ReverseTransaction(context.Context, *ReverseTransactionRequest) (*ReverseTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseTransaction not implemented")
}
func (UnimplementedUpiCoreServer) ResolveVPA(context.Context, *ResolveVPARequest) (*ResolveVPAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveVPA not implemented")
}
func (UnimplementedUpiCoreServer) RegisterVPA(context.Context, *RegisterVPARequest) (*RegisterVPAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterVPA not implemented")
}
func (UnimplementedUpiCoreServer) UpdateVPA(context.Context, *UpdateVPARequest) (*UpdateVPAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVPA not implemented")
}
func (UnimplementedUpiCoreServer) DeactivateVPA(context.Context, *DeactivateVPARequest) (*DeactivateVPAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateVPA not implemented")
}
func (UnimplementedUpiCoreServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedUpiCoreServer) GetMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedUpiCoreServer) mustEmbedUnimplementedUpiCoreServer() {}
func (UnimplementedUpiCoreServer) testEmbeddedByValue()                 {}

// UnsafeUpiCoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpiCoreServer will
// result in compilation errors.
type UnsafeUpiCoreServer interface {
	mustEmbedUnimplementedUpiCoreServer()
}

func RegisterUpiCoreServer(s grpc.ServiceRegistrar, srv UpiCoreServer) {
	// If the following call pancis, it indicates UnimplementedUpiCoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UpiCore_ServiceDesc, srv)
}

func _UpiCore_ProcessTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiCoreServer).ProcessTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpiCore_ProcessTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiCoreServer).ProcessTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpiCore_GetTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiCoreServer).GetTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpiCore_GetTransactionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiCoreServer).GetTransactionStatus(ctx, req.(*TransactionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpiCore_CancelTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiCoreServer).CancelTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpiCore_CancelTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiCoreServer).CancelTransaction(ctx, req.(*CancelTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpiCore_ReverseTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiCoreServer).ReverseTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpiCore_ReverseTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiCoreServer).ReverseTransaction(ctx, req.(*ReverseTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpiCore_ResolveVPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveVPARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiCoreServer).ResolveVPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpiCore_ResolveVPA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiCoreServer).ResolveVPA(ctx, req.(*ResolveVPARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpiCore_RegisterVPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterVPARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiCoreServer).RegisterVPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpiCore_RegisterVPA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiCoreServer).RegisterVPA(ctx, req.(*RegisterVPARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpiCore_UpdateVPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVPARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiCoreServer).UpdateVPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpiCore_UpdateVPA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiCoreServer).UpdateVPA(ctx, req.(*UpdateVPARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpiCore_DeactivateVPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateVPARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiCoreServer).DeactivateVPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpiCore_DeactivateVPA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiCoreServer).DeactivateVPA(ctx, req.(*DeactivateVPARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpiCore_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiCoreServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpiCore_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiCoreServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpiCore_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpiCoreServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpiCore_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpiCoreServer).GetMetrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpiCore_ServiceDesc is the grpc.ServiceDesc for UpiCore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpiCore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "upi.core.UpiCore",
	HandlerType: (*UpiCoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessTransaction",
			Handler:    _UpiCore_ProcessTransaction_Handler,
		},
		{
			MethodName: "GetTransactionStatus",
			Handler:    _UpiCore_GetTransactionStatus_Handler,
		},
		{
			MethodName: "CancelTransaction",
			Handler:    _UpiCore_CancelTransaction_Handler,
		},
		{
			MethodName: "ReverseTransaction",
			Handler:    _UpiCore_ReverseTransaction_Handler,
		},
		{
			MethodName: "ResolveVPA",
			Handler:    _UpiCore_ResolveVPA_Handler,
		},
		{
			MethodName: "RegisterVPA",
			Handler:    _UpiCore_RegisterVPA_Handler,
		},
		{
			MethodName: "UpdateVPA",
			Handler:    _UpiCore_UpdateVPA_Handler,
		},
		{
			MethodName: "DeactivateVPA",
			Handler:    _UpiCore_DeactivateVPA_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _UpiCore_HealthCheck_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _UpiCore_GetMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/upi_core.proto",
}
