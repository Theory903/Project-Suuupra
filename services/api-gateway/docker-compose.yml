version: '4'

services:
  # API Gateway Service - Production Ready
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-api-gateway
    restart: unless-stopped
    ports:
      - "8080:8080"   # Main API port (aligned with main compose)
      - "9080:9091"   # Metrics port (aligned with main compose)
    environment:
      # Core configuration (aligned with main docker-compose.yml)
      NODE_ENV: production
      PORT: 8080
      METRICS_PORT: 9091
      
      # Database connections (using main infrastructure)
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: ${POSTGRES_DB_GATEWAY:-gateway}
      
      # Redis configuration (using main infrastructure)
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # Kafka configuration (using main infrastructure)
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: api-gateway
      KAFKA_GROUP_ID: api-gateway-consumers
      
      # Security (using main infrastructure)
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN:-myroot}
      JWT_ISSUER: ${JWT_ISSUER:-https://auth.suuupra.com}
      JWT_AUDIENCE: ${JWT_AUDIENCE:-https://api.suuupra.com}
      JWKS_URI: http://jwks-server:3000/.well-known/jwks.json
      
      # Observability (using main infrastructure)
      OTEL_SERVICE_NAME: api-gateway
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
      # Rate limiting (aligned with main compose)
      RATE_LIMIT_WINDOW_MS: 60000
      RATE_LIMIT_MAX_REQUESTS: 1000
      RATE_LIMIT_REDIS_URL: redis://redis:6379
      
      # Circuit breaker settings (aligned with main compose)
      CIRCUIT_BREAKER_THRESHOLD: 5
      CIRCUIT_BREAKER_TIMEOUT: 30000
      CIRCUIT_BREAKER_RESET_TIMEOUT: 60000
      
      # Service URLs (aligned with main service ports)
      IDENTITY_SERVICE_URL: http://identity:8081
      CONTENT_SERVICE_URL: http://content:8089
      COMMERCE_SERVICE_URL: http://commerce:8083
      PAYMENTS_SERVICE_URL: http://payments:8082
      NOTIFICATIONS_SERVICE_URL: http://notifications:8085
      ANALYTICS_SERVICE_URL: http://analytics:8097
      MASS_LIVE_SERVICE_URL: http://mass-live:8092
      LIVE_TRACKING_SERVICE_URL: http://live-tracking:8099
      
      # Performance settings
      NODE_OPTIONS: "--max-old-space-size=1024 --enable-source-maps"
      UV_THREADPOOL_SIZE: 128
      
      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      CORS_METHODS: ${CORS_METHODS:-GET,POST,PUT,DELETE,OPTIONS}
      CORS_HEADERS: ${CORS_HEADERS:-Origin,X-Requested-With,Content-Type,Accept,Authorization}
    
    volumes:
      - app_logs:/app/logs
      - ./.env.local:/app/.env.local:ro
    
    # Use main infrastructure services (no separate dependencies)
    external_links:
      - postgres:postgres
      - redis:redis
      - kafka:kafka
      - vault:vault
      - otel-collector:otel-collector
    
    networks:
      - suuupra-network
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9091"  # Internal metrics port
      - "prometheus.path=/metrics"

# ===================================================================
# VOLUMES - Aligned with main infrastructure
# ===================================================================
volumes:
  app_logs:
    external: true
    name: suuupra_app_logs

# ===================================================================
# NETWORKS - Using main infrastructure network
# ===================================================================
networks:
  suuupra-network:
    external: true
    name: suuupra-network

# ===================================================================
# NOTES:
# - All infrastructure services (PostgreSQL, Redis, Kafka, Vault, 
#   Prometheus, Grafana, Jaeger) are provided by main infrastructure
# - Use: docker-compose -f ../docker-compose.infrastructure.yml up -d
# - Then: docker-compose -f docker-compose.yml up -d
# ===================================================================
