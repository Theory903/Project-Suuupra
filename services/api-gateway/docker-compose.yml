version: '3.8'

services:
  # API Gateway Service
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: api-gateway
    restart: unless-stopped
    ports:
      - "3001:3001"
      - "9090:9090"  # Metrics port
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      SERVICE_NAME: api-gateway
      
      # Authentication
      JWT_SECRET: ${JWT_SECRET:-change-me-in-production}
      JWT_EXPIRY: ${JWT_EXPIRY:-1h}
      JWKS_URI: ${JWKS_URI:-http://identity-service:8081/.well-known/jwks.json}
      
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-60000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      
      # Circuit Breaker
      CIRCUIT_BREAKER_TIMEOUT: ${CIRCUIT_BREAKER_TIMEOUT:-3000}
      CIRCUIT_BREAKER_THRESHOLD: ${CIRCUIT_BREAKER_THRESHOLD:-5}
      CIRCUIT_BREAKER_RESET_TIMEOUT: ${CIRCUIT_BREAKER_RESET_TIMEOUT:-30000}
      
      # Service Discovery
      SERVICE_DISCOVERY_TYPE: ${SERVICE_DISCOVERY_TYPE:-static}
      
      # Upstream Services
      IDENTITY_SERVICE_URL: http://identity-service:8081
      CONTENT_SERVICE_URL: http://content-service:8082
      COMMERCE_SERVICE_URL: http://commerce-service:8084
      NOTIFICATIONS_SERVICE_URL: http://notifications-service:8085
      ANALYTICS_SERVICE_URL: http://analytics-service:8087
      MASS_LIVE_SERVICE_URL: http://mass-live-service:8088
      LIVE_TRACKING_SERVICE_URL: http://live-tracking-service:8089
      
      # Redis for Rate Limiting and Caching
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Observability
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENABLE_REQUEST_LOGGING: ${ENABLE_REQUEST_LOGGING:-true}
      PROMETHEUS_METRICS_PORT: 9090
      JAEGER_ENDPOINT: ${JAEGER_ENDPOINT:-http://jaeger:14268}
      
      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      CORS_METHODS: ${CORS_METHODS:-GET,POST,PUT,DELETE,OPTIONS}
      CORS_HEADERS: ${CORS_HEADERS:-Origin,X-Requested-With,Content-Type,Accept,Authorization}
    
    depends_on:
      - redis
    
    networks:
      - api-gateway-network
      - suuupra-network
    
    volumes:
      - api-gateway-logs:/app/logs
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for Rate Limiting and Session Storage
  redis:
    image: redis:7-alpine
    container_name: api-gateway-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - api-gateway-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx for Load Balancing (optional for high availability)
  nginx:
    image: nginx:alpine
    container_name: api-gateway-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - api-gateway
    networks:
      - api-gateway-network
    profiles:
      - production

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: api-gateway-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - api-gateway-network
    profiles:
      - monitoring

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: api-gateway-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - api-gateway-network
    profiles:
      - monitoring

volumes:
  redis_data:
  api-gateway-logs:
  prometheus_data:

networks:
  api-gateway-network:
    driver: bridge
    name: api-gateway-network
  suuupra-network:
    external: true
    name: suuupra-network
