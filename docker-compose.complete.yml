version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: suuupra-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: suuupra
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_MULTIPLE_DATABASES: identity,commerce,payments,ledger,bank_simulator,upi_core,analytics,live_classes,recommendations,vod,llm_tutor,content,notifications,admin,creator_studio,counters,live_tracking,mass_live,search_crawler,upi_psp
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - suuupra-network

  redis:
    image: redis:7-alpine
    container_name: suuupra-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - suuupra-network

  # Message Queue
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: suuupra-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - suuupra-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: suuupra-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - suuupra-network

  # Search and Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: suuupra-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - suuupra-network

  # Object Storage
  minio:
    image: minio/minio:latest
    container_name: suuupra-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - suuupra-network

  # Vector Database
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: suuupra-etcd
    restart: unless-stopped
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - suuupra-network

  milvus:
    image: milvusdb/milvus:v2.3.2
    container_name: suuupra-milvus
    restart: unless-stopped
    ports:
      - "19530:19530"
    depends_on:
      - etcd
    environment:
      ETCD_ENDPOINTS: etcd:2379
    volumes:
      - milvus_data:/var/lib/milvus
    networks:
      - suuupra-network

  # Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: suuupra-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - suuupra-network

  grafana:
    image: grafana/grafana:10.2.0
    container_name: suuupra-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - suuupra-network

  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: suuupra-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - suuupra-network

  # Microservices - Core Services
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-api-gateway
    restart: unless-stopped
    ports:
      - "3001:3001"
      - "9091:9090"
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/suuupra
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:29092
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - suuupra-network

  identity-service:
    build:
      context: ./services/identity
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-identity
    restart: unless-stopped
    ports:
      - "8081:8081"
      - "9092:9090"
    environment:
      SPRING_PROFILES_ACTIVE: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/identity
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - suuupra-network

  content-service:
    build:
      context: ./services/content
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-content
    restart: unless-stopped
    ports:
      - "8082:8082"
      - "9093:9090"
    environment:
      NODE_ENV: production
      PORT: 8082
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/content
      MONGODB_URI: mongodb://mongo:27017/content
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - suuupra-network

  commerce-service:
    build:
      context: ./services/commerce
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-commerce
    restart: unless-stopped
    ports:
      - "8084:8084"
      - "9095:9090"
    environment:
      FLASK_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/commerce
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:29092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - suuupra-network

  # Analytics & AI Services
  analytics-service:
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-analytics
    restart: unless-stopped
    ports:
      - "8087:8087"
      - "9098:9090"
    environment:
      FLASK_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/analytics
      REDIS_URL: redis://redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    networks:
      - suuupra-network

  recommendations-service:
    build:
      context: ./services/recommendations
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-recommendations
    restart: unless-stopped
    ports:
      - "8095:8095"
      - "9105:9090"
    environment:
      FLASK_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/recommendations
      REDIS_URL: redis://redis:6379
      MILVUS_HOST: milvus
      MILVUS_PORT: 19530
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      milvus:
        condition: service_started
    networks:
      - suuupra-network

  # Financial Services
  payments-service:
    build:
      context: ./services/payments
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-payments
    restart: unless-stopped
    ports:
      - "8083:8083"
      - "9094:9090"
    environment:
      GO_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/payments
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:29092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - suuupra-network

  ledger-service:
    build:
      context: ./services/ledger
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-ledger
    restart: unless-stopped
    ports:
      - "8086:8086"
      - "9097:9090"
    environment:
      SPRING_PROFILES_ACTIVE: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/ledger
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - suuupra-network

  bank-simulator:
    build:
      context: ./services/bank-simulator
      dockerfile: Dockerfile
      target: runner
    container_name: suuupra-bank-simulator
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "50050:50050"
      - "9096:9090"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/bank_simulator
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - suuupra-network

  upi-core:
    build:
      context: ./services/upi-core
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-upi-core
    restart: unless-stopped
    ports:
      - "50051:50051"
      - "9099:9090"
    environment:
      GO_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/upi_core
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - suuupra-network

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  minio_data:
  milvus_data:
  prometheus_data:
  grafana_data:

networks:
  suuupra-network:
    driver: bridge
    name: suuupra-network
