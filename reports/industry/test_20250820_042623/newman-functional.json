{
  "collection": {
    "item": [
      {
        "id": "f2e72f87-2f87-4506-8c97-8c37ca52a859",
        "name": "üîê Authentication & Authorization",
        "description": {
          "content": "Identity service authentication flows, token management, and user operations",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "ea922a39-f94b-46a4-a443-d60be4ad33c7",
            "name": "Health Check",
            "request": {
              "url": {
                "path": [
                  "healthz"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2f2a82fd-379d-4e9e-bc40-9f9f45c2ba15",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('API Gateway is healthy', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.service).to.eql('api-gateway');",
                    "});"
                  ],
                  "_lastExecutionId": "0dd9479b-05ae-41ee-b25d-a8170fabd163"
                }
              }
            ]
          },
          {
            "id": "14c07034-398a-414e-8e58-3c25d74be91b",
            "name": "OIDC Discovery",
            "request": {
              "url": {
                "path": [
                  "identity",
                  ".well-known",
                  "openid-configuration"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "476a0030-671b-4862-8d60-eb773b447931",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('OIDC Discovery successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.issuer).to.exist;",
                    "    pm.expect(response.authorization_endpoint).to.exist;",
                    "    pm.expect(response.token_endpoint).to.exist;",
                    "    pm.expect(response.jwks_uri).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "4d941899-7b07-4223-a3ec-537b13bdc4b8"
                }
              }
            ]
          },
          {
            "id": "6abecb12-3e8c-4bf9-af1d-a90681562fa3",
            "name": "Get JWKS",
            "request": {
              "url": {
                "path": [
                  "identity",
                  "oauth2",
                  "jwks"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e8555b67-3ef4-4356-b8fe-079e532f5e43",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('JWKS endpoint accessible', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.keys).to.be.an('array');",
                    "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                    "});"
                  ],
                  "_lastExecutionId": "bd7e317f-257a-4df5-bcad-397136f96a9c"
                }
              }
            ]
          },
          {
            "id": "657220a1-af25-4d1c-9d76-ba322e46bb3c",
            "name": "Register User",
            "request": {
              "url": {
                "path": [
                  "identity",
                  "api",
                  "{{api_version}}",
                  "auth",
                  "register"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "X-Correlation-ID",
                  "value": "{{correlationId}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4b1c3aaa-011f-4e4d-95f0-2e6f12889433",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('User registration successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.user).to.exist;",
                    "    pm.expect(response.user.id).to.exist;",
                    "    pm.environment.set('test_user_id', response.user.id);",
                    "    pm.environment.set('test_user_email', response.user.email);",
                    "});"
                  ],
                  "_lastExecutionId": "e8e9b82c-9b55-4fcd-83e1-7237acaf6ee1"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "2935ced7-c693-4cbd-ba88-4d5cf69ccd06",
                  "type": "text/javascript",
                  "exec": [
                    "// Generate unique test user email",
                    "const timestamp = Date.now();",
                    "const email = `test-${timestamp}@suuupra.com`;",
                    "pm.environment.set('test_email', email);"
                  ],
                  "_lastExecutionId": "6f57ef27-5e8e-4948-b358-7a110f731ab3"
                }
              }
            ]
          },
          {
            "id": "c4637b43-02c6-40af-9367-787aaae65e5a",
            "name": "Login User",
            "request": {
              "url": {
                "path": [
                  "identity",
                  "api",
                  "{{api_version}}",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f71cbffb-bec8-4f00-aa34-bf3083b6c9e3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Login successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.accessToken).to.exist;",
                    "    pm.expect(response.refreshToken).to.exist;",
                    "    ",
                    "    // Store tokens",
                    "    pm.environment.set('access_token', response.accessToken);",
                    "    pm.environment.set('refresh_token', response.refreshToken);",
                    "    ",
                    "    // Calculate token expiry",
                    "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                    "    pm.environment.set('token_expiry', expiryTime.toString());",
                    "});"
                  ],
                  "_lastExecutionId": "11689f4a-9b09-4dc7-9658-1d60a7da7bc4"
                }
              }
            ]
          },
          {
            "id": "ff99034c-8486-4046-8f11-664ab20f4576",
            "name": "Get Current User Profile",
            "request": {
              "url": {
                "path": [
                  "identity",
                  "api",
                  "{{api_version}}",
                  "users",
                  "me"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "be28e320-b8a8-4a68-b143-71e15c4265c0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('User profile retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.id).to.exist;",
                    "    pm.expect(response.email).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "ebef90b7-abf7-4bc2-9546-d503b1f81311"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b402ef8f-3a24-4ad7-919a-ad195b6e3039",
        "name": "üí≥ Payment Gateway",
        "description": {
          "content": "Payment processing, UPI transactions, and financial operations",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "a0d134f1-52b9-4c92-81f2-0bb0d6328bca",
            "name": "Payment Gateway Health",
            "request": {
              "url": {
                "path": [
                  "payments",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "929b16bc-895a-433e-baba-554e0226b023",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Payment Gateway is healthy', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "25d8b256-4bf2-4777-b3e3-6a41885f7400"
                }
              }
            ]
          },
          {
            "id": "2b4861b0-9ea5-4c7b-b699-04238e9f662f",
            "name": "Create Payment Intent",
            "request": {
              "url": {
                "path": [
                  "payments",
                  "api",
                  "{{api_version}}",
                  "intents"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                },
                {
                  "key": "Idempotency-Key",
                  "value": "idem-{{$randomUUID}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ec805c6d-05fc-4184-a75c-5c8244e62baa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Payment intent created', function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.id).to.exist;",
                    "    pm.expect(response.clientSecret).to.exist;",
                    "    pm.environment.set('payment_intent_id', response.id);",
                    "});"
                  ],
                  "_lastExecutionId": "fa719742-d444-45dd-bb14-05b4ce7ce8f1"
                }
              }
            ]
          },
          {
            "id": "fb0601d1-1ef6-4883-b29d-3eb83c1a5977",
            "name": "Get Payment Intent",
            "request": {
              "url": {
                "path": [
                  "payments",
                  "api",
                  "{{api_version}}",
                  "intents",
                  "{{payment_intent_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "aed2bbc1-09e4-4ec6-9533-dc7f4f5cd4bc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Payment intent retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                    "});"
                  ],
                  "_lastExecutionId": "179286cd-7822-46ad-a942-0f99b5b7d878"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f5d1d402-fda2-41d6-84cd-dac292ade112",
        "name": "üè™ Commerce & Orders",
        "description": {
          "content": "E-commerce operations, shopping cart, and order management",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "3438d459-8d08-4152-b23e-c859030a6fb7",
            "name": "Commerce Health",
            "request": {
              "url": {
                "path": [
                  "commerce",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "18a03f7e-3ae4-4cc7-99b2-c61059638b34",
            "name": "Create Shopping Cart",
            "request": {
              "url": {
                "path": [
                  "commerce",
                  "api",
                  "{{api_version}}",
                  "cart"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a0e4d3ae-a5b9-45e0-8119-3c1134074232",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Shopping cart created', function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.id).to.exist;",
                    "    pm.expect(response.items).to.be.an('array');",
                    "    pm.environment.set('cart_id', response.id);",
                    "});"
                  ],
                  "_lastExecutionId": "09c91849-a7fb-490f-a713-848a05f07dfc"
                }
              }
            ]
          },
          {
            "id": "8f06d186-a755-4905-b1c3-f37874daea9b",
            "name": "Create Order",
            "request": {
              "url": {
                "path": [
                  "commerce",
                  "api",
                  "{{api_version}}",
                  "orders"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "088836b4-0963-4afb-b042-b3346e4150f7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Order created successfully', function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.id).to.exist;",
                    "    pm.expect(response.status).to.exist;",
                    "    pm.environment.set('order_id', response.id);",
                    "});"
                  ],
                  "_lastExecutionId": "1117c638-e5f6-4999-a515-5f6085132894"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c72f265f-fc5c-4912-9470-d993516f45fd",
        "name": "üìö Content Management",
        "description": {
          "content": "Content creation, file uploads, and content workflow management",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "d7e676d1-d876-49aa-a50e-f5410767dac7",
            "name": "Content Service Health",
            "request": {
              "url": {
                "path": [
                  "content",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "000e8517-e2c8-4a27-b7a9-ebb985e7fab0",
            "name": "Create Content",
            "request": {
              "url": {
                "path": [
                  "content",
                  "api",
                  "{{api_version}}",
                  "content"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "03166ed0-5878-4a81-a798-e0f27f2577e3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Content created successfully', function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.id).to.exist;",
                    "    pm.expect(response.title).to.exist;",
                    "    pm.environment.set('content_id', response.id);",
                    "});"
                  ],
                  "_lastExecutionId": "1e56c3aa-eb1f-4483-af4e-8260666840db"
                }
              }
            ]
          },
          {
            "id": "2ff646da-2d56-4dfe-9f4d-8c5cc74950c4",
            "name": "Search Content",
            "request": {
              "url": {
                "path": [
                  "content",
                  "api",
                  "{{api_version}}",
                  "search"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "q",
                    "value": "machine learning"
                  },
                  {
                    "key": "limit",
                    "value": "10"
                  },
                  {
                    "key": "contentType",
                    "value": "article"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1f2b8a46-5123-47c4-8c14-a16ff9e20d60",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Content search successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.results).to.be.an('array');",
                    "    pm.expect(response.total).to.be.a('number');",
                    "});"
                  ],
                  "_lastExecutionId": "5c3ff784-32ab-4894-b99a-2bd5298905d1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b51a3f1c-b53a-4d40-a8ea-c08625cc0390",
        "name": "üè¶ Banking Simulation",
        "description": {
          "content": "Bank simulator for testing financial operations and UPI transactions",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "41cca3d7-8664-41fe-a37a-ce9bd35cc394",
            "name": "Bank Simulator Health",
            "request": {
              "url": {
                "path": [
                  "bank-simulator",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "9b2fbe89-feb0-4d9c-aebf-4b3bebdd8d2a",
            "name": "List Banks",
            "request": {
              "url": {
                "path": [
                  "bank-simulator",
                  "api",
                  "banks"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "22a36c7d-167e-4169-9f7c-86385617dce1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Banks list retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('array');",
                    "    pm.expect(response.length).to.be.greaterThan(0);",
                    "    ",
                    "    // Store first bank for testing",
                    "    if (response.length > 0) {",
                    "        pm.environment.set('test_bank_code', response[0].code);",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "d9d3b69e-33a4-489f-9c58-8b7e9c32fec7"
                }
              }
            ]
          },
          {
            "id": "51719d25-3c1d-4cce-b4fb-3b5b7ceb0686",
            "name": "Process Bank Transaction",
            "request": {
              "url": {
                "path": [
                  "bank-simulator",
                  "api",
                  "real-transactions",
                  "process"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "974a8bbd-345d-41b9-8ca3-cce249208801",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Bank transaction processed', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.success).to.be.true;",
                    "    pm.expect(response.transactionId).to.exist;",
                    "    pm.expect(response.bankReferenceId).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "c0b9f512-bb48-4512-b87e-db9ddfdebd02"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5941cb1c-382d-4b74-9b9b-fa2f0b49624a",
        "name": "üîÑ UPI Core",
        "description": {
          "content": "UPI transaction processing and VPA management",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "11b98eef-35b6-4983-bc0e-292698adeac0",
            "name": "UPI Core Health",
            "request": {
              "url": {
                "path": [
                  "upi-core",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "9ef4d426-da88-475f-806f-6f61a51a58f5",
            "name": "Process UPI Transaction",
            "request": {
              "url": {
                "path": [
                  "upi-core",
                  "upi",
                  "transactions"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"transactionId\": \"UPI{{$randomInt}}\",\n  \"payerVpa\": \"test@paytm\",\n  \"payeeVpa\": \"merchant@phonepe\",\n  \"amountPaisa\": 50000,\n  \"type\": \"P2M\",\n  \"reference\": \"Test UPI payment\",\n  \"payerBankCode\": \"HDFC\",\n  \"payeeBankCode\": \"ICICI\",\n  \"digitalSignature\": \"SHA256:test-signature\",\n  \"initiatedAt\": \"{{$isoTimestamp}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "67483a5d-0a54-4c82-8576-07748fb3c8d7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('UPI transaction processed', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.transactionId).to.exist;",
                    "    pm.expect(response.rrn).to.exist;",
                    "    pm.expect(response.status).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "b7990fd6-1b31-46ae-9cb6-7f355c2ce69c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2ec201d8-f9a8-431f-ac46-7f14e8e8ac36",
        "name": "üìä Analytics & Tracking",
        "description": {
          "content": "Analytics data collection and reporting",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "18ce1d08-463f-4cc8-a5d6-8efd5c6cd121",
            "name": "Analytics Health",
            "request": {
              "url": {
                "path": [
                  "analytics",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "43661cf3-e89b-4e6d-828a-b1400f934495",
            "name": "Track Event",
            "request": {
              "url": {
                "path": [
                  "analytics",
                  "api",
                  "{{api_version}}",
                  "track"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"event\": \"api_test_event\",\n  \"userId\": \"{{test_user_id}}\",\n  \"properties\": {\n    \"source\": \"postman\",\n    \"testId\": \"{{correlationId}}\",\n    \"timestamp\": \"{{$isoTimestamp}}\",\n    \"userAgent\": \"Postman/API-Test\"\n  },\n  \"context\": {\n    \"ip\": \"127.0.0.1\",\n    \"userAgent\": \"Postman API Testing Suite\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "80e037c1-5770-43c5-8378-a6ba07e8aabd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Event tracked successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "314b991e-f720-40b5-8d8b-20336b1fb852"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a0ba2560-b850-4fda-952b-3b3c4c8c549d",
        "name": "üîî Notifications",
        "description": {
          "content": "Notification service for email, SMS, and push notifications",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "c9882a62-216c-418e-9503-ce15b29b77bf",
            "name": "Notifications Health",
            "request": {
              "url": {
                "path": [
                  "notifications",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "ac3f0d0d-16bf-4e17-b094-a37118e53bd7",
            "name": "Send Email Notification",
            "request": {
              "url": {
                "path": [
                  "notifications",
                  "api",
                  "{{api_version}}",
                  "send"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"type\": \"email\",\n  \"recipient\": \"{{test_user_email}}\",\n  \"template\": \"test_notification\",\n  \"subject\": \"API Test Notification\",\n  \"data\": {\n    \"userName\": \"Test User\",\n    \"message\": \"This is a test notification from Postman API testing\",\n    \"testId\": \"{{correlationId}}\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9bf32bfa-59a3-43fe-abbc-98036a45b4bc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Email notification sent', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.success).to.be.true;",
                    "});"
                  ],
                  "_lastExecutionId": "9e60ace4-555e-4741-8686-76057d500581"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8860ff0e-274f-4b2b-b1a6-ed3fd73e4ccc",
        "name": "üéì Live Classes",
        "description": {
          "content": "Live streaming and class management",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "a93015ab-7321-4b1c-a442-5a2ddcb48a8e",
            "name": "Live Classes Health",
            "request": {
              "url": {
                "path": [
                  "live-classes",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "0e0dc8f6-78ea-4c72-b921-f9c1d9f66844",
            "name": "Create Live Session",
            "request": {
              "url": {
                "path": [
                  "live-classes",
                  "api",
                  "{{api_version}}",
                  "sessions"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"title\": \"Test Live Session\",\n  \"description\": \"API testing live session\",\n  \"scheduledAt\": \"{{$isoTimestamp}}\",\n  \"duration\": 3600,\n  \"maxParticipants\": 100,\n  \"isRecorded\": true,\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5f62a457-4ba1-4be4-878f-5e9f929f831e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Live session created', function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.id).to.exist;",
                    "    pm.expect(response.streamUrl).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "5a02c27f-7d21-4f2a-a5be-53f9365cf539"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bbd2a212-cdb8-4239-b500-e4631d5f207f",
        "name": "ü§ñ LLM Tutor",
        "description": {
          "content": "AI-powered tutoring and educational assistance",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "158820ae-0a38-4c81-b862-82e7549b7e0e",
            "name": "LLM Tutor Health",
            "request": {
              "url": {
                "path": [
                  "llm-tutor",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "b61a077b-99b0-4fb5-92db-f6033253826c",
            "name": "Ask Question to Tutor",
            "request": {
              "url": {
                "path": [
                  "llm-tutor",
                  "api",
                  "{{api_version}}",
                  "ask"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"question\": \"Explain the concept of machine learning in simple terms\",\n  \"context\": {\n    \"subject\": \"computer-science\",\n    \"level\": \"beginner\",\n    \"userId\": \"{{test_user_id}}\"\n  },\n  \"preferences\": {\n    \"responseLength\": \"medium\",\n    \"includeExamples\": true\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4f8c7979-0925-42cc-9ff1-e3ff58abadff",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Tutor response received', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.answer).to.exist;",
                    "    pm.expect(response.confidence).to.be.a('number');",
                    "});"
                  ],
                  "_lastExecutionId": "d05e71c6-1c4b-43b3-9d78-2a86c61b1d4a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "57e3dfa7-306a-47e0-9e45-c7a5dd088407",
        "name": "üìà Recommendations",
        "description": {
          "content": "AI-powered content and course recommendations",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "d914fa24-7ab6-4d52-9ac1-25b02cee2e2f",
            "name": "Recommendations Health",
            "request": {
              "url": {
                "path": [
                  "recommendations",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "4b268a95-0c88-48ba-bec7-d6f075ca6a76",
            "name": "Get User Recommendations",
            "request": {
              "url": {
                "path": [
                  "recommendations",
                  "api",
                  "{{api_version}}",
                  "users",
                  "{{test_user_id}}",
                  "recommendations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "type",
                    "value": "courses"
                  },
                  {
                    "key": "limit",
                    "value": "10"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b12c8011-b38b-4899-b858-3187e4541f2f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Recommendations retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.recommendations).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "09e3a814-9bd5-4409-b5b5-fe001f9284cb"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "487eb6b0-e81a-48e7-b41c-39c1913f5bf9",
        "name": "üîß Admin Operations",
        "description": {
          "content": "Administrative operations and system management",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "c4a6dba2-b93c-4456-9dc2-c5b9e6374e22",
            "name": "Admin Dashboard Health",
            "request": {
              "url": {
                "path": [
                  "admin",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "5c535f00-20ae-42c2-a34e-9eaeb3c899c8",
            "name": "Get System Status",
            "request": {
              "url": {
                "path": [
                  "admin",
                  "api",
                  "{{api_version}}",
                  "system",
                  "status"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d3e41b1c-4e51-4dcd-9494-e3cbc4498408",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('System status retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.services).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "1f0ae9e3-6c7a-44f4-8ba3-f453274ae389"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "auth": {
      "type": "bearer",
      "bearer": [
        {
          "type": "string",
          "value": "{{access_token}}",
          "key": "token"
        }
      ]
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "5df10337-22c1-42bd-ba7b-c62748e5650a",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "console.log('üöÄ Executing request:', pm.info.requestName);",
            "console.log('üìç Environment:', pm.environment.name);",
            "",
            "// Set correlation ID for tracing",
            "pm.globals.set('correlationId', 'test-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9));",
            "",
            "// Auto-refresh token if expired",
            "const tokenExpiry = pm.environment.get('token_expiry');",
            "if (tokenExpiry && Date.now() > parseInt(tokenExpiry)) {",
            "    console.log('üîÑ Token expired, refreshing...');",
            "    // Token refresh logic will be handled in auth requests",
            "}"
          ],
          "_lastExecutionId": "3a7d73e0-9399-4889-99f9-9195bac826c2"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "42b05986-bd70-4b93-8f66-d65852c0a1ce",
          "type": "text/javascript",
          "exec": [
            "// Global test script",
            "const responseTime = pm.response.responseTime;",
            "const statusCode = pm.response.code;",
            "",
            "console.log('‚úÖ Response received:', statusCode, 'in', responseTime + 'ms');",
            "",
            "// Performance assertions",
            "pm.test('Response time is acceptable', function () {",
            "    pm.expect(responseTime).to.be.below(5000); // 5 seconds max",
            "});",
            "",
            "// Security headers check",
            "pm.test('Security headers present', function () {",
            "    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.exist;",
            "    pm.expect(pm.response.headers.get('X-Frame-Options')).to.exist;",
            "});",
            "",
            "// Error handling",
            "if (statusCode >= 400) {",
            "    console.log('‚ùå Error response:', pm.response.text());",
            "}"
          ],
          "_lastExecutionId": "267b8111-9b0e-441c-a5ee-cbdd7d1ecf66"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "{{gateway_url}}",
        "key": "base_url"
      },
      {
        "type": "string",
        "value": "v1",
        "key": "api_version"
      }
    ],
    "info": {
      "_postman_id": "312397ba-2d28-437c-ba5e-07345adf408e",
      "name": "Suuupra EdTech Platform - Complete API Testing Suite",
      "version": {
        "raw": "2.0.0",
        "major": 2,
        "minor": 0,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "2.0.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive production-level API testing for all 20+ microservices in the Suuupra EdTech Platform. This collection tests every endpoint through the API Gateway with full authentication, validation, and error handling.",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment"
    },
    "id": "local-dev-env",
    "name": "Local Development",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:8080",
        "key": "gateway_url"
      },
      {
        "type": "any",
        "value": "v1",
        "key": "api_version"
      },
      {
        "type": "any",
        "value": "development",
        "key": "environment"
      },
      {
        "type": "any",
        "value": "",
        "key": "access_token"
      },
      {
        "type": "any",
        "value": "",
        "key": "refresh_token"
      },
      {
        "type": "any",
        "value": "",
        "key": "token_expiry"
      },
      {
        "type": "any",
        "value": "",
        "key": "test_user_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "test_user_email"
      },
      {
        "type": "any",
        "value": "",
        "key": "cart_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "order_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "payment_intent_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "content_id"
      },
      {
        "type": "any",
        "value": "HDFC",
        "key": "test_bank_code"
      },
      {
        "type": "any",
        "value": "",
        "key": "correlationId"
      },
      {
        "type": "any",
        "value": "test-1755644184776@suuupra.com",
        "key": "test_email"
      }
    ]
  },
  "globals": {
    "id": "cd47ec29-162b-463e-ab0c-9c03c5157af9",
    "values": [
      {
        "type": "any",
        "value": "test-1755644185555-9dlgxqb5c",
        "key": "correlationId"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 32,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 87,
        "pending": 0,
        "failed": 32
      },
      "prerequests": {
        "total": 32,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 32,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 32,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 22,
        "pending": 0,
        "failed": 19
      },
      "testScripts": {
        "total": 54,
        "pending": 0,
        "failed": 32
      },
      "prerequestScripts": {
        "total": 33,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 6.03125,
      "responseMin": 1,
      "responseMax": 39,
      "responseSd": 7.329240986452826,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1755644184684,
      "completed": 1755644185566
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 32,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "eff6c1f5-1ed2-43ae-9b6d-2129c50fee36",
          "httpRequestId": "2c207226-0eda-4f74-90a2-39c280571f6e"
        },
        "item": {
          "id": "ea922a39-f94b-46a4-a443-d60be4ad33c7",
          "name": "Health Check",
          "request": {
            "url": {
              "path": [
                "healthz"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2f2a82fd-379d-4e9e-bc40-9f9f45c2ba15",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API Gateway is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.service).to.eql('api-gateway');",
                  "});"
                ],
                "_lastExecutionId": "0dd9479b-05ae-41ee-b25d-a8170fabd163"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "healthz"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3d54da1f-a8fd-4f68-8f47-4397c79e70fd",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "38164ba9-5b1a-467c-8424-fefca8474428",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:24 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              52,
              46,
              55,
              48,
              57,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              122,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 19,
          "responseSize": 150
        },
        "id": "ea922a39-f94b-46a4-a443-d60be4ad33c7",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "ccd07933-3fa7-4355-bfe3-fd4fe70f8d54",
              "timestamp": 1755644184723,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "API Gateway is healthy",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1901b3b7-980f-45db-8813-5e3f9bc47046",
          "length": 32,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b6175552-7606-4c1d-b333-188258d834d5"
        },
        "item": {
          "id": "14c07034-398a-414e-8e58-3c25d74be91b",
          "name": "OIDC Discovery",
          "request": {
            "url": {
              "path": [
                "identity",
                ".well-known",
                "openid-configuration"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "476a0030-671b-4862-8d60-eb773b447931",
                "type": "text/javascript",
                "exec": [
                  "pm.test('OIDC Discovery successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.issuer).to.exist;",
                  "    pm.expect(response.authorization_endpoint).to.exist;",
                  "    pm.expect(response.token_endpoint).to.exist;",
                  "    pm.expect(response.jwks_uri).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "4d941899-7b07-4223-a3ec-537b13bdc4b8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "identity",
              ".well-known",
              "openid-configuration"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "66c0a673-9cd3-4834-8bee-e19c0ab2c4c9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "91709437-51ed-4d6e-b1cb-322cbb80563e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:24 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              52,
              46,
              55,
              51,
              57,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              47,
              46,
              119,
              101,
              108,
              108,
              45,
              107,
              110,
              111,
              119,
              110,
              47,
              111,
              112,
              101,
              110,
              105,
              100,
              45,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 184
        },
        "id": "14c07034-398a-414e-8e58-3c25d74be91b",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "77c9623b-c043-4d17-a898-1be48aabcad5",
              "timestamp": 1755644184746,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "OIDC Discovery successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "OIDC Discovery successful",
              "message": "expected undefined to exist",
              "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "11b16e88-3fb8-4279-917c-6b85ebf2619f",
          "length": 32,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cc3f81bb-dc7f-42ee-8b4b-dc2026985321"
        },
        "item": {
          "id": "6abecb12-3e8c-4bf9-af1d-a90681562fa3",
          "name": "Get JWKS",
          "request": {
            "url": {
              "path": [
                "identity",
                "oauth2",
                "jwks"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8555b67-3ef4-4356-b8fe-079e532f5e43",
                "type": "text/javascript",
                "exec": [
                  "pm.test('JWKS endpoint accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.keys).to.be.an('array');",
                  "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "bd7e317f-257a-4df5-bcad-397136f96a9c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "identity",
              "oauth2",
              "jwks"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ed80c92f-f456-43c9-90df-287ebc76c1e6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "feb887bb-7371-4b39-b75f-6dad768c2f6e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:24 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              52,
              46,
              55,
              53,
              57,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              47,
              111,
              97,
              117,
              116,
              104,
              50,
              47,
              106,
              119,
              107,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 163
        },
        "id": "6abecb12-3e8c-4bf9-af1d-a90681562fa3",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "7505e1c8-9f10-463c-b80d-dd6cc4e4ab36",
              "timestamp": 1755644184765,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "JWKS endpoint accessible",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "JWKS endpoint accessible",
              "message": "expected undefined to be an array",
              "stack": "AssertionError: expected undefined to be an array\n   at Object.eval sandbox-script.js:1:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "78556290-ae85-46c5-85d9-8b11b17731aa",
          "length": 32,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "22051247-5552-4c0f-a71b-d64f1b330d5f"
        },
        "item": {
          "id": "657220a1-af25-4d1c-9d76-ba322e46bb3c",
          "name": "Register User",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Correlation-ID",
                "value": "{{correlationId}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4b1c3aaa-011f-4e4d-95f0-2e6f12889433",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user).to.exist;",
                  "    pm.expect(response.user.id).to.exist;",
                  "    pm.environment.set('test_user_id', response.user.id);",
                  "    pm.environment.set('test_user_email', response.user.email);",
                  "});"
                ],
                "_lastExecutionId": "e8e9b82c-9b55-4fcd-83e1-7237acaf6ee1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2935ced7-c693-4cbd-ba88-4d5cf69ccd06",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique test user email",
                  "const timestamp = Date.now();",
                  "const email = `test-${timestamp}@suuupra.com`;",
                  "pm.environment.set('test_email', email);"
                ],
                "_lastExecutionId": "6f57ef27-5e8e-4948-b358-7a110f731ab3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "identity",
              "api",
              "v1",
              "auth",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Correlation-ID",
              "value": ""
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "65229d07-8dad-48d9-b655-a19cd7c579c0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "139",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"test-391@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6ac5e6da-7d6f-4e6b-ac89-928959bc5615",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:24 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              52,
              46,
              55,
              55,
              57,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              117,
              116,
              104,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 173
        },
        "id": "657220a1-af25-4d1c-9d76-ba322e46bb3c",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "e0a5b0fb-3b8d-4b9b-a389-7fedaea838b5",
              "timestamp": 1755644184786,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "User registration successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "User registration successful",
              "message": "expected response to have status code 201 but got 200",
              "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "4dc279c9-054e-427c-9fbc-323a932451d2",
          "length": 32,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f8079d5b-11b5-4633-b2ce-be28ba21a91f"
        },
        "item": {
          "id": "c4637b43-02c6-40af-9367-787aaae65e5a",
          "name": "Login User",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f71cbffb-bec8-4f00-aa34-bf3083b6c9e3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.accessToken).to.exist;",
                  "    pm.expect(response.refreshToken).to.exist;",
                  "    ",
                  "    // Store tokens",
                  "    pm.environment.set('access_token', response.accessToken);",
                  "    pm.environment.set('refresh_token', response.refreshToken);",
                  "    ",
                  "    // Calculate token expiry",
                  "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                  "    pm.environment.set('token_expiry', expiryTime.toString());",
                  "});"
                ],
                "_lastExecutionId": "11689f4a-9b09-4dc7-9658-1d60a7da7bc4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "identity",
              "api",
              "v1",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d0be87a8-0b39-4d31-b968-71d41ec3f536",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "51",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"\",\n  \"password\": \"TestPassword123!\"\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "79dde248-a6ad-4b50-8241-8fdf8de07944",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:24 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              52,
              46,
              56,
              48,
              50,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              117,
              116,
              104,
              47,
              108,
              111,
              103,
              105,
              110,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 170
        },
        "id": "c4637b43-02c6-40af-9367-787aaae65e5a",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "46f850d8-4ba7-4ad4-ab58-02eed6b222a6",
              "timestamp": 1755644184818,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Login successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Login successful",
              "message": "expected undefined to exist",
              "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "fe798e0f-2471-4c37-9501-f384b8c29591",
          "length": 32,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "92b299a6-4078-4152-8f92-f4291ac1a66e"
        },
        "item": {
          "id": "ff99034c-8486-4046-8f11-664ab20f4576",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "users",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "be28e320-b8a8-4a68-b143-71e15c4265c0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User profile retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.email).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "ebef90b7-abf7-4bc2-9546-d503b1f81311"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "identity",
              "api",
              "v1",
              "users",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "68768c0c-2fa7-48c0-b98a-389950be65ee",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "785db4c1-1766-4e61-a877-e710e7673ddf",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:24 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              52,
              46,
              56,
              52,
              48,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              109,
              101,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 167
        },
        "id": "ff99034c-8486-4046-8f11-664ab20f4576",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "4d40420c-54c7-4aad-be68-0718442037ce",
              "timestamp": 1755644184851,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "User profile retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "User profile retrieved",
              "message": "expected undefined to exist",
              "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5ee0dca3-3fa3-4d4c-b150-73379ae3bbdd",
          "length": 32,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e82e6cad-be46-49e1-b15c-5c88e4f31408"
        },
        "item": {
          "id": "a0d134f1-52b9-4c92-81f2-0bb0d6328bca",
          "name": "Payment Gateway Health",
          "request": {
            "url": {
              "path": [
                "payments",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "929b16bc-895a-433e-baba-554e0226b023",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment Gateway is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "25d8b256-4bf2-4777-b3e3-6a41885f7400"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "payments",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0a5f0e62-fab6-4a3c-b6f8-7c45ba9237c2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "22b5a87a-58c6-4b7e-b83e-d3133b2fa840",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:24 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              52,
              46,
              56,
              55,
              49,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              112,
              97,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 158
        },
        "id": "a0d134f1-52b9-4c92-81f2-0bb0d6328bca",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "9ab821ad-6e22-4301-a97c-f3dfa2fae880",
              "timestamp": 1755644184878,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Payment Gateway is healthy",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "48e4d620-3be7-4d9b-8b96-c9fdb4f96b50",
          "length": 32,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "74a04f6f-6fb4-4c16-ae13-8813a9dc6576"
        },
        "item": {
          "id": "2b4861b0-9ea5-4c7b-b699-04238e9f662f",
          "name": "Create Payment Intent",
          "request": {
            "url": {
              "path": [
                "payments",
                "api",
                "{{api_version}}",
                "intents"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Idempotency-Key",
                "value": "idem-{{$randomUUID}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ec805c6d-05fc-4184-a75c-5c8244e62baa",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment intent created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.clientSecret).to.exist;",
                  "    pm.environment.set('payment_intent_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "fa719742-d444-45dd-bb14-05b4ce7ce8f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "payments",
              "api",
              "v1",
              "intents"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Idempotency-Key",
              "value": "idem-a54df713-5cf0-44f6-a960-641ff3ee05db"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2edaad93-4fd4-43b2-aa94-0848167cf158",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "359",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"\",\n    \"source\": \"postman\"\n  }\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "8a2b3a80-713a-4679-862a-445c257ac31e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:24 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              52,
              46,
              57,
              48,
              49,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              112,
              97,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 167
        },
        "id": "2b4861b0-9ea5-4c7b-b699-04238e9f662f",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "5a022207-6b53-4a04-bf94-95a6e4a9ec1e",
              "timestamp": 1755644184915,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Payment intent created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Payment intent created",
              "message": "expected response to have status code 201 but got 200",
              "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8c26eb2d-24d7-49cf-8d16-05dfa7d844b9",
          "length": 32,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ff1b53fd-881f-4760-98ae-bb2cb5fdced5"
        },
        "item": {
          "id": "fb0601d1-1ef6-4883-b29d-3eb83c1a5977",
          "name": "Get Payment Intent",
          "request": {
            "url": {
              "path": [
                "payments",
                "api",
                "{{api_version}}",
                "intents",
                "{{payment_intent_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aed2bbc1-09e4-4ec6-9533-dc7f4f5cd4bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment intent retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                  "});"
                ],
                "_lastExecutionId": "179286cd-7822-46ad-a942-0f99b5b7d878"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "payments",
              "api",
              "v1",
              "intents",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d9f3c0e4-8a85-4067-9b1c-651f88def9a0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c3304d1d-5eb6-470a-bd85-6f27e562d694",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:24 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              52,
              46,
              57,
              52,
              55,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              112,
              97,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              47,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 16,
          "responseSize": 167
        },
        "id": "fb0601d1-1ef6-4883-b29d-3eb83c1a5977",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "a9e32884-96ef-4830-865c-a30d651a4ae9",
              "timestamp": 1755644184979,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Payment intent retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Payment intent retrieved",
              "message": "expected undefined to deeply equal ''",
              "stack": "AssertionError: expected undefined to deeply equal ''\n   at Object.eval sandbox-script.js:1:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e20bf466-a952-4b72-9d96-e08fce56c984",
          "length": 32,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8285f554-88fb-47c0-96c3-5ddbb459895e"
        },
        "item": {
          "id": "3438d459-8d08-4152-b23e-c859030a6fb7",
          "name": "Commerce Health",
          "request": {
            "url": {
              "path": [
                "commerce",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "commerce",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "98df2e2b-3cd8-48aa-b2e2-7794d5e02831",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "ae466bbb-bf7c-47d1-aa20-3fe9b8e16b54",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              48,
              49,
              55,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              99,
              111,
              109,
              109,
              101,
              114,
              99,
              101,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 158
        },
        "id": "3438d459-8d08-4152-b23e-c859030a6fb7",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "ff2c0909-8154-423d-ac9d-737a376a211e",
              "timestamp": 1755644185025,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c75a1374-ea03-4a52-b210-4f5953d4e8fa",
          "length": 32,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b6821555-b7fb-40fa-87f3-93ced743b06e"
        },
        "item": {
          "id": "18a03f7e-3ae4-4cc7-99b2-c61059638b34",
          "name": "Create Shopping Cart",
          "request": {
            "url": {
              "path": [
                "commerce",
                "api",
                "{{api_version}}",
                "cart"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a0e4d3ae-a5b9-45e0-8119-3c1134074232",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Shopping cart created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.items).to.be.an('array');",
                  "    pm.environment.set('cart_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "09c91849-a7fb-490f-a713-848a05f07dfc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "commerce",
              "api",
              "v1",
              "cart"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7301e776-0205-44a9-a768-263b744e335d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "367",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-989\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-869\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "64389e5d-f438-474c-940a-6c8a9f7a9ca9",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              48,
              51,
              56,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              99,
              111,
              109,
              109,
              101,
              114,
              99,
              101,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              99,
              97,
              114,
              116,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 164
        },
        "id": "18a03f7e-3ae4-4cc7-99b2-c61059638b34",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "63041a18-495c-4208-888b-c580fa9641df",
              "timestamp": 1755644185050,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Shopping cart created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Shopping cart created",
              "message": "expected response to have status code 201 but got 200",
              "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "94b014e8-6d1d-4b0d-ac44-b51ebd20847d",
          "length": 32,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d893a77c-44e1-4b37-aecb-59267b7ba1ba"
        },
        "item": {
          "id": "8f06d186-a755-4905-b1c3-f37874daea9b",
          "name": "Create Order",
          "request": {
            "url": {
              "path": [
                "commerce",
                "api",
                "{{api_version}}",
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "088836b4-0963-4afb-b042-b3346e4150f7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Order created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.status).to.exist;",
                  "    pm.environment.set('order_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "1117c638-e5f6-4999-a515-5f6085132894"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "commerce",
              "api",
              "v1",
              "orders"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ce5ba775-6212-4872-b8e0-3867aa3e7704",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "269",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"cartId\": \"\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-e67ba940-93f4-4990-adbb-220e84d338de\"\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "dfafde2f-ef93-4be1-827e-4f7555528195",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              48,
              54,
              54,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              99,
              111,
              109,
              109,
              101,
              114,
              99,
              101,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 166
        },
        "id": "8f06d186-a755-4905-b1c3-f37874daea9b",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "45053b7a-1f18-4589-a31a-48818fa6b532",
              "timestamp": 1755644185078,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Order created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Order created successfully",
              "message": "expected response to have status code 201 but got 200",
              "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d412f545-79d2-4a07-a05f-d1f586fa03d6",
          "length": 32,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f7d443cf-8bb8-4afe-948a-54f442306778"
        },
        "item": {
          "id": "d7e676d1-d876-49aa-a50e-f5410767dac7",
          "name": "Content Service Health",
          "request": {
            "url": {
              "path": [
                "content",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "content",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f639d40e-e6d7-4006-aecf-2b175a699b12",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "e0ded14f-ee09-41cd-948e-feee1d3e5096",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              49,
              48,
              48,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 157
        },
        "id": "d7e676d1-d876-49aa-a50e-f5410767dac7",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "986225b0-9575-4c41-9220-4cd18ac93f54",
              "timestamp": 1755644185108,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c56dc55e-1a62-4100-8cb5-054f1a827a5a",
          "length": 32,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4eb8573f-5a60-4836-880d-99600a900fe7"
        },
        "item": {
          "id": "000e8517-e2c8-4a27-b7a9-ebb985e7fab0",
          "name": "Create Content",
          "request": {
            "url": {
              "path": [
                "content",
                "api",
                "{{api_version}}",
                "content"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "03166ed0-5878-4a81-a798-e0f27f2577e3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Content created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.title).to.exist;",
                  "    pm.environment.set('content_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "1e56c3aa-eb1f-4483-af4e-8260666840db"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "content",
              "api",
              "v1",
              "content"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2dda1345-6633-4cd5-a805-a56146c70c32",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "437",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-3e8fc475-7dc8-424a-a162-e74e1195f1ce\"\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "978a57c3-cca9-4c0c-9cda-bac83186f194",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              49,
              50,
              52,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 166
        },
        "id": "000e8517-e2c8-4a27-b7a9-ebb985e7fab0",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "edfb4ded-c7f8-4a12-b1eb-261692e186c2",
              "timestamp": 1755644185136,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Content created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Content created successfully",
              "message": "expected response to have status code 201 but got 200",
              "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "aad77eee-3c38-45fe-80d1-cee0aff82511",
          "length": 32,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "873dc167-4785-45a1-a630-df0fa64be91d"
        },
        "item": {
          "id": "2ff646da-2d56-4dfe-9f4d-8c5cc74950c4",
          "name": "Search Content",
          "request": {
            "url": {
              "path": [
                "content",
                "api",
                "{{api_version}}",
                "search"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "machine learning"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "contentType",
                  "value": "article"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f2b8a46-5123-47c4-8c14-a16ff9e20d60",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Content search successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.results).to.be.an('array');",
                  "    pm.expect(response.total).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "5c3ff784-32ab-4894-b99a-2bd5298905d1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "content",
              "api",
              "v1",
              "search"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "q",
                "value": "machine%20learning"
              },
              {
                "key": "limit",
                "value": "10"
              },
              {
                "key": "contentType",
                "value": "article"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1e12e7b1-b28a-42dc-9bcd-d16d83278377",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "295e0ff2-2f80-4d65-ab3c-3e12358ab7d8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              50,
              51,
              55,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              115,
              101,
              97,
              114,
              99,
              104,
              63,
              113,
              61,
              109,
              97,
              99,
              104,
              105,
              110,
              101,
              37,
              50,
              48,
              108,
              101,
              97,
              114,
              110,
              105,
              110,
              103,
              38,
              108,
              105,
              109,
              105,
              116,
              61,
              49,
              48,
              38,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              84,
              121,
              112,
              101,
              61,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 39,
          "responseSize": 214
        },
        "id": "2ff646da-2d56-4dfe-9f4d-8c5cc74950c4",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "ecc2834e-bcb2-4c9d-a324-6dd1b6e793cb",
              "timestamp": 1755644185255,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Content search successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Content search successful",
              "message": "expected undefined to be an array",
              "stack": "AssertionError: expected undefined to be an array\n   at Object.eval sandbox-script.js:1:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "738d2ee2-65b8-48ab-8656-4adb586ece33",
          "length": 32,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "02c71e6c-28e8-4dd5-b2db-3dcf538fcb64"
        },
        "item": {
          "id": "41cca3d7-8664-41fe-a37a-ce9bd35cc394",
          "name": "Bank Simulator Health",
          "request": {
            "url": {
              "path": [
                "bank-simulator",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "bank-simulator",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6d8a7fb0-a71e-4b5b-9866-1222c71418ae",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "9efac226-808d-4363-9564-2bc61634aab5",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              50,
              55,
              48,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              98,
              97,
              110,
              107,
              45,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              111,
              114,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 164
        },
        "id": "41cca3d7-8664-41fe-a37a-ce9bd35cc394",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "46d34c1e-1c4f-4bee-81d0-575f738c69cd",
              "timestamp": 1755644185287,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "71373eeb-43cd-425d-80e4-dfc5ef623638",
          "length": 32,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "106f6230-6b56-47fc-bb49-2391713105ad"
        },
        "item": {
          "id": "9b2fbe89-feb0-4d9c-aebf-4b3bebdd8d2a",
          "name": "List Banks",
          "request": {
            "url": {
              "path": [
                "bank-simulator",
                "api",
                "banks"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22a36c7d-167e-4169-9f7c-86385617dce1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Banks list retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    pm.expect(response.length).to.be.greaterThan(0);",
                  "    ",
                  "    // Store first bank for testing",
                  "    if (response.length > 0) {",
                  "        pm.environment.set('test_bank_code', response[0].code);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "d9d3b69e-33a4-489f-9c58-8b7e9c32fec7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "bank-simulator",
              "api",
              "banks"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2058e122-88ab-48b3-886e-eef822fb57f4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "d479bd44-5174-4241-a2e7-f38da37d040c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              50,
              57,
              57,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              98,
              97,
              110,
              107,
              45,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              111,
              114,
              47,
              97,
              112,
              105,
              47,
              98,
              97,
              110,
              107,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 167
        },
        "id": "9b2fbe89-feb0-4d9c-aebf-4b3bebdd8d2a",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "176bdaba-16c3-45cc-8bb0-ed28756f1c74",
              "timestamp": 1755644185308,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Banks list retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Banks list retrieved",
              "message": "expected { ‚Ä¶(6) } to be an array",
              "stack": "AssertionError: expected { ‚Ä¶(6) } to be an array\n   at Object.eval sandbox-script.js:1:17)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d7f58240-2193-4654-aaad-40c183ff3c23",
          "length": 32,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f5a37f6b-a38c-40bf-aeb4-61e937fef550"
        },
        "item": {
          "id": "51719d25-3c1d-4cce-b4fb-3b5b7ceb0686",
          "name": "Process Bank Transaction",
          "request": {
            "url": {
              "path": [
                "bank-simulator",
                "api",
                "real-transactions",
                "process"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "974a8bbd-345d-41b9-8ca3-cce249208801",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bank transaction processed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.transactionId).to.exist;",
                  "    pm.expect(response.bankReferenceId).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "c0b9f512-bb48-4512-b87e-db9ddfdebd02"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "bank-simulator",
              "api",
              "real-transactions",
              "process"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b6529d20-1334-4efa-a9c4-b99b6cf28685",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "297",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"transactionId\": \"TXN693\",\n  \"bankCode\": \"HDFC\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"\",\n    \"source\": \"postman-api-test\"\n  }\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "fba29341-603a-46c3-88c4-832acef3f97e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              51,
              50,
              53,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              98,
              97,
              110,
              107,
              45,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              111,
              114,
              47,
              97,
              112,
              105,
              47,
              114,
              101,
              97,
              108,
              45,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 188
        },
        "id": "51719d25-3c1d-4cce-b4fb-3b5b7ceb0686",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "2bed92f7-0b80-4a59-bb74-fdaa448f9c08",
              "timestamp": 1755644185331,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Bank transaction processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Bank transaction processed",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:1:18)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "eaaf681e-0f52-4e33-9d44-322139b730f2",
          "length": 32,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "89b61d9f-e421-4011-8899-0daca12d745b"
        },
        "item": {
          "id": "11b98eef-35b6-4983-bc0e-292698adeac0",
          "name": "UPI Core Health",
          "request": {
            "url": {
              "path": [
                "upi-core",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "upi-core",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "72d0e3e4-836e-4db2-95f4-ba713e682477",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "941b6350-dd73-4809-a282-39eccf11352e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              51,
              52,
              52,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              117,
              112,
              105,
              45,
              99,
              111,
              114,
              101,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 158
        },
        "id": "11b98eef-35b6-4983-bc0e-292698adeac0",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "70f18d92-3fa4-4857-b9dc-b9e9876d6ba6",
              "timestamp": 1755644185351,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f4075df0-00df-41f9-9fa4-0a3864cf4d9d",
          "length": 32,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a53376b6-00bf-4e85-ac91-4e3c8da910b6"
        },
        "item": {
          "id": "9ef4d426-da88-475f-806f-6f61a51a58f5",
          "name": "Process UPI Transaction",
          "request": {
            "url": {
              "path": [
                "upi-core",
                "upi",
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"UPI{{$randomInt}}\",\n  \"payerVpa\": \"test@paytm\",\n  \"payeeVpa\": \"merchant@phonepe\",\n  \"amountPaisa\": 50000,\n  \"type\": \"P2M\",\n  \"reference\": \"Test UPI payment\",\n  \"payerBankCode\": \"HDFC\",\n  \"payeeBankCode\": \"ICICI\",\n  \"digitalSignature\": \"SHA256:test-signature\",\n  \"initiatedAt\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "67483a5d-0a54-4c82-8576-07748fb3c8d7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('UPI transaction processed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.transactionId).to.exist;",
                  "    pm.expect(response.rrn).to.exist;",
                  "    pm.expect(response.status).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "b7990fd6-1b31-46ae-9cb6-7f355c2ce69c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "upi-core",
              "upi",
              "transactions"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "291c2439-8108-4c39-8b52-e51e123d9119",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "316",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"transactionId\": \"UPI369\",\n  \"payerVpa\": \"test@paytm\",\n  \"payeeVpa\": \"merchant@phonepe\",\n  \"amountPaisa\": 50000,\n  \"type\": \"P2M\",\n  \"reference\": \"Test UPI payment\",\n  \"payerBankCode\": \"HDFC\",\n  \"payeeBankCode\": \"ICICI\",\n  \"digitalSignature\": \"SHA256:test-signature\",\n  \"initiatedAt\": \"2025-08-19T22:56:25.359Z\"\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "0ad78b68-7c36-4e49-a79c-574c01b28fc1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              51,
              54,
              48,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              117,
              112,
              105,
              45,
              99,
              111,
              114,
              101,
              47,
              117,
              112,
              105,
              47,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 169
        },
        "id": "9ef4d426-da88-475f-806f-6f61a51a58f5",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "5b6f53fe-8020-437b-934d-09cd1ab432d1",
              "timestamp": 1755644185365,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "UPI transaction processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "UPI transaction processed",
              "message": "expected undefined to exist",
              "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:20)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "62bf1319-8f44-4a06-aad6-d49d830e6fb0",
          "length": 32,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9bf62926-c105-49b0-b2da-e0d0848c39d0"
        },
        "item": {
          "id": "18ce1d08-463f-4cc8-a5d6-8efd5c6cd121",
          "name": "Analytics Health",
          "request": {
            "url": {
              "path": [
                "analytics",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "analytics",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d6e1e534-d571-4495-9964-adf3d6570fa5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "4c07ee8a-7078-493c-babf-6ce698a789d3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              51,
              55,
              54,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 159
        },
        "id": "18ce1d08-463f-4cc8-a5d6-8efd5c6cd121",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "f9999b33-f2d9-4f6c-8f92-4dc6326fc3be",
              "timestamp": 1755644185382,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "eb2a6633-b5c1-4975-9b84-f5d83b202e66",
          "length": 32,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "966d04fd-db86-4353-b8b5-ad7af53d9298"
        },
        "item": {
          "id": "43661cf3-e89b-4e6d-828a-b1400f934495",
          "name": "Track Event",
          "request": {
            "url": {
              "path": [
                "analytics",
                "api",
                "{{api_version}}",
                "track"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event\": \"api_test_event\",\n  \"userId\": \"{{test_user_id}}\",\n  \"properties\": {\n    \"source\": \"postman\",\n    \"testId\": \"{{correlationId}}\",\n    \"timestamp\": \"{{$isoTimestamp}}\",\n    \"userAgent\": \"Postman/API-Test\"\n  },\n  \"context\": {\n    \"ip\": \"127.0.0.1\",\n    \"userAgent\": \"Postman API Testing Suite\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "80e037c1-5770-43c5-8378-a6ba07e8aabd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Event tracked successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "314b991e-f720-40b5-8d8b-20336b1fb852"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "analytics",
              "api",
              "v1",
              "track"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a2ce6da7-117b-48f6-b06f-e92726d4e567",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "282",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"event\": \"api_test_event\",\n  \"userId\": \"\",\n  \"properties\": {\n    \"source\": \"postman\",\n    \"testId\": \"\",\n    \"timestamp\": \"2025-08-19T22:56:25.389Z\",\n    \"userAgent\": \"Postman/API-Test\"\n  },\n  \"context\": {\n    \"ip\": \"127.0.0.1\",\n    \"userAgent\": \"Postman API Testing Suite\"\n  }\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "92f9f231-24f7-4d41-9ed3-1ef47e0e747b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              51,
              57,
              50,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              116,
              114,
              97,
              99,
              107,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 166
        },
        "id": "43661cf3-e89b-4e6d-828a-b1400f934495",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "aa83a1e6-8b47-4628-851b-10aba1aa288a",
              "timestamp": 1755644185398,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Event tracked successfully",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "486c0316-76af-4f3b-a77c-23ce505a999c",
          "length": 32,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8b008b71-9b41-4c5d-8f42-1b290e61aad8"
        },
        "item": {
          "id": "c9882a62-216c-418e-9503-ce15b29b77bf",
          "name": "Notifications Health",
          "request": {
            "url": {
              "path": [
                "notifications",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "notifications",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "35b4d63d-5c85-406f-8751-6ba5255c1a51",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c6a48f7b-5709-47f3-a9eb-a9e6ee810a47",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              52,
              49,
              49,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 163
        },
        "id": "c9882a62-216c-418e-9503-ce15b29b77bf",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "13c37eba-8046-4421-b1d4-08cde5891482",
              "timestamp": 1755644185418,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c6ee3f00-be2e-4113-b96e-95143273c94b",
          "length": 32,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "89fafd3e-9084-4f6d-a8d5-ad58a44ac6b2"
        },
        "item": {
          "id": "ac3f0d0d-16bf-4e17-b094-a37118e53bd7",
          "name": "Send Email Notification",
          "request": {
            "url": {
              "path": [
                "notifications",
                "api",
                "{{api_version}}",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"email\",\n  \"recipient\": \"{{test_user_email}}\",\n  \"template\": \"test_notification\",\n  \"subject\": \"API Test Notification\",\n  \"data\": {\n    \"userName\": \"Test User\",\n    \"message\": \"This is a test notification from Postman API testing\",\n    \"testId\": \"{{correlationId}}\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9bf32bfa-59a3-43fe-abbc-98036a45b4bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Email notification sent', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "9e60ace4-555e-4741-8686-76057d500581"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "notifications",
              "api",
              "v1",
              "send"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6e58b6c3-cd7c-4da6-b139-2903c874ec13",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "247",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"type\": \"email\",\n  \"recipient\": \"\",\n  \"template\": \"test_notification\",\n  \"subject\": \"API Test Notification\",\n  \"data\": {\n    \"userName\": \"Test User\",\n    \"message\": \"This is a test notification from Postman API testing\",\n    \"testId\": \"\"\n  }\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6943e44c-305b-432d-a67c-401497373a62",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              52,
              51,
              48,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              115,
              101,
              110,
              100,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 169
        },
        "id": "ac3f0d0d-16bf-4e17-b094-a37118e53bd7",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "d3f6d9af-1c62-4d06-bfcb-a9808117a8a2",
              "timestamp": 1755644185439,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Email notification sent",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Email notification sent",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:1:24)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7392dc5b-aa1e-451f-bbe1-bc7f1bba344c",
          "length": 32,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b384e856-dafc-418a-9aa7-b2e0c6a9d65b"
        },
        "item": {
          "id": "a93015ab-7321-4b1c-a442-5a2ddcb48a8e",
          "name": "Live Classes Health",
          "request": {
            "url": {
              "path": [
                "live-classes",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "live-classes",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "53622553-c9ea-49d8-820d-b6fb3ad87978",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "39684d3c-0e72-4044-aafa-a30ec98f0f1f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              52,
              53,
              53,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              108,
              105,
              118,
              101,
              45,
              99,
              108,
              97,
              115,
              115,
              101,
              115,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 162
        },
        "id": "a93015ab-7321-4b1c-a442-5a2ddcb48a8e",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "a3c0cd53-62b5-4f42-a4bc-2b83e759f1b3",
              "timestamp": 1755644185464,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f36fa626-8262-43d3-9654-23c88e468522",
          "length": 32,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "aa03d724-adb0-4604-9d37-107632878137"
        },
        "item": {
          "id": "0e0dc8f6-78ea-4c72-b921-f9c1d9f66844",
          "name": "Create Live Session",
          "request": {
            "url": {
              "path": [
                "live-classes",
                "api",
                "{{api_version}}",
                "sessions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Live Session\",\n  \"description\": \"API testing live session\",\n  \"scheduledAt\": \"{{$isoTimestamp}}\",\n  \"duration\": 3600,\n  \"maxParticipants\": 100,\n  \"isRecorded\": true,\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f62a457-4ba1-4be4-878f-5e9f929f831e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Live session created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.streamUrl).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "5a02c27f-7d21-4f2a-a5be-53f9365cf539"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "live-classes",
              "api",
              "v1",
              "sessions"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ad0cbaf9-0f53-4deb-9e4e-4528acb403c5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "255",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Test Live Session\",\n  \"description\": \"API testing live session\",\n  \"scheduledAt\": \"2025-08-19T22:56:25.472Z\",\n  \"duration\": 3600,\n  \"maxParticipants\": 100,\n  \"isRecorded\": true,\n  \"metadata\": {\n    \"testId\": \"\",\n    \"source\": \"postman\"\n  }\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "05156481-7c4e-4b56-939c-05d13b64346b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              52,
              55,
              53,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              108,
              105,
              118,
              101,
              45,
              99,
              108,
              97,
              115,
              115,
              101,
              115,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 172
        },
        "id": "0e0dc8f6-78ea-4c72-b921-f9c1d9f66844",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "06ec62b0-0bfa-4fc3-8b0d-a7e4e0db270c",
              "timestamp": 1755644185483,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Live session created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Live session created",
              "message": "expected response to have status code 201 but got 200",
              "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:26)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f7d62a05-b41d-4416-be65-61d32a7eb6f8",
          "length": 32,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ea44656f-4588-455b-8542-7b694b194f9a"
        },
        "item": {
          "id": "158820ae-0a38-4c81-b862-82e7549b7e0e",
          "name": "LLM Tutor Health",
          "request": {
            "url": {
              "path": [
                "llm-tutor",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "llm-tutor",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "faf3235e-8737-45fc-b9ae-bc96c194d9ac",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a703f056-9edc-41c6-945d-ef01f1930c4c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              52,
              57,
              50,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              108,
              108,
              109,
              45,
              116,
              117,
              116,
              111,
              114,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 159
        },
        "id": "158820ae-0a38-4c81-b862-82e7549b7e0e",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "7b803479-80c8-4f51-9593-bcaf3c66c58d",
              "timestamp": 1755644185496,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8a83edb4-2333-4d43-af60-8894c258cf4d",
          "length": 32,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "14baf36e-bb8c-4168-93f8-881d12cc4cf0"
        },
        "item": {
          "id": "b61a077b-99b0-4fb5-92db-f6033253826c",
          "name": "Ask Question to Tutor",
          "request": {
            "url": {
              "path": [
                "llm-tutor",
                "api",
                "{{api_version}}",
                "ask"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"Explain the concept of machine learning in simple terms\",\n  \"context\": {\n    \"subject\": \"computer-science\",\n    \"level\": \"beginner\",\n    \"userId\": \"{{test_user_id}}\"\n  },\n  \"preferences\": {\n    \"responseLength\": \"medium\",\n    \"includeExamples\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f8c7979-0925-42cc-9ff1-e3ff58abadff",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Tutor response received', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.answer).to.exist;",
                  "    pm.expect(response.confidence).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "d05e71c6-1c4b-43b3-9d78-2a86c61b1d4a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "llm-tutor",
              "api",
              "v1",
              "ask"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1de0df34-952d-4677-8330-d3c4f152bdbd",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "256",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"question\": \"Explain the concept of machine learning in simple terms\",\n  \"context\": {\n    \"subject\": \"computer-science\",\n    \"level\": \"beginner\",\n    \"userId\": \"\"\n  },\n  \"preferences\": {\n    \"responseLength\": \"medium\",\n    \"includeExamples\": true\n  }\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "09d16cff-0256-4a46-8833-e478f979737f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              53,
              48,
              51,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              108,
              108,
              109,
              45,
              116,
              117,
              116,
              111,
              114,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              115,
              107,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 164
        },
        "id": "b61a077b-99b0-4fb5-92db-f6033253826c",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "9cd077f7-1644-433b-873f-605e547ab278",
              "timestamp": 1755644185509,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Tutor response received",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Tutor response received",
              "message": "expected undefined to exist",
              "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:28)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "18d6fa3b-2020-432c-8cbe-8472919602f8",
          "length": 32,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ca3c6fe3-d628-4b78-b396-c58687d619c0"
        },
        "item": {
          "id": "d914fa24-7ab6-4d52-9ac1-25b02cee2e2f",
          "name": "Recommendations Health",
          "request": {
            "url": {
              "path": [
                "recommendations",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "recommendations",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0ab11e1f-c593-4d5c-b424-9aa0a67c8ca0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "1efbab0e-58e0-4a67-9ec2-ab0d5a520bd6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              53,
              49,
              56,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 165
        },
        "id": "d914fa24-7ab6-4d52-9ac1-25b02cee2e2f",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "13af498e-60bf-41c9-9986-b5b081be5c5e",
              "timestamp": 1755644185525,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "91310196-1813-41ca-9fff-edb1a526cab0",
          "length": 32,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0184e97f-0695-4090-850f-e607a573feb2"
        },
        "item": {
          "id": "4b268a95-0c88-48ba-bec7-d6f075ca6a76",
          "name": "Get User Recommendations",
          "request": {
            "url": {
              "path": [
                "recommendations",
                "api",
                "{{api_version}}",
                "users",
                "{{test_user_id}}",
                "recommendations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "courses"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b12c8011-b38b-4899-b858-3187e4541f2f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Recommendations retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.recommendations).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "09e3a814-9bd5-4409-b5b5-fe001f9284cb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "recommendations",
              "api",
              "v1",
              "users",
              "",
              "recommendations"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "type",
                "value": "courses"
              },
              {
                "key": "limit",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "793f6034-fb68-48da-92bb-7de487e86af0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "cdfd57cd-216a-4f45-85d3-0842aff4c402",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              53,
              51,
              50,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              63,
              116,
              121,
              112,
              101,
              61,
              99,
              111,
              117,
              114,
              115,
              101,
              115,
              38,
              108,
              105,
              109,
              105,
              116,
              61,
              49,
              48,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 210
        },
        "id": "4b268a95-0c88-48ba-bec7-d6f075ca6a76",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "5ec2b225-9dd8-455f-9156-d55ce41ef6e5",
              "timestamp": 1755644185537,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Recommendations retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Recommendations retrieved",
              "message": "expected undefined to be an array",
              "stack": "AssertionError: expected undefined to be an array\n   at Object.eval sandbox-script.js:1:30)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "133d9aa6-c55e-425b-b4f6-a4b8c4216941",
          "length": 32,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2ba8412d-13bb-4c6b-9510-e85d7ba85ac1"
        },
        "item": {
          "id": "c4a6dba2-b93c-4456-9dc2-c5b9e6374e22",
          "name": "Admin Dashboard Health",
          "request": {
            "url": {
              "path": [
                "admin",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "admin",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "54d6053d-f93e-4db2-8f56-fee7607bff62",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "3776802f-2786-4ec1-95b8-1d94fcf79d92",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              53,
              52,
              54,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              100,
              109,
              105,
              110,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 155
        },
        "id": "c4a6dba2-b93c-4456-9dc2-c5b9e6374e22",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "31fea079-db82-478f-9254-12d0aeecc48b",
              "timestamp": 1755644185551,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cf3d9798-0fab-4119-b13e-04d64a18acc4",
          "length": 32,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "366b5249-0b40-44ea-84cc-bde5ca7676b6"
        },
        "item": {
          "id": "5c535f00-20ae-42c2-a34e-9eaeb3c899c8",
          "name": "Get System Status",
          "request": {
            "url": {
              "path": [
                "admin",
                "api",
                "{{api_version}}",
                "system",
                "status"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3e41b1c-4e51-4dcd-9494-e3cbc4498408",
                "type": "text/javascript",
                "exec": [
                  "pm.test('System status retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.services).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "1f0ae9e3-6c7a-44f4-8ba3-f453274ae389"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "admin",
              "api",
              "v1",
              "system",
              "status"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f6fd9c09-cb47-4d80-914e-931a965e4216",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "82ebd21b-12ba-4e2c-95b9-fdc25f7a5af9",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:25 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              50,
              53,
              46,
              53,
              53,
              55,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              100,
              109,
              105,
              110,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              115,
              121,
              115,
              116,
              101,
              109,
              47,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 169
        },
        "id": "5c535f00-20ae-42c2-a34e-9eaeb3c899c8",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "08bfad15-78bb-460b-8e3a-9540f1460d06",
              "timestamp": 1755644185562,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "System status retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "System status retrieved",
              "message": "expected undefined to exist",
              "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:32)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 5383
    },
    "failures": [
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "ccd07933-3fa7-4355-bfe3-fd4fe70f8d54",
          "timestamp": 1755644184723,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "ea922a39-f94b-46a4-a443-d60be4ad33c7",
          "name": "Health Check",
          "request": {
            "url": {
              "path": [
                "healthz"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2f2a82fd-379d-4e9e-bc40-9f9f45c2ba15",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API Gateway is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.service).to.eql('api-gateway');",
                  "});"
                ],
                "_lastExecutionId": "0dd9479b-05ae-41ee-b25d-a8170fabd163"
              }
            }
          ]
        },
        "parent": {
          "id": "f2e72f87-2f87-4506-8c97-8c37ca52a859",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ea922a39-f94b-46a4-a443-d60be4ad33c7",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f2a82fd-379d-4e9e-bc40-9f9f45c2ba15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "0dd9479b-05ae-41ee-b25d-a8170fabd163"
                  }
                }
              ]
            },
            {
              "id": "14c07034-398a-414e-8e58-3c25d74be91b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476a0030-671b-4862-8d60-eb773b447931",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "4d941899-7b07-4223-a3ec-537b13bdc4b8"
                  }
                }
              ]
            },
            {
              "id": "6abecb12-3e8c-4bf9-af1d-a90681562fa3",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8555b67-3ef4-4356-b8fe-079e532f5e43",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "bd7e317f-257a-4df5-bcad-397136f96a9c"
                  }
                }
              ]
            },
            {
              "id": "657220a1-af25-4d1c-9d76-ba322e46bb3c",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b1c3aaa-011f-4e4d-95f0-2e6f12889433",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "e8e9b82c-9b55-4fcd-83e1-7237acaf6ee1"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2935ced7-c693-4cbd-ba88-4d5cf69ccd06",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "6f57ef27-5e8e-4948-b358-7a110f731ab3"
                  }
                }
              ]
            },
            {
              "id": "c4637b43-02c6-40af-9367-787aaae65e5a",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f71cbffb-bec8-4f00-aa34-bf3083b6c9e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "11689f4a-9b09-4dc7-9658-1d60a7da7bc4"
                  }
                }
              ]
            },
            {
              "id": "ff99034c-8486-4046-8f11-664ab20f4576",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be28e320-b8a8-4a68-b143-71e15c4265c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ebef90b7-abf7-4bc2-9546-d503b1f81311"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 32,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "eff6c1f5-1ed2-43ae-9b6d-2129c50fee36",
          "httpRequestId": "2c207226-0eda-4f74-90a2-39c280571f6e",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "77c9623b-c043-4d17-a898-1be48aabcad5",
          "timestamp": 1755644184746,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "14c07034-398a-414e-8e58-3c25d74be91b",
          "name": "OIDC Discovery",
          "request": {
            "url": {
              "path": [
                "identity",
                ".well-known",
                "openid-configuration"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "476a0030-671b-4862-8d60-eb773b447931",
                "type": "text/javascript",
                "exec": [
                  "pm.test('OIDC Discovery successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.issuer).to.exist;",
                  "    pm.expect(response.authorization_endpoint).to.exist;",
                  "    pm.expect(response.token_endpoint).to.exist;",
                  "    pm.expect(response.jwks_uri).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "4d941899-7b07-4223-a3ec-537b13bdc4b8"
              }
            }
          ]
        },
        "parent": {
          "id": "f2e72f87-2f87-4506-8c97-8c37ca52a859",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ea922a39-f94b-46a4-a443-d60be4ad33c7",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f2a82fd-379d-4e9e-bc40-9f9f45c2ba15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "0dd9479b-05ae-41ee-b25d-a8170fabd163"
                  }
                }
              ]
            },
            {
              "id": "14c07034-398a-414e-8e58-3c25d74be91b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476a0030-671b-4862-8d60-eb773b447931",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "4d941899-7b07-4223-a3ec-537b13bdc4b8"
                  }
                }
              ]
            },
            {
              "id": "6abecb12-3e8c-4bf9-af1d-a90681562fa3",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8555b67-3ef4-4356-b8fe-079e532f5e43",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "bd7e317f-257a-4df5-bcad-397136f96a9c"
                  }
                }
              ]
            },
            {
              "id": "657220a1-af25-4d1c-9d76-ba322e46bb3c",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b1c3aaa-011f-4e4d-95f0-2e6f12889433",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "e8e9b82c-9b55-4fcd-83e1-7237acaf6ee1"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2935ced7-c693-4cbd-ba88-4d5cf69ccd06",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "6f57ef27-5e8e-4948-b358-7a110f731ab3"
                  }
                }
              ]
            },
            {
              "id": "c4637b43-02c6-40af-9367-787aaae65e5a",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f71cbffb-bec8-4f00-aa34-bf3083b6c9e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "11689f4a-9b09-4dc7-9658-1d60a7da7bc4"
                  }
                }
              ]
            },
            {
              "id": "ff99034c-8486-4046-8f11-664ab20f4576",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be28e320-b8a8-4a68-b143-71e15c4265c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ebef90b7-abf7-4bc2-9546-d503b1f81311"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1901b3b7-980f-45db-8813-5e3f9bc47046",
          "length": 32,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b6175552-7606-4c1d-b333-188258d834d5",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "OIDC Discovery successful",
          "message": "expected undefined to exist",
          "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "ba558ec7dc9f422f49049c5c3d5dcb6e",
          "id": "fe630f73-27c5-4c4b-b68b-3ac0a7cd0bcf",
          "timestamp": 1755644184750,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "14c07034-398a-414e-8e58-3c25d74be91b",
          "name": "OIDC Discovery",
          "request": {
            "url": {
              "path": [
                "identity",
                ".well-known",
                "openid-configuration"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "476a0030-671b-4862-8d60-eb773b447931",
                "type": "text/javascript",
                "exec": [
                  "pm.test('OIDC Discovery successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.issuer).to.exist;",
                  "    pm.expect(response.authorization_endpoint).to.exist;",
                  "    pm.expect(response.token_endpoint).to.exist;",
                  "    pm.expect(response.jwks_uri).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "4d941899-7b07-4223-a3ec-537b13bdc4b8"
              }
            }
          ]
        },
        "parent": {
          "id": "f2e72f87-2f87-4506-8c97-8c37ca52a859",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ea922a39-f94b-46a4-a443-d60be4ad33c7",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f2a82fd-379d-4e9e-bc40-9f9f45c2ba15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "0dd9479b-05ae-41ee-b25d-a8170fabd163"
                  }
                }
              ]
            },
            {
              "id": "14c07034-398a-414e-8e58-3c25d74be91b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476a0030-671b-4862-8d60-eb773b447931",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "4d941899-7b07-4223-a3ec-537b13bdc4b8"
                  }
                }
              ]
            },
            {
              "id": "6abecb12-3e8c-4bf9-af1d-a90681562fa3",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8555b67-3ef4-4356-b8fe-079e532f5e43",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "bd7e317f-257a-4df5-bcad-397136f96a9c"
                  }
                }
              ]
            },
            {
              "id": "657220a1-af25-4d1c-9d76-ba322e46bb3c",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b1c3aaa-011f-4e4d-95f0-2e6f12889433",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "e8e9b82c-9b55-4fcd-83e1-7237acaf6ee1"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2935ced7-c693-4cbd-ba88-4d5cf69ccd06",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "6f57ef27-5e8e-4948-b358-7a110f731ab3"
                  }
                }
              ]
            },
            {
              "id": "c4637b43-02c6-40af-9367-787aaae65e5a",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f71cbffb-bec8-4f00-aa34-bf3083b6c9e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "11689f4a-9b09-4dc7-9658-1d60a7da7bc4"
                  }
                }
              ]
            },
            {
              "id": "ff99034c-8486-4046-8f11-664ab20f4576",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be28e320-b8a8-4a68-b143-71e15c4265c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ebef90b7-abf7-4bc2-9546-d503b1f81311"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1901b3b7-980f-45db-8813-5e3f9bc47046",
          "length": 32,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b6175552-7606-4c1d-b333-188258d834d5",
          "scriptId": "476a0030-671b-4862-8d60-eb773b447931",
          "execution": "4d941899-7b07-4223-a3ec-537b13bdc4b8"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "7505e1c8-9f10-463c-b80d-dd6cc4e4ab36",
          "timestamp": 1755644184765,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "6abecb12-3e8c-4bf9-af1d-a90681562fa3",
          "name": "Get JWKS",
          "request": {
            "url": {
              "path": [
                "identity",
                "oauth2",
                "jwks"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8555b67-3ef4-4356-b8fe-079e532f5e43",
                "type": "text/javascript",
                "exec": [
                  "pm.test('JWKS endpoint accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.keys).to.be.an('array');",
                  "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "bd7e317f-257a-4df5-bcad-397136f96a9c"
              }
            }
          ]
        },
        "parent": {
          "id": "f2e72f87-2f87-4506-8c97-8c37ca52a859",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ea922a39-f94b-46a4-a443-d60be4ad33c7",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f2a82fd-379d-4e9e-bc40-9f9f45c2ba15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "0dd9479b-05ae-41ee-b25d-a8170fabd163"
                  }
                }
              ]
            },
            {
              "id": "14c07034-398a-414e-8e58-3c25d74be91b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476a0030-671b-4862-8d60-eb773b447931",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "4d941899-7b07-4223-a3ec-537b13bdc4b8"
                  }
                }
              ]
            },
            {
              "id": "6abecb12-3e8c-4bf9-af1d-a90681562fa3",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8555b67-3ef4-4356-b8fe-079e532f5e43",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "bd7e317f-257a-4df5-bcad-397136f96a9c"
                  }
                }
              ]
            },
            {
              "id": "657220a1-af25-4d1c-9d76-ba322e46bb3c",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b1c3aaa-011f-4e4d-95f0-2e6f12889433",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "e8e9b82c-9b55-4fcd-83e1-7237acaf6ee1"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2935ced7-c693-4cbd-ba88-4d5cf69ccd06",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "6f57ef27-5e8e-4948-b358-7a110f731ab3"
                  }
                }
              ]
            },
            {
              "id": "c4637b43-02c6-40af-9367-787aaae65e5a",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f71cbffb-bec8-4f00-aa34-bf3083b6c9e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "11689f4a-9b09-4dc7-9658-1d60a7da7bc4"
                  }
                }
              ]
            },
            {
              "id": "ff99034c-8486-4046-8f11-664ab20f4576",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be28e320-b8a8-4a68-b143-71e15c4265c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ebef90b7-abf7-4bc2-9546-d503b1f81311"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "11b16e88-3fb8-4279-917c-6b85ebf2619f",
          "length": 32,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cc3f81bb-dc7f-42ee-8b4b-dc2026985321",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "JWKS endpoint accessible",
          "message": "expected undefined to be an array",
          "stack": "AssertionError: expected undefined to be an array\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "03422fe8d4907032bc2cf668f6aa757a",
          "id": "10c055a5-a87b-4d2e-be7d-64350bdd80c3",
          "timestamp": 1755644184767,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6abecb12-3e8c-4bf9-af1d-a90681562fa3",
          "name": "Get JWKS",
          "request": {
            "url": {
              "path": [
                "identity",
                "oauth2",
                "jwks"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8555b67-3ef4-4356-b8fe-079e532f5e43",
                "type": "text/javascript",
                "exec": [
                  "pm.test('JWKS endpoint accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.keys).to.be.an('array');",
                  "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "bd7e317f-257a-4df5-bcad-397136f96a9c"
              }
            }
          ]
        },
        "parent": {
          "id": "f2e72f87-2f87-4506-8c97-8c37ca52a859",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ea922a39-f94b-46a4-a443-d60be4ad33c7",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f2a82fd-379d-4e9e-bc40-9f9f45c2ba15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "0dd9479b-05ae-41ee-b25d-a8170fabd163"
                  }
                }
              ]
            },
            {
              "id": "14c07034-398a-414e-8e58-3c25d74be91b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476a0030-671b-4862-8d60-eb773b447931",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "4d941899-7b07-4223-a3ec-537b13bdc4b8"
                  }
                }
              ]
            },
            {
              "id": "6abecb12-3e8c-4bf9-af1d-a90681562fa3",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8555b67-3ef4-4356-b8fe-079e532f5e43",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "bd7e317f-257a-4df5-bcad-397136f96a9c"
                  }
                }
              ]
            },
            {
              "id": "657220a1-af25-4d1c-9d76-ba322e46bb3c",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b1c3aaa-011f-4e4d-95f0-2e6f12889433",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "e8e9b82c-9b55-4fcd-83e1-7237acaf6ee1"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2935ced7-c693-4cbd-ba88-4d5cf69ccd06",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "6f57ef27-5e8e-4948-b358-7a110f731ab3"
                  }
                }
              ]
            },
            {
              "id": "c4637b43-02c6-40af-9367-787aaae65e5a",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f71cbffb-bec8-4f00-aa34-bf3083b6c9e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "11689f4a-9b09-4dc7-9658-1d60a7da7bc4"
                  }
                }
              ]
            },
            {
              "id": "ff99034c-8486-4046-8f11-664ab20f4576",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be28e320-b8a8-4a68-b143-71e15c4265c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ebef90b7-abf7-4bc2-9546-d503b1f81311"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "11b16e88-3fb8-4279-917c-6b85ebf2619f",
          "length": 32,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cc3f81bb-dc7f-42ee-8b4b-dc2026985321",
          "scriptId": "e8555b67-3ef4-4356-b8fe-079e532f5e43",
          "execution": "bd7e317f-257a-4df5-bcad-397136f96a9c"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "e0a5b0fb-3b8d-4b9b-a389-7fedaea838b5",
          "timestamp": 1755644184786,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "657220a1-af25-4d1c-9d76-ba322e46bb3c",
          "name": "Register User",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Correlation-ID",
                "value": "{{correlationId}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4b1c3aaa-011f-4e4d-95f0-2e6f12889433",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user).to.exist;",
                  "    pm.expect(response.user.id).to.exist;",
                  "    pm.environment.set('test_user_id', response.user.id);",
                  "    pm.environment.set('test_user_email', response.user.email);",
                  "});"
                ],
                "_lastExecutionId": "e8e9b82c-9b55-4fcd-83e1-7237acaf6ee1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2935ced7-c693-4cbd-ba88-4d5cf69ccd06",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique test user email",
                  "const timestamp = Date.now();",
                  "const email = `test-${timestamp}@suuupra.com`;",
                  "pm.environment.set('test_email', email);"
                ],
                "_lastExecutionId": "6f57ef27-5e8e-4948-b358-7a110f731ab3"
              }
            }
          ]
        },
        "parent": {
          "id": "f2e72f87-2f87-4506-8c97-8c37ca52a859",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ea922a39-f94b-46a4-a443-d60be4ad33c7",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f2a82fd-379d-4e9e-bc40-9f9f45c2ba15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "0dd9479b-05ae-41ee-b25d-a8170fabd163"
                  }
                }
              ]
            },
            {
              "id": "14c07034-398a-414e-8e58-3c25d74be91b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476a0030-671b-4862-8d60-eb773b447931",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "4d941899-7b07-4223-a3ec-537b13bdc4b8"
                  }
                }
              ]
            },
            {
              "id": "6abecb12-3e8c-4bf9-af1d-a90681562fa3",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8555b67-3ef4-4356-b8fe-079e532f5e43",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "bd7e317f-257a-4df5-bcad-397136f96a9c"
                  }
                }
              ]
            },
            {
              "id": "657220a1-af25-4d1c-9d76-ba322e46bb3c",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b1c3aaa-011f-4e4d-95f0-2e6f12889433",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "e8e9b82c-9b55-4fcd-83e1-7237acaf6ee1"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2935ced7-c693-4cbd-ba88-4d5cf69ccd06",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "6f57ef27-5e8e-4948-b358-7a110f731ab3"
                  }
                }
              ]
            },
            {
              "id": "c4637b43-02c6-40af-9367-787aaae65e5a",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f71cbffb-bec8-4f00-aa34-bf3083b6c9e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "11689f4a-9b09-4dc7-9658-1d60a7da7bc4"
                  }
                }
              ]
            },
            {
              "id": "ff99034c-8486-4046-8f11-664ab20f4576",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be28e320-b8a8-4a68-b143-71e15c4265c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ebef90b7-abf7-4bc2-9546-d503b1f81311"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "78556290-ae85-46c5-85d9-8b11b17731aa",
          "length": 32,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "22051247-5552-4c0f-a71b-d64f1b330d5f",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "User registration successful",
          "message": "expected response to have status code 201 but got 200",
          "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "595750de87dd22477a8d52737465df27",
          "id": "6d55f355-1b54-45af-98f1-5b61d6f8cdcc",
          "timestamp": 1755644184788,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "657220a1-af25-4d1c-9d76-ba322e46bb3c",
          "name": "Register User",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Correlation-ID",
                "value": "{{correlationId}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4b1c3aaa-011f-4e4d-95f0-2e6f12889433",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user).to.exist;",
                  "    pm.expect(response.user.id).to.exist;",
                  "    pm.environment.set('test_user_id', response.user.id);",
                  "    pm.environment.set('test_user_email', response.user.email);",
                  "});"
                ],
                "_lastExecutionId": "e8e9b82c-9b55-4fcd-83e1-7237acaf6ee1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2935ced7-c693-4cbd-ba88-4d5cf69ccd06",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique test user email",
                  "const timestamp = Date.now();",
                  "const email = `test-${timestamp}@suuupra.com`;",
                  "pm.environment.set('test_email', email);"
                ],
                "_lastExecutionId": "6f57ef27-5e8e-4948-b358-7a110f731ab3"
              }
            }
          ]
        },
        "parent": {
          "id": "f2e72f87-2f87-4506-8c97-8c37ca52a859",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ea922a39-f94b-46a4-a443-d60be4ad33c7",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f2a82fd-379d-4e9e-bc40-9f9f45c2ba15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "0dd9479b-05ae-41ee-b25d-a8170fabd163"
                  }
                }
              ]
            },
            {
              "id": "14c07034-398a-414e-8e58-3c25d74be91b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476a0030-671b-4862-8d60-eb773b447931",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "4d941899-7b07-4223-a3ec-537b13bdc4b8"
                  }
                }
              ]
            },
            {
              "id": "6abecb12-3e8c-4bf9-af1d-a90681562fa3",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8555b67-3ef4-4356-b8fe-079e532f5e43",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "bd7e317f-257a-4df5-bcad-397136f96a9c"
                  }
                }
              ]
            },
            {
              "id": "657220a1-af25-4d1c-9d76-ba322e46bb3c",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b1c3aaa-011f-4e4d-95f0-2e6f12889433",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "e8e9b82c-9b55-4fcd-83e1-7237acaf6ee1"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2935ced7-c693-4cbd-ba88-4d5cf69ccd06",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "6f57ef27-5e8e-4948-b358-7a110f731ab3"
                  }
                }
              ]
            },
            {
              "id": "c4637b43-02c6-40af-9367-787aaae65e5a",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f71cbffb-bec8-4f00-aa34-bf3083b6c9e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "11689f4a-9b09-4dc7-9658-1d60a7da7bc4"
                  }
                }
              ]
            },
            {
              "id": "ff99034c-8486-4046-8f11-664ab20f4576",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be28e320-b8a8-4a68-b143-71e15c4265c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ebef90b7-abf7-4bc2-9546-d503b1f81311"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "78556290-ae85-46c5-85d9-8b11b17731aa",
          "length": 32,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "22051247-5552-4c0f-a71b-d64f1b330d5f",
          "scriptId": "4b1c3aaa-011f-4e4d-95f0-2e6f12889433",
          "execution": "e8e9b82c-9b55-4fcd-83e1-7237acaf6ee1"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "46f850d8-4ba7-4ad4-ab58-02eed6b222a6",
          "timestamp": 1755644184818,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "c4637b43-02c6-40af-9367-787aaae65e5a",
          "name": "Login User",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f71cbffb-bec8-4f00-aa34-bf3083b6c9e3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.accessToken).to.exist;",
                  "    pm.expect(response.refreshToken).to.exist;",
                  "    ",
                  "    // Store tokens",
                  "    pm.environment.set('access_token', response.accessToken);",
                  "    pm.environment.set('refresh_token', response.refreshToken);",
                  "    ",
                  "    // Calculate token expiry",
                  "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                  "    pm.environment.set('token_expiry', expiryTime.toString());",
                  "});"
                ],
                "_lastExecutionId": "11689f4a-9b09-4dc7-9658-1d60a7da7bc4"
              }
            }
          ]
        },
        "parent": {
          "id": "f2e72f87-2f87-4506-8c97-8c37ca52a859",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ea922a39-f94b-46a4-a443-d60be4ad33c7",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f2a82fd-379d-4e9e-bc40-9f9f45c2ba15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "0dd9479b-05ae-41ee-b25d-a8170fabd163"
                  }
                }
              ]
            },
            {
              "id": "14c07034-398a-414e-8e58-3c25d74be91b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476a0030-671b-4862-8d60-eb773b447931",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "4d941899-7b07-4223-a3ec-537b13bdc4b8"
                  }
                }
              ]
            },
            {
              "id": "6abecb12-3e8c-4bf9-af1d-a90681562fa3",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8555b67-3ef4-4356-b8fe-079e532f5e43",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "bd7e317f-257a-4df5-bcad-397136f96a9c"
                  }
                }
              ]
            },
            {
              "id": "657220a1-af25-4d1c-9d76-ba322e46bb3c",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b1c3aaa-011f-4e4d-95f0-2e6f12889433",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "e8e9b82c-9b55-4fcd-83e1-7237acaf6ee1"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2935ced7-c693-4cbd-ba88-4d5cf69ccd06",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "6f57ef27-5e8e-4948-b358-7a110f731ab3"
                  }
                }
              ]
            },
            {
              "id": "c4637b43-02c6-40af-9367-787aaae65e5a",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f71cbffb-bec8-4f00-aa34-bf3083b6c9e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "11689f4a-9b09-4dc7-9658-1d60a7da7bc4"
                  }
                }
              ]
            },
            {
              "id": "ff99034c-8486-4046-8f11-664ab20f4576",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be28e320-b8a8-4a68-b143-71e15c4265c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ebef90b7-abf7-4bc2-9546-d503b1f81311"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4dc279c9-054e-427c-9fbc-323a932451d2",
          "length": 32,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f8079d5b-11b5-4633-b2ce-be28ba21a91f",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Login successful",
          "message": "expected undefined to exist",
          "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "92527479afdc5946d168e572014f4640",
          "id": "3391a6fb-6bb3-48f8-a9b0-6054a9113516",
          "timestamp": 1755644184825,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c4637b43-02c6-40af-9367-787aaae65e5a",
          "name": "Login User",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f71cbffb-bec8-4f00-aa34-bf3083b6c9e3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.accessToken).to.exist;",
                  "    pm.expect(response.refreshToken).to.exist;",
                  "    ",
                  "    // Store tokens",
                  "    pm.environment.set('access_token', response.accessToken);",
                  "    pm.environment.set('refresh_token', response.refreshToken);",
                  "    ",
                  "    // Calculate token expiry",
                  "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                  "    pm.environment.set('token_expiry', expiryTime.toString());",
                  "});"
                ],
                "_lastExecutionId": "11689f4a-9b09-4dc7-9658-1d60a7da7bc4"
              }
            }
          ]
        },
        "parent": {
          "id": "f2e72f87-2f87-4506-8c97-8c37ca52a859",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ea922a39-f94b-46a4-a443-d60be4ad33c7",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f2a82fd-379d-4e9e-bc40-9f9f45c2ba15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "0dd9479b-05ae-41ee-b25d-a8170fabd163"
                  }
                }
              ]
            },
            {
              "id": "14c07034-398a-414e-8e58-3c25d74be91b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476a0030-671b-4862-8d60-eb773b447931",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "4d941899-7b07-4223-a3ec-537b13bdc4b8"
                  }
                }
              ]
            },
            {
              "id": "6abecb12-3e8c-4bf9-af1d-a90681562fa3",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8555b67-3ef4-4356-b8fe-079e532f5e43",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "bd7e317f-257a-4df5-bcad-397136f96a9c"
                  }
                }
              ]
            },
            {
              "id": "657220a1-af25-4d1c-9d76-ba322e46bb3c",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b1c3aaa-011f-4e4d-95f0-2e6f12889433",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "e8e9b82c-9b55-4fcd-83e1-7237acaf6ee1"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2935ced7-c693-4cbd-ba88-4d5cf69ccd06",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "6f57ef27-5e8e-4948-b358-7a110f731ab3"
                  }
                }
              ]
            },
            {
              "id": "c4637b43-02c6-40af-9367-787aaae65e5a",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f71cbffb-bec8-4f00-aa34-bf3083b6c9e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "11689f4a-9b09-4dc7-9658-1d60a7da7bc4"
                  }
                }
              ]
            },
            {
              "id": "ff99034c-8486-4046-8f11-664ab20f4576",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be28e320-b8a8-4a68-b143-71e15c4265c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ebef90b7-abf7-4bc2-9546-d503b1f81311"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4dc279c9-054e-427c-9fbc-323a932451d2",
          "length": 32,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f8079d5b-11b5-4633-b2ce-be28ba21a91f",
          "scriptId": "f71cbffb-bec8-4f00-aa34-bf3083b6c9e3",
          "execution": "11689f4a-9b09-4dc7-9658-1d60a7da7bc4"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "4d40420c-54c7-4aad-be68-0718442037ce",
          "timestamp": 1755644184851,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "ff99034c-8486-4046-8f11-664ab20f4576",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "users",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "be28e320-b8a8-4a68-b143-71e15c4265c0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User profile retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.email).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "ebef90b7-abf7-4bc2-9546-d503b1f81311"
              }
            }
          ]
        },
        "parent": {
          "id": "f2e72f87-2f87-4506-8c97-8c37ca52a859",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ea922a39-f94b-46a4-a443-d60be4ad33c7",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f2a82fd-379d-4e9e-bc40-9f9f45c2ba15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "0dd9479b-05ae-41ee-b25d-a8170fabd163"
                  }
                }
              ]
            },
            {
              "id": "14c07034-398a-414e-8e58-3c25d74be91b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476a0030-671b-4862-8d60-eb773b447931",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "4d941899-7b07-4223-a3ec-537b13bdc4b8"
                  }
                }
              ]
            },
            {
              "id": "6abecb12-3e8c-4bf9-af1d-a90681562fa3",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8555b67-3ef4-4356-b8fe-079e532f5e43",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "bd7e317f-257a-4df5-bcad-397136f96a9c"
                  }
                }
              ]
            },
            {
              "id": "657220a1-af25-4d1c-9d76-ba322e46bb3c",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b1c3aaa-011f-4e4d-95f0-2e6f12889433",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "e8e9b82c-9b55-4fcd-83e1-7237acaf6ee1"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2935ced7-c693-4cbd-ba88-4d5cf69ccd06",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "6f57ef27-5e8e-4948-b358-7a110f731ab3"
                  }
                }
              ]
            },
            {
              "id": "c4637b43-02c6-40af-9367-787aaae65e5a",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f71cbffb-bec8-4f00-aa34-bf3083b6c9e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "11689f4a-9b09-4dc7-9658-1d60a7da7bc4"
                  }
                }
              ]
            },
            {
              "id": "ff99034c-8486-4046-8f11-664ab20f4576",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be28e320-b8a8-4a68-b143-71e15c4265c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ebef90b7-abf7-4bc2-9546-d503b1f81311"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fe798e0f-2471-4c37-9501-f384b8c29591",
          "length": 32,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "92b299a6-4078-4152-8f92-f4291ac1a66e",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "User profile retrieved",
          "message": "expected undefined to exist",
          "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "b28cfd0d179f8c08c8c04dc89530455e",
          "id": "5d5decf2-ab56-464e-b389-ce853cacf404",
          "timestamp": 1755644184856,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ff99034c-8486-4046-8f11-664ab20f4576",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "users",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "be28e320-b8a8-4a68-b143-71e15c4265c0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User profile retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.email).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "ebef90b7-abf7-4bc2-9546-d503b1f81311"
              }
            }
          ]
        },
        "parent": {
          "id": "f2e72f87-2f87-4506-8c97-8c37ca52a859",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ea922a39-f94b-46a4-a443-d60be4ad33c7",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2f2a82fd-379d-4e9e-bc40-9f9f45c2ba15",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "0dd9479b-05ae-41ee-b25d-a8170fabd163"
                  }
                }
              ]
            },
            {
              "id": "14c07034-398a-414e-8e58-3c25d74be91b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476a0030-671b-4862-8d60-eb773b447931",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "4d941899-7b07-4223-a3ec-537b13bdc4b8"
                  }
                }
              ]
            },
            {
              "id": "6abecb12-3e8c-4bf9-af1d-a90681562fa3",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8555b67-3ef4-4356-b8fe-079e532f5e43",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "bd7e317f-257a-4df5-bcad-397136f96a9c"
                  }
                }
              ]
            },
            {
              "id": "657220a1-af25-4d1c-9d76-ba322e46bb3c",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b1c3aaa-011f-4e4d-95f0-2e6f12889433",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "e8e9b82c-9b55-4fcd-83e1-7237acaf6ee1"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2935ced7-c693-4cbd-ba88-4d5cf69ccd06",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "6f57ef27-5e8e-4948-b358-7a110f731ab3"
                  }
                }
              ]
            },
            {
              "id": "c4637b43-02c6-40af-9367-787aaae65e5a",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f71cbffb-bec8-4f00-aa34-bf3083b6c9e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "11689f4a-9b09-4dc7-9658-1d60a7da7bc4"
                  }
                }
              ]
            },
            {
              "id": "ff99034c-8486-4046-8f11-664ab20f4576",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be28e320-b8a8-4a68-b143-71e15c4265c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "ebef90b7-abf7-4bc2-9546-d503b1f81311"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fe798e0f-2471-4c37-9501-f384b8c29591",
          "length": 32,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "92b299a6-4078-4152-8f92-f4291ac1a66e",
          "scriptId": "be28e320-b8a8-4a68-b143-71e15c4265c0",
          "execution": "ebef90b7-abf7-4bc2-9546-d503b1f81311"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "9ab821ad-6e22-4301-a97c-f3dfa2fae880",
          "timestamp": 1755644184878,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "a0d134f1-52b9-4c92-81f2-0bb0d6328bca",
          "name": "Payment Gateway Health",
          "request": {
            "url": {
              "path": [
                "payments",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "929b16bc-895a-433e-baba-554e0226b023",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment Gateway is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "25d8b256-4bf2-4777-b3e3-6a41885f7400"
              }
            }
          ]
        },
        "parent": {
          "id": "b402ef8f-3a24-4ad7-919a-ad195b6e3039",
          "name": "üí≥ Payment Gateway",
          "description": {
            "content": "Payment processing, UPI transactions, and financial operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a0d134f1-52b9-4c92-81f2-0bb0d6328bca",
              "name": "Payment Gateway Health",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "929b16bc-895a-433e-baba-554e0226b023",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "25d8b256-4bf2-4777-b3e3-6a41885f7400"
                  }
                }
              ]
            },
            {
              "id": "2b4861b0-9ea5-4c7b-b699-04238e9f662f",
              "name": "Create Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Idempotency-Key",
                    "value": "idem-{{$randomUUID}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ec805c6d-05fc-4184-a75c-5c8244e62baa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.clientSecret).to.exist;",
                      "    pm.environment.set('payment_intent_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa719742-d444-45dd-bb14-05b4ce7ce8f1"
                  }
                }
              ]
            },
            {
              "id": "fb0601d1-1ef6-4883-b29d-3eb83c1a5977",
              "name": "Get Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents",
                    "{{payment_intent_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aed2bbc1-09e4-4ec6-9533-dc7f4f5cd4bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                      "});"
                    ],
                    "_lastExecutionId": "179286cd-7822-46ad-a942-0f99b5b7d878"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5ee0dca3-3fa3-4d4c-b150-73379ae3bbdd",
          "length": 32,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e82e6cad-be46-49e1-b15c-5c88e4f31408",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "5a022207-6b53-4a04-bf94-95a6e4a9ec1e",
          "timestamp": 1755644184915,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "2b4861b0-9ea5-4c7b-b699-04238e9f662f",
          "name": "Create Payment Intent",
          "request": {
            "url": {
              "path": [
                "payments",
                "api",
                "{{api_version}}",
                "intents"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Idempotency-Key",
                "value": "idem-{{$randomUUID}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ec805c6d-05fc-4184-a75c-5c8244e62baa",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment intent created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.clientSecret).to.exist;",
                  "    pm.environment.set('payment_intent_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "fa719742-d444-45dd-bb14-05b4ce7ce8f1"
              }
            }
          ]
        },
        "parent": {
          "id": "b402ef8f-3a24-4ad7-919a-ad195b6e3039",
          "name": "üí≥ Payment Gateway",
          "description": {
            "content": "Payment processing, UPI transactions, and financial operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a0d134f1-52b9-4c92-81f2-0bb0d6328bca",
              "name": "Payment Gateway Health",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "929b16bc-895a-433e-baba-554e0226b023",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "25d8b256-4bf2-4777-b3e3-6a41885f7400"
                  }
                }
              ]
            },
            {
              "id": "2b4861b0-9ea5-4c7b-b699-04238e9f662f",
              "name": "Create Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Idempotency-Key",
                    "value": "idem-{{$randomUUID}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ec805c6d-05fc-4184-a75c-5c8244e62baa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.clientSecret).to.exist;",
                      "    pm.environment.set('payment_intent_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa719742-d444-45dd-bb14-05b4ce7ce8f1"
                  }
                }
              ]
            },
            {
              "id": "fb0601d1-1ef6-4883-b29d-3eb83c1a5977",
              "name": "Get Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents",
                    "{{payment_intent_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aed2bbc1-09e4-4ec6-9533-dc7f4f5cd4bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                      "});"
                    ],
                    "_lastExecutionId": "179286cd-7822-46ad-a942-0f99b5b7d878"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "48e4d620-3be7-4d9b-8b96-c9fdb4f96b50",
          "length": 32,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "74a04f6f-6fb4-4c16-ae13-8813a9dc6576",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Payment intent created",
          "message": "expected response to have status code 201 but got 200",
          "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "ecefa2119207a32b09dc091c7805eea4",
          "id": "d5d23ee0-7075-4bfa-bff9-0299235bd491",
          "timestamp": 1755644184918,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2b4861b0-9ea5-4c7b-b699-04238e9f662f",
          "name": "Create Payment Intent",
          "request": {
            "url": {
              "path": [
                "payments",
                "api",
                "{{api_version}}",
                "intents"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Idempotency-Key",
                "value": "idem-{{$randomUUID}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ec805c6d-05fc-4184-a75c-5c8244e62baa",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment intent created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.clientSecret).to.exist;",
                  "    pm.environment.set('payment_intent_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "fa719742-d444-45dd-bb14-05b4ce7ce8f1"
              }
            }
          ]
        },
        "parent": {
          "id": "b402ef8f-3a24-4ad7-919a-ad195b6e3039",
          "name": "üí≥ Payment Gateway",
          "description": {
            "content": "Payment processing, UPI transactions, and financial operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a0d134f1-52b9-4c92-81f2-0bb0d6328bca",
              "name": "Payment Gateway Health",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "929b16bc-895a-433e-baba-554e0226b023",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "25d8b256-4bf2-4777-b3e3-6a41885f7400"
                  }
                }
              ]
            },
            {
              "id": "2b4861b0-9ea5-4c7b-b699-04238e9f662f",
              "name": "Create Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Idempotency-Key",
                    "value": "idem-{{$randomUUID}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ec805c6d-05fc-4184-a75c-5c8244e62baa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.clientSecret).to.exist;",
                      "    pm.environment.set('payment_intent_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa719742-d444-45dd-bb14-05b4ce7ce8f1"
                  }
                }
              ]
            },
            {
              "id": "fb0601d1-1ef6-4883-b29d-3eb83c1a5977",
              "name": "Get Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents",
                    "{{payment_intent_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aed2bbc1-09e4-4ec6-9533-dc7f4f5cd4bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                      "});"
                    ],
                    "_lastExecutionId": "179286cd-7822-46ad-a942-0f99b5b7d878"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "48e4d620-3be7-4d9b-8b96-c9fdb4f96b50",
          "length": 32,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "74a04f6f-6fb4-4c16-ae13-8813a9dc6576",
          "scriptId": "ec805c6d-05fc-4184-a75c-5c8244e62baa",
          "execution": "fa719742-d444-45dd-bb14-05b4ce7ce8f1"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "a9e32884-96ef-4830-865c-a30d651a4ae9",
          "timestamp": 1755644184979,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "fb0601d1-1ef6-4883-b29d-3eb83c1a5977",
          "name": "Get Payment Intent",
          "request": {
            "url": {
              "path": [
                "payments",
                "api",
                "{{api_version}}",
                "intents",
                "{{payment_intent_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aed2bbc1-09e4-4ec6-9533-dc7f4f5cd4bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment intent retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                  "});"
                ],
                "_lastExecutionId": "179286cd-7822-46ad-a942-0f99b5b7d878"
              }
            }
          ]
        },
        "parent": {
          "id": "b402ef8f-3a24-4ad7-919a-ad195b6e3039",
          "name": "üí≥ Payment Gateway",
          "description": {
            "content": "Payment processing, UPI transactions, and financial operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a0d134f1-52b9-4c92-81f2-0bb0d6328bca",
              "name": "Payment Gateway Health",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "929b16bc-895a-433e-baba-554e0226b023",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "25d8b256-4bf2-4777-b3e3-6a41885f7400"
                  }
                }
              ]
            },
            {
              "id": "2b4861b0-9ea5-4c7b-b699-04238e9f662f",
              "name": "Create Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Idempotency-Key",
                    "value": "idem-{{$randomUUID}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ec805c6d-05fc-4184-a75c-5c8244e62baa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.clientSecret).to.exist;",
                      "    pm.environment.set('payment_intent_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa719742-d444-45dd-bb14-05b4ce7ce8f1"
                  }
                }
              ]
            },
            {
              "id": "fb0601d1-1ef6-4883-b29d-3eb83c1a5977",
              "name": "Get Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents",
                    "{{payment_intent_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aed2bbc1-09e4-4ec6-9533-dc7f4f5cd4bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                      "});"
                    ],
                    "_lastExecutionId": "179286cd-7822-46ad-a942-0f99b5b7d878"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8c26eb2d-24d7-49cf-8d16-05dfa7d844b9",
          "length": 32,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ff1b53fd-881f-4760-98ae-bb2cb5fdced5",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Payment intent retrieved",
          "message": "expected undefined to deeply equal ''",
          "stack": "AssertionError: expected undefined to deeply equal ''\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "5eae7b7f09b85129e0de7adb407f356c",
          "id": "5710a011-c34b-4da3-a961-1ce2141986d8",
          "timestamp": 1755644184987,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "fb0601d1-1ef6-4883-b29d-3eb83c1a5977",
          "name": "Get Payment Intent",
          "request": {
            "url": {
              "path": [
                "payments",
                "api",
                "{{api_version}}",
                "intents",
                "{{payment_intent_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aed2bbc1-09e4-4ec6-9533-dc7f4f5cd4bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment intent retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                  "});"
                ],
                "_lastExecutionId": "179286cd-7822-46ad-a942-0f99b5b7d878"
              }
            }
          ]
        },
        "parent": {
          "id": "b402ef8f-3a24-4ad7-919a-ad195b6e3039",
          "name": "üí≥ Payment Gateway",
          "description": {
            "content": "Payment processing, UPI transactions, and financial operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a0d134f1-52b9-4c92-81f2-0bb0d6328bca",
              "name": "Payment Gateway Health",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "929b16bc-895a-433e-baba-554e0226b023",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "25d8b256-4bf2-4777-b3e3-6a41885f7400"
                  }
                }
              ]
            },
            {
              "id": "2b4861b0-9ea5-4c7b-b699-04238e9f662f",
              "name": "Create Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Idempotency-Key",
                    "value": "idem-{{$randomUUID}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ec805c6d-05fc-4184-a75c-5c8244e62baa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.clientSecret).to.exist;",
                      "    pm.environment.set('payment_intent_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa719742-d444-45dd-bb14-05b4ce7ce8f1"
                  }
                }
              ]
            },
            {
              "id": "fb0601d1-1ef6-4883-b29d-3eb83c1a5977",
              "name": "Get Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents",
                    "{{payment_intent_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aed2bbc1-09e4-4ec6-9533-dc7f4f5cd4bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                      "});"
                    ],
                    "_lastExecutionId": "179286cd-7822-46ad-a942-0f99b5b7d878"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8c26eb2d-24d7-49cf-8d16-05dfa7d844b9",
          "length": 32,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ff1b53fd-881f-4760-98ae-bb2cb5fdced5",
          "scriptId": "aed2bbc1-09e4-4ec6-9533-dc7f4f5cd4bc",
          "execution": "179286cd-7822-46ad-a942-0f99b5b7d878"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "ff2c0909-8154-423d-ac9d-737a376a211e",
          "timestamp": 1755644185025,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "3438d459-8d08-4152-b23e-c859030a6fb7",
          "name": "Commerce Health",
          "request": {
            "url": {
              "path": [
                "commerce",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "f5d1d402-fda2-41d6-84cd-dac292ade112",
          "name": "üè™ Commerce & Orders",
          "description": {
            "content": "E-commerce operations, shopping cart, and order management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3438d459-8d08-4152-b23e-c859030a6fb7",
              "name": "Commerce Health",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "18a03f7e-3ae4-4cc7-99b2-c61059638b34",
              "name": "Create Shopping Cart",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a0e4d3ae-a5b9-45e0-8119-3c1134074232",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Shopping cart created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.environment.set('cart_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "09c91849-a7fb-490f-a713-848a05f07dfc"
                  }
                }
              ]
            },
            {
              "id": "8f06d186-a755-4905-b1c3-f37874daea9b",
              "name": "Create Order",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "088836b4-0963-4afb-b042-b3346e4150f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.status).to.exist;",
                      "    pm.environment.set('order_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1117c638-e5f6-4999-a515-5f6085132894"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e20bf466-a952-4b72-9d96-e08fce56c984",
          "length": 32,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8285f554-88fb-47c0-96c3-5ddbb459895e",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "63041a18-495c-4208-888b-c580fa9641df",
          "timestamp": 1755644185050,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "18a03f7e-3ae4-4cc7-99b2-c61059638b34",
          "name": "Create Shopping Cart",
          "request": {
            "url": {
              "path": [
                "commerce",
                "api",
                "{{api_version}}",
                "cart"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a0e4d3ae-a5b9-45e0-8119-3c1134074232",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Shopping cart created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.items).to.be.an('array');",
                  "    pm.environment.set('cart_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "09c91849-a7fb-490f-a713-848a05f07dfc"
              }
            }
          ]
        },
        "parent": {
          "id": "f5d1d402-fda2-41d6-84cd-dac292ade112",
          "name": "üè™ Commerce & Orders",
          "description": {
            "content": "E-commerce operations, shopping cart, and order management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3438d459-8d08-4152-b23e-c859030a6fb7",
              "name": "Commerce Health",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "18a03f7e-3ae4-4cc7-99b2-c61059638b34",
              "name": "Create Shopping Cart",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a0e4d3ae-a5b9-45e0-8119-3c1134074232",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Shopping cart created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.environment.set('cart_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "09c91849-a7fb-490f-a713-848a05f07dfc"
                  }
                }
              ]
            },
            {
              "id": "8f06d186-a755-4905-b1c3-f37874daea9b",
              "name": "Create Order",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "088836b4-0963-4afb-b042-b3346e4150f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.status).to.exist;",
                      "    pm.environment.set('order_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1117c638-e5f6-4999-a515-5f6085132894"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c75a1374-ea03-4a52-b210-4f5953d4e8fa",
          "length": 32,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b6821555-b7fb-40fa-87f3-93ced743b06e",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Shopping cart created",
          "message": "expected response to have status code 201 but got 200",
          "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "167e7c94301de9d77441b9e2ef0603fd",
          "id": "8d6a4987-10bd-4e0d-a781-5cc1cfd23a82",
          "timestamp": 1755644185052,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "18a03f7e-3ae4-4cc7-99b2-c61059638b34",
          "name": "Create Shopping Cart",
          "request": {
            "url": {
              "path": [
                "commerce",
                "api",
                "{{api_version}}",
                "cart"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a0e4d3ae-a5b9-45e0-8119-3c1134074232",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Shopping cart created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.items).to.be.an('array');",
                  "    pm.environment.set('cart_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "09c91849-a7fb-490f-a713-848a05f07dfc"
              }
            }
          ]
        },
        "parent": {
          "id": "f5d1d402-fda2-41d6-84cd-dac292ade112",
          "name": "üè™ Commerce & Orders",
          "description": {
            "content": "E-commerce operations, shopping cart, and order management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3438d459-8d08-4152-b23e-c859030a6fb7",
              "name": "Commerce Health",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "18a03f7e-3ae4-4cc7-99b2-c61059638b34",
              "name": "Create Shopping Cart",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a0e4d3ae-a5b9-45e0-8119-3c1134074232",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Shopping cart created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.environment.set('cart_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "09c91849-a7fb-490f-a713-848a05f07dfc"
                  }
                }
              ]
            },
            {
              "id": "8f06d186-a755-4905-b1c3-f37874daea9b",
              "name": "Create Order",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "088836b4-0963-4afb-b042-b3346e4150f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.status).to.exist;",
                      "    pm.environment.set('order_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1117c638-e5f6-4999-a515-5f6085132894"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c75a1374-ea03-4a52-b210-4f5953d4e8fa",
          "length": 32,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b6821555-b7fb-40fa-87f3-93ced743b06e",
          "scriptId": "a0e4d3ae-a5b9-45e0-8119-3c1134074232",
          "execution": "09c91849-a7fb-490f-a713-848a05f07dfc"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "45053b7a-1f18-4589-a31a-48818fa6b532",
          "timestamp": 1755644185078,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "8f06d186-a755-4905-b1c3-f37874daea9b",
          "name": "Create Order",
          "request": {
            "url": {
              "path": [
                "commerce",
                "api",
                "{{api_version}}",
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "088836b4-0963-4afb-b042-b3346e4150f7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Order created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.status).to.exist;",
                  "    pm.environment.set('order_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "1117c638-e5f6-4999-a515-5f6085132894"
              }
            }
          ]
        },
        "parent": {
          "id": "f5d1d402-fda2-41d6-84cd-dac292ade112",
          "name": "üè™ Commerce & Orders",
          "description": {
            "content": "E-commerce operations, shopping cart, and order management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3438d459-8d08-4152-b23e-c859030a6fb7",
              "name": "Commerce Health",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "18a03f7e-3ae4-4cc7-99b2-c61059638b34",
              "name": "Create Shopping Cart",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a0e4d3ae-a5b9-45e0-8119-3c1134074232",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Shopping cart created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.environment.set('cart_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "09c91849-a7fb-490f-a713-848a05f07dfc"
                  }
                }
              ]
            },
            {
              "id": "8f06d186-a755-4905-b1c3-f37874daea9b",
              "name": "Create Order",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "088836b4-0963-4afb-b042-b3346e4150f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.status).to.exist;",
                      "    pm.environment.set('order_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1117c638-e5f6-4999-a515-5f6085132894"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "94b014e8-6d1d-4b0d-ac44-b51ebd20847d",
          "length": 32,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d893a77c-44e1-4b37-aecb-59267b7ba1ba",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Order created successfully",
          "message": "expected response to have status code 201 but got 200",
          "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "1b8edddb6d883412c4735b0e7467161b",
          "id": "5f0dd375-abbc-4b90-b9db-dfa31734dc3f",
          "timestamp": 1755644185082,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8f06d186-a755-4905-b1c3-f37874daea9b",
          "name": "Create Order",
          "request": {
            "url": {
              "path": [
                "commerce",
                "api",
                "{{api_version}}",
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "088836b4-0963-4afb-b042-b3346e4150f7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Order created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.status).to.exist;",
                  "    pm.environment.set('order_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "1117c638-e5f6-4999-a515-5f6085132894"
              }
            }
          ]
        },
        "parent": {
          "id": "f5d1d402-fda2-41d6-84cd-dac292ade112",
          "name": "üè™ Commerce & Orders",
          "description": {
            "content": "E-commerce operations, shopping cart, and order management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3438d459-8d08-4152-b23e-c859030a6fb7",
              "name": "Commerce Health",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "18a03f7e-3ae4-4cc7-99b2-c61059638b34",
              "name": "Create Shopping Cart",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a0e4d3ae-a5b9-45e0-8119-3c1134074232",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Shopping cart created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.environment.set('cart_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "09c91849-a7fb-490f-a713-848a05f07dfc"
                  }
                }
              ]
            },
            {
              "id": "8f06d186-a755-4905-b1c3-f37874daea9b",
              "name": "Create Order",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "088836b4-0963-4afb-b042-b3346e4150f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.status).to.exist;",
                      "    pm.environment.set('order_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1117c638-e5f6-4999-a515-5f6085132894"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "94b014e8-6d1d-4b0d-ac44-b51ebd20847d",
          "length": 32,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d893a77c-44e1-4b37-aecb-59267b7ba1ba",
          "scriptId": "088836b4-0963-4afb-b042-b3346e4150f7",
          "execution": "1117c638-e5f6-4999-a515-5f6085132894"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "986225b0-9575-4c41-9220-4cd18ac93f54",
          "timestamp": 1755644185108,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "d7e676d1-d876-49aa-a50e-f5410767dac7",
          "name": "Content Service Health",
          "request": {
            "url": {
              "path": [
                "content",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "c72f265f-fc5c-4912-9470-d993516f45fd",
          "name": "üìö Content Management",
          "description": {
            "content": "Content creation, file uploads, and content workflow management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d7e676d1-d876-49aa-a50e-f5410767dac7",
              "name": "Content Service Health",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "000e8517-e2c8-4a27-b7a9-ebb985e7fab0",
              "name": "Create Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "content"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03166ed0-5878-4a81-a798-e0f27f2577e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.title).to.exist;",
                      "    pm.environment.set('content_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1e56c3aa-eb1f-4483-af4e-8260666840db"
                  }
                }
              ]
            },
            {
              "id": "2ff646da-2d56-4dfe-9f4d-8c5cc74950c4",
              "name": "Search Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "machine learning"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "contentType",
                      "value": "article"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f2b8a46-5123-47c4-8c14-a16ff9e20d60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content search successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.results).to.be.an('array');",
                      "    pm.expect(response.total).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "5c3ff784-32ab-4894-b99a-2bd5298905d1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d412f545-79d2-4a07-a05f-d1f586fa03d6",
          "length": 32,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f7d443cf-8bb8-4afe-948a-54f442306778",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "edfb4ded-c7f8-4a12-b1eb-261692e186c2",
          "timestamp": 1755644185136,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "000e8517-e2c8-4a27-b7a9-ebb985e7fab0",
          "name": "Create Content",
          "request": {
            "url": {
              "path": [
                "content",
                "api",
                "{{api_version}}",
                "content"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "03166ed0-5878-4a81-a798-e0f27f2577e3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Content created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.title).to.exist;",
                  "    pm.environment.set('content_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "1e56c3aa-eb1f-4483-af4e-8260666840db"
              }
            }
          ]
        },
        "parent": {
          "id": "c72f265f-fc5c-4912-9470-d993516f45fd",
          "name": "üìö Content Management",
          "description": {
            "content": "Content creation, file uploads, and content workflow management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d7e676d1-d876-49aa-a50e-f5410767dac7",
              "name": "Content Service Health",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "000e8517-e2c8-4a27-b7a9-ebb985e7fab0",
              "name": "Create Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "content"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03166ed0-5878-4a81-a798-e0f27f2577e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.title).to.exist;",
                      "    pm.environment.set('content_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1e56c3aa-eb1f-4483-af4e-8260666840db"
                  }
                }
              ]
            },
            {
              "id": "2ff646da-2d56-4dfe-9f4d-8c5cc74950c4",
              "name": "Search Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "machine learning"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "contentType",
                      "value": "article"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f2b8a46-5123-47c4-8c14-a16ff9e20d60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content search successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.results).to.be.an('array');",
                      "    pm.expect(response.total).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "5c3ff784-32ab-4894-b99a-2bd5298905d1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c56dc55e-1a62-4100-8cb5-054f1a827a5a",
          "length": 32,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4eb8573f-5a60-4836-880d-99600a900fe7",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Content created successfully",
          "message": "expected response to have status code 201 but got 200",
          "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "aa7c5e19c3f765fab7bd0b851d5d91b7",
          "id": "eefc2fd4-fcf7-4505-b395-1a6cbfaa28e8",
          "timestamp": 1755644185140,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "000e8517-e2c8-4a27-b7a9-ebb985e7fab0",
          "name": "Create Content",
          "request": {
            "url": {
              "path": [
                "content",
                "api",
                "{{api_version}}",
                "content"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "03166ed0-5878-4a81-a798-e0f27f2577e3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Content created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.title).to.exist;",
                  "    pm.environment.set('content_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "1e56c3aa-eb1f-4483-af4e-8260666840db"
              }
            }
          ]
        },
        "parent": {
          "id": "c72f265f-fc5c-4912-9470-d993516f45fd",
          "name": "üìö Content Management",
          "description": {
            "content": "Content creation, file uploads, and content workflow management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d7e676d1-d876-49aa-a50e-f5410767dac7",
              "name": "Content Service Health",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "000e8517-e2c8-4a27-b7a9-ebb985e7fab0",
              "name": "Create Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "content"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03166ed0-5878-4a81-a798-e0f27f2577e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.title).to.exist;",
                      "    pm.environment.set('content_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1e56c3aa-eb1f-4483-af4e-8260666840db"
                  }
                }
              ]
            },
            {
              "id": "2ff646da-2d56-4dfe-9f4d-8c5cc74950c4",
              "name": "Search Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "machine learning"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "contentType",
                      "value": "article"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f2b8a46-5123-47c4-8c14-a16ff9e20d60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content search successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.results).to.be.an('array');",
                      "    pm.expect(response.total).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "5c3ff784-32ab-4894-b99a-2bd5298905d1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c56dc55e-1a62-4100-8cb5-054f1a827a5a",
          "length": 32,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4eb8573f-5a60-4836-880d-99600a900fe7",
          "scriptId": "03166ed0-5878-4a81-a798-e0f27f2577e3",
          "execution": "1e56c3aa-eb1f-4483-af4e-8260666840db"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "ecc2834e-bcb2-4c9d-a324-6dd1b6e793cb",
          "timestamp": 1755644185255,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "2ff646da-2d56-4dfe-9f4d-8c5cc74950c4",
          "name": "Search Content",
          "request": {
            "url": {
              "path": [
                "content",
                "api",
                "{{api_version}}",
                "search"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "machine learning"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "contentType",
                  "value": "article"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f2b8a46-5123-47c4-8c14-a16ff9e20d60",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Content search successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.results).to.be.an('array');",
                  "    pm.expect(response.total).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "5c3ff784-32ab-4894-b99a-2bd5298905d1"
              }
            }
          ]
        },
        "parent": {
          "id": "c72f265f-fc5c-4912-9470-d993516f45fd",
          "name": "üìö Content Management",
          "description": {
            "content": "Content creation, file uploads, and content workflow management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d7e676d1-d876-49aa-a50e-f5410767dac7",
              "name": "Content Service Health",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "000e8517-e2c8-4a27-b7a9-ebb985e7fab0",
              "name": "Create Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "content"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03166ed0-5878-4a81-a798-e0f27f2577e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.title).to.exist;",
                      "    pm.environment.set('content_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1e56c3aa-eb1f-4483-af4e-8260666840db"
                  }
                }
              ]
            },
            {
              "id": "2ff646da-2d56-4dfe-9f4d-8c5cc74950c4",
              "name": "Search Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "machine learning"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "contentType",
                      "value": "article"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f2b8a46-5123-47c4-8c14-a16ff9e20d60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content search successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.results).to.be.an('array');",
                      "    pm.expect(response.total).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "5c3ff784-32ab-4894-b99a-2bd5298905d1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "aad77eee-3c38-45fe-80d1-cee0aff82511",
          "length": 32,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "873dc167-4785-45a1-a630-df0fa64be91d",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Content search successful",
          "message": "expected undefined to be an array",
          "stack": "AssertionError: expected undefined to be an array\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "2aa75f02c7818364c5c77c1c4e1392a3",
          "id": "55ce6504-e03b-423a-a1fb-3cc4fc726da6",
          "timestamp": 1755644185257,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2ff646da-2d56-4dfe-9f4d-8c5cc74950c4",
          "name": "Search Content",
          "request": {
            "url": {
              "path": [
                "content",
                "api",
                "{{api_version}}",
                "search"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "machine learning"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "contentType",
                  "value": "article"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f2b8a46-5123-47c4-8c14-a16ff9e20d60",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Content search successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.results).to.be.an('array');",
                  "    pm.expect(response.total).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "5c3ff784-32ab-4894-b99a-2bd5298905d1"
              }
            }
          ]
        },
        "parent": {
          "id": "c72f265f-fc5c-4912-9470-d993516f45fd",
          "name": "üìö Content Management",
          "description": {
            "content": "Content creation, file uploads, and content workflow management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d7e676d1-d876-49aa-a50e-f5410767dac7",
              "name": "Content Service Health",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "000e8517-e2c8-4a27-b7a9-ebb985e7fab0",
              "name": "Create Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "content"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03166ed0-5878-4a81-a798-e0f27f2577e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.title).to.exist;",
                      "    pm.environment.set('content_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1e56c3aa-eb1f-4483-af4e-8260666840db"
                  }
                }
              ]
            },
            {
              "id": "2ff646da-2d56-4dfe-9f4d-8c5cc74950c4",
              "name": "Search Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "machine learning"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "contentType",
                      "value": "article"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f2b8a46-5123-47c4-8c14-a16ff9e20d60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content search successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.results).to.be.an('array');",
                      "    pm.expect(response.total).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "5c3ff784-32ab-4894-b99a-2bd5298905d1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "aad77eee-3c38-45fe-80d1-cee0aff82511",
          "length": 32,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "873dc167-4785-45a1-a630-df0fa64be91d",
          "scriptId": "1f2b8a46-5123-47c4-8c14-a16ff9e20d60",
          "execution": "5c3ff784-32ab-4894-b99a-2bd5298905d1"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "46d34c1e-1c4f-4bee-81d0-575f738c69cd",
          "timestamp": 1755644185287,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "41cca3d7-8664-41fe-a37a-ce9bd35cc394",
          "name": "Bank Simulator Health",
          "request": {
            "url": {
              "path": [
                "bank-simulator",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "b51a3f1c-b53a-4d40-a8ea-c08625cc0390",
          "name": "üè¶ Banking Simulation",
          "description": {
            "content": "Bank simulator for testing financial operations and UPI transactions",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "41cca3d7-8664-41fe-a37a-ce9bd35cc394",
              "name": "Bank Simulator Health",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "9b2fbe89-feb0-4d9c-aebf-4b3bebdd8d2a",
              "name": "List Banks",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "banks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22a36c7d-167e-4169-9f7c-86385617dce1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Banks list retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "    pm.expect(response.length).to.be.greaterThan(0);",
                      "    ",
                      "    // Store first bank for testing",
                      "    if (response.length > 0) {",
                      "        pm.environment.set('test_bank_code', response[0].code);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "d9d3b69e-33a4-489f-9c58-8b7e9c32fec7"
                  }
                }
              ]
            },
            {
              "id": "51719d25-3c1d-4cce-b4fb-3b5b7ceb0686",
              "name": "Process Bank Transaction",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "real-transactions",
                    "process"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "974a8bbd-345d-41b9-8ca3-cce249208801",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bank transaction processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.transactionId).to.exist;",
                      "    pm.expect(response.bankReferenceId).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c0b9f512-bb48-4512-b87e-db9ddfdebd02"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "738d2ee2-65b8-48ab-8656-4adb586ece33",
          "length": 32,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "02c71e6c-28e8-4dd5-b2db-3dcf538fcb64",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "176bdaba-16c3-45cc-8bb0-ed28756f1c74",
          "timestamp": 1755644185308,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "9b2fbe89-feb0-4d9c-aebf-4b3bebdd8d2a",
          "name": "List Banks",
          "request": {
            "url": {
              "path": [
                "bank-simulator",
                "api",
                "banks"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22a36c7d-167e-4169-9f7c-86385617dce1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Banks list retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    pm.expect(response.length).to.be.greaterThan(0);",
                  "    ",
                  "    // Store first bank for testing",
                  "    if (response.length > 0) {",
                  "        pm.environment.set('test_bank_code', response[0].code);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "d9d3b69e-33a4-489f-9c58-8b7e9c32fec7"
              }
            }
          ]
        },
        "parent": {
          "id": "b51a3f1c-b53a-4d40-a8ea-c08625cc0390",
          "name": "üè¶ Banking Simulation",
          "description": {
            "content": "Bank simulator for testing financial operations and UPI transactions",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "41cca3d7-8664-41fe-a37a-ce9bd35cc394",
              "name": "Bank Simulator Health",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "9b2fbe89-feb0-4d9c-aebf-4b3bebdd8d2a",
              "name": "List Banks",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "banks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22a36c7d-167e-4169-9f7c-86385617dce1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Banks list retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "    pm.expect(response.length).to.be.greaterThan(0);",
                      "    ",
                      "    // Store first bank for testing",
                      "    if (response.length > 0) {",
                      "        pm.environment.set('test_bank_code', response[0].code);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "d9d3b69e-33a4-489f-9c58-8b7e9c32fec7"
                  }
                }
              ]
            },
            {
              "id": "51719d25-3c1d-4cce-b4fb-3b5b7ceb0686",
              "name": "Process Bank Transaction",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "real-transactions",
                    "process"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "974a8bbd-345d-41b9-8ca3-cce249208801",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bank transaction processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.transactionId).to.exist;",
                      "    pm.expect(response.bankReferenceId).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c0b9f512-bb48-4512-b87e-db9ddfdebd02"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "71373eeb-43cd-425d-80e4-dfc5ef623638",
          "length": 32,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "106f6230-6b56-47fc-bb49-2391713105ad",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Banks list retrieved",
          "message": "expected { ‚Ä¶(6) } to be an array",
          "stack": "AssertionError: expected { ‚Ä¶(6) } to be an array\n   at Object.eval sandbox-script.js:1:17)",
          "checksum": "7e1616d92223a7f5c7f2d8c0ad3517b9",
          "id": "f5c1659e-e36d-4cf2-a131-57dffc908890",
          "timestamp": 1755644185313,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9b2fbe89-feb0-4d9c-aebf-4b3bebdd8d2a",
          "name": "List Banks",
          "request": {
            "url": {
              "path": [
                "bank-simulator",
                "api",
                "banks"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22a36c7d-167e-4169-9f7c-86385617dce1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Banks list retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    pm.expect(response.length).to.be.greaterThan(0);",
                  "    ",
                  "    // Store first bank for testing",
                  "    if (response.length > 0) {",
                  "        pm.environment.set('test_bank_code', response[0].code);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "d9d3b69e-33a4-489f-9c58-8b7e9c32fec7"
              }
            }
          ]
        },
        "parent": {
          "id": "b51a3f1c-b53a-4d40-a8ea-c08625cc0390",
          "name": "üè¶ Banking Simulation",
          "description": {
            "content": "Bank simulator for testing financial operations and UPI transactions",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "41cca3d7-8664-41fe-a37a-ce9bd35cc394",
              "name": "Bank Simulator Health",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "9b2fbe89-feb0-4d9c-aebf-4b3bebdd8d2a",
              "name": "List Banks",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "banks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22a36c7d-167e-4169-9f7c-86385617dce1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Banks list retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "    pm.expect(response.length).to.be.greaterThan(0);",
                      "    ",
                      "    // Store first bank for testing",
                      "    if (response.length > 0) {",
                      "        pm.environment.set('test_bank_code', response[0].code);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "d9d3b69e-33a4-489f-9c58-8b7e9c32fec7"
                  }
                }
              ]
            },
            {
              "id": "51719d25-3c1d-4cce-b4fb-3b5b7ceb0686",
              "name": "Process Bank Transaction",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "real-transactions",
                    "process"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "974a8bbd-345d-41b9-8ca3-cce249208801",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bank transaction processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.transactionId).to.exist;",
                      "    pm.expect(response.bankReferenceId).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c0b9f512-bb48-4512-b87e-db9ddfdebd02"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "71373eeb-43cd-425d-80e4-dfc5ef623638",
          "length": 32,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "106f6230-6b56-47fc-bb49-2391713105ad",
          "scriptId": "22a36c7d-167e-4169-9f7c-86385617dce1",
          "execution": "d9d3b69e-33a4-489f-9c58-8b7e9c32fec7"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "2bed92f7-0b80-4a59-bb74-fdaa448f9c08",
          "timestamp": 1755644185331,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "51719d25-3c1d-4cce-b4fb-3b5b7ceb0686",
          "name": "Process Bank Transaction",
          "request": {
            "url": {
              "path": [
                "bank-simulator",
                "api",
                "real-transactions",
                "process"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "974a8bbd-345d-41b9-8ca3-cce249208801",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bank transaction processed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.transactionId).to.exist;",
                  "    pm.expect(response.bankReferenceId).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "c0b9f512-bb48-4512-b87e-db9ddfdebd02"
              }
            }
          ]
        },
        "parent": {
          "id": "b51a3f1c-b53a-4d40-a8ea-c08625cc0390",
          "name": "üè¶ Banking Simulation",
          "description": {
            "content": "Bank simulator for testing financial operations and UPI transactions",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "41cca3d7-8664-41fe-a37a-ce9bd35cc394",
              "name": "Bank Simulator Health",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "9b2fbe89-feb0-4d9c-aebf-4b3bebdd8d2a",
              "name": "List Banks",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "banks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22a36c7d-167e-4169-9f7c-86385617dce1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Banks list retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "    pm.expect(response.length).to.be.greaterThan(0);",
                      "    ",
                      "    // Store first bank for testing",
                      "    if (response.length > 0) {",
                      "        pm.environment.set('test_bank_code', response[0].code);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "d9d3b69e-33a4-489f-9c58-8b7e9c32fec7"
                  }
                }
              ]
            },
            {
              "id": "51719d25-3c1d-4cce-b4fb-3b5b7ceb0686",
              "name": "Process Bank Transaction",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "real-transactions",
                    "process"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "974a8bbd-345d-41b9-8ca3-cce249208801",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bank transaction processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.transactionId).to.exist;",
                      "    pm.expect(response.bankReferenceId).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c0b9f512-bb48-4512-b87e-db9ddfdebd02"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d7f58240-2193-4654-aaad-40c183ff3c23",
          "length": 32,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f5a37f6b-a38c-40bf-aeb4-61e937fef550",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Bank transaction processed",
          "message": "expected undefined to be true",
          "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:1:18)",
          "checksum": "0d664fcae57189816a005b834482901f",
          "id": "6398b002-026e-4768-9c77-acf64195d1da",
          "timestamp": 1755644185333,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "51719d25-3c1d-4cce-b4fb-3b5b7ceb0686",
          "name": "Process Bank Transaction",
          "request": {
            "url": {
              "path": [
                "bank-simulator",
                "api",
                "real-transactions",
                "process"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "974a8bbd-345d-41b9-8ca3-cce249208801",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bank transaction processed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.transactionId).to.exist;",
                  "    pm.expect(response.bankReferenceId).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "c0b9f512-bb48-4512-b87e-db9ddfdebd02"
              }
            }
          ]
        },
        "parent": {
          "id": "b51a3f1c-b53a-4d40-a8ea-c08625cc0390",
          "name": "üè¶ Banking Simulation",
          "description": {
            "content": "Bank simulator for testing financial operations and UPI transactions",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "41cca3d7-8664-41fe-a37a-ce9bd35cc394",
              "name": "Bank Simulator Health",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "9b2fbe89-feb0-4d9c-aebf-4b3bebdd8d2a",
              "name": "List Banks",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "banks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22a36c7d-167e-4169-9f7c-86385617dce1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Banks list retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "    pm.expect(response.length).to.be.greaterThan(0);",
                      "    ",
                      "    // Store first bank for testing",
                      "    if (response.length > 0) {",
                      "        pm.environment.set('test_bank_code', response[0].code);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "d9d3b69e-33a4-489f-9c58-8b7e9c32fec7"
                  }
                }
              ]
            },
            {
              "id": "51719d25-3c1d-4cce-b4fb-3b5b7ceb0686",
              "name": "Process Bank Transaction",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "real-transactions",
                    "process"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "974a8bbd-345d-41b9-8ca3-cce249208801",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bank transaction processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.transactionId).to.exist;",
                      "    pm.expect(response.bankReferenceId).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c0b9f512-bb48-4512-b87e-db9ddfdebd02"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d7f58240-2193-4654-aaad-40c183ff3c23",
          "length": 32,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f5a37f6b-a38c-40bf-aeb4-61e937fef550",
          "scriptId": "974a8bbd-345d-41b9-8ca3-cce249208801",
          "execution": "c0b9f512-bb48-4512-b87e-db9ddfdebd02"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "70f18d92-3fa4-4857-b9dc-b9e9876d6ba6",
          "timestamp": 1755644185351,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "11b98eef-35b6-4983-bc0e-292698adeac0",
          "name": "UPI Core Health",
          "request": {
            "url": {
              "path": [
                "upi-core",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "5941cb1c-382d-4b74-9b9b-fa2f0b49624a",
          "name": "üîÑ UPI Core",
          "description": {
            "content": "UPI transaction processing and VPA management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "11b98eef-35b6-4983-bc0e-292698adeac0",
              "name": "UPI Core Health",
              "request": {
                "url": {
                  "path": [
                    "upi-core",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "9ef4d426-da88-475f-806f-6f61a51a58f5",
              "name": "Process UPI Transaction",
              "request": {
                "url": {
                  "path": [
                    "upi-core",
                    "upi",
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"transactionId\": \"UPI{{$randomInt}}\",\n  \"payerVpa\": \"test@paytm\",\n  \"payeeVpa\": \"merchant@phonepe\",\n  \"amountPaisa\": 50000,\n  \"type\": \"P2M\",\n  \"reference\": \"Test UPI payment\",\n  \"payerBankCode\": \"HDFC\",\n  \"payeeBankCode\": \"ICICI\",\n  \"digitalSignature\": \"SHA256:test-signature\",\n  \"initiatedAt\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67483a5d-0a54-4c82-8576-07748fb3c8d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('UPI transaction processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.transactionId).to.exist;",
                      "    pm.expect(response.rrn).to.exist;",
                      "    pm.expect(response.status).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "b7990fd6-1b31-46ae-9cb6-7f355c2ce69c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "eaaf681e-0f52-4e33-9d44-322139b730f2",
          "length": 32,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "89b61d9f-e421-4011-8899-0daca12d745b",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "5b6f53fe-8020-437b-934d-09cd1ab432d1",
          "timestamp": 1755644185365,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "9ef4d426-da88-475f-806f-6f61a51a58f5",
          "name": "Process UPI Transaction",
          "request": {
            "url": {
              "path": [
                "upi-core",
                "upi",
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"UPI{{$randomInt}}\",\n  \"payerVpa\": \"test@paytm\",\n  \"payeeVpa\": \"merchant@phonepe\",\n  \"amountPaisa\": 50000,\n  \"type\": \"P2M\",\n  \"reference\": \"Test UPI payment\",\n  \"payerBankCode\": \"HDFC\",\n  \"payeeBankCode\": \"ICICI\",\n  \"digitalSignature\": \"SHA256:test-signature\",\n  \"initiatedAt\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "67483a5d-0a54-4c82-8576-07748fb3c8d7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('UPI transaction processed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.transactionId).to.exist;",
                  "    pm.expect(response.rrn).to.exist;",
                  "    pm.expect(response.status).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "b7990fd6-1b31-46ae-9cb6-7f355c2ce69c"
              }
            }
          ]
        },
        "parent": {
          "id": "5941cb1c-382d-4b74-9b9b-fa2f0b49624a",
          "name": "üîÑ UPI Core",
          "description": {
            "content": "UPI transaction processing and VPA management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "11b98eef-35b6-4983-bc0e-292698adeac0",
              "name": "UPI Core Health",
              "request": {
                "url": {
                  "path": [
                    "upi-core",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "9ef4d426-da88-475f-806f-6f61a51a58f5",
              "name": "Process UPI Transaction",
              "request": {
                "url": {
                  "path": [
                    "upi-core",
                    "upi",
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"transactionId\": \"UPI{{$randomInt}}\",\n  \"payerVpa\": \"test@paytm\",\n  \"payeeVpa\": \"merchant@phonepe\",\n  \"amountPaisa\": 50000,\n  \"type\": \"P2M\",\n  \"reference\": \"Test UPI payment\",\n  \"payerBankCode\": \"HDFC\",\n  \"payeeBankCode\": \"ICICI\",\n  \"digitalSignature\": \"SHA256:test-signature\",\n  \"initiatedAt\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67483a5d-0a54-4c82-8576-07748fb3c8d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('UPI transaction processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.transactionId).to.exist;",
                      "    pm.expect(response.rrn).to.exist;",
                      "    pm.expect(response.status).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "b7990fd6-1b31-46ae-9cb6-7f355c2ce69c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f4075df0-00df-41f9-9fa4-0a3864cf4d9d",
          "length": 32,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a53376b6-00bf-4e85-ac91-4e3c8da910b6",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "UPI transaction processed",
          "message": "expected undefined to exist",
          "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:20)",
          "checksum": "3b830904845c3568945cb6c02069ecff",
          "id": "742e9673-3af3-4f9b-84a8-84d0b0118e36",
          "timestamp": 1755644185367,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9ef4d426-da88-475f-806f-6f61a51a58f5",
          "name": "Process UPI Transaction",
          "request": {
            "url": {
              "path": [
                "upi-core",
                "upi",
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"UPI{{$randomInt}}\",\n  \"payerVpa\": \"test@paytm\",\n  \"payeeVpa\": \"merchant@phonepe\",\n  \"amountPaisa\": 50000,\n  \"type\": \"P2M\",\n  \"reference\": \"Test UPI payment\",\n  \"payerBankCode\": \"HDFC\",\n  \"payeeBankCode\": \"ICICI\",\n  \"digitalSignature\": \"SHA256:test-signature\",\n  \"initiatedAt\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "67483a5d-0a54-4c82-8576-07748fb3c8d7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('UPI transaction processed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.transactionId).to.exist;",
                  "    pm.expect(response.rrn).to.exist;",
                  "    pm.expect(response.status).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "b7990fd6-1b31-46ae-9cb6-7f355c2ce69c"
              }
            }
          ]
        },
        "parent": {
          "id": "5941cb1c-382d-4b74-9b9b-fa2f0b49624a",
          "name": "üîÑ UPI Core",
          "description": {
            "content": "UPI transaction processing and VPA management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "11b98eef-35b6-4983-bc0e-292698adeac0",
              "name": "UPI Core Health",
              "request": {
                "url": {
                  "path": [
                    "upi-core",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "9ef4d426-da88-475f-806f-6f61a51a58f5",
              "name": "Process UPI Transaction",
              "request": {
                "url": {
                  "path": [
                    "upi-core",
                    "upi",
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"transactionId\": \"UPI{{$randomInt}}\",\n  \"payerVpa\": \"test@paytm\",\n  \"payeeVpa\": \"merchant@phonepe\",\n  \"amountPaisa\": 50000,\n  \"type\": \"P2M\",\n  \"reference\": \"Test UPI payment\",\n  \"payerBankCode\": \"HDFC\",\n  \"payeeBankCode\": \"ICICI\",\n  \"digitalSignature\": \"SHA256:test-signature\",\n  \"initiatedAt\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67483a5d-0a54-4c82-8576-07748fb3c8d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('UPI transaction processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.transactionId).to.exist;",
                      "    pm.expect(response.rrn).to.exist;",
                      "    pm.expect(response.status).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "b7990fd6-1b31-46ae-9cb6-7f355c2ce69c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f4075df0-00df-41f9-9fa4-0a3864cf4d9d",
          "length": 32,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a53376b6-00bf-4e85-ac91-4e3c8da910b6",
          "scriptId": "67483a5d-0a54-4c82-8576-07748fb3c8d7",
          "execution": "b7990fd6-1b31-46ae-9cb6-7f355c2ce69c"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "f9999b33-f2d9-4f6c-8f92-4dc6326fc3be",
          "timestamp": 1755644185382,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "18ce1d08-463f-4cc8-a5d6-8efd5c6cd121",
          "name": "Analytics Health",
          "request": {
            "url": {
              "path": [
                "analytics",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "2ec201d8-f9a8-431f-ac46-7f14e8e8ac36",
          "name": "üìä Analytics & Tracking",
          "description": {
            "content": "Analytics data collection and reporting",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "18ce1d08-463f-4cc8-a5d6-8efd5c6cd121",
              "name": "Analytics Health",
              "request": {
                "url": {
                  "path": [
                    "analytics",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "43661cf3-e89b-4e6d-828a-b1400f934495",
              "name": "Track Event",
              "request": {
                "url": {
                  "path": [
                    "analytics",
                    "api",
                    "{{api_version}}",
                    "track"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"event\": \"api_test_event\",\n  \"userId\": \"{{test_user_id}}\",\n  \"properties\": {\n    \"source\": \"postman\",\n    \"testId\": \"{{correlationId}}\",\n    \"timestamp\": \"{{$isoTimestamp}}\",\n    \"userAgent\": \"Postman/API-Test\"\n  },\n  \"context\": {\n    \"ip\": \"127.0.0.1\",\n    \"userAgent\": \"Postman API Testing Suite\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80e037c1-5770-43c5-8378-a6ba07e8aabd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Event tracked successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "314b991e-f720-40b5-8d8b-20336b1fb852"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "62bf1319-8f44-4a06-aad6-d49d830e6fb0",
          "length": 32,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9bf62926-c105-49b0-b2da-e0d0848c39d0",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "aa83a1e6-8b47-4628-851b-10aba1aa288a",
          "timestamp": 1755644185398,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "43661cf3-e89b-4e6d-828a-b1400f934495",
          "name": "Track Event",
          "request": {
            "url": {
              "path": [
                "analytics",
                "api",
                "{{api_version}}",
                "track"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event\": \"api_test_event\",\n  \"userId\": \"{{test_user_id}}\",\n  \"properties\": {\n    \"source\": \"postman\",\n    \"testId\": \"{{correlationId}}\",\n    \"timestamp\": \"{{$isoTimestamp}}\",\n    \"userAgent\": \"Postman/API-Test\"\n  },\n  \"context\": {\n    \"ip\": \"127.0.0.1\",\n    \"userAgent\": \"Postman API Testing Suite\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "80e037c1-5770-43c5-8378-a6ba07e8aabd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Event tracked successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "314b991e-f720-40b5-8d8b-20336b1fb852"
              }
            }
          ]
        },
        "parent": {
          "id": "2ec201d8-f9a8-431f-ac46-7f14e8e8ac36",
          "name": "üìä Analytics & Tracking",
          "description": {
            "content": "Analytics data collection and reporting",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "18ce1d08-463f-4cc8-a5d6-8efd5c6cd121",
              "name": "Analytics Health",
              "request": {
                "url": {
                  "path": [
                    "analytics",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "43661cf3-e89b-4e6d-828a-b1400f934495",
              "name": "Track Event",
              "request": {
                "url": {
                  "path": [
                    "analytics",
                    "api",
                    "{{api_version}}",
                    "track"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"event\": \"api_test_event\",\n  \"userId\": \"{{test_user_id}}\",\n  \"properties\": {\n    \"source\": \"postman\",\n    \"testId\": \"{{correlationId}}\",\n    \"timestamp\": \"{{$isoTimestamp}}\",\n    \"userAgent\": \"Postman/API-Test\"\n  },\n  \"context\": {\n    \"ip\": \"127.0.0.1\",\n    \"userAgent\": \"Postman API Testing Suite\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80e037c1-5770-43c5-8378-a6ba07e8aabd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Event tracked successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "314b991e-f720-40b5-8d8b-20336b1fb852"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "eb2a6633-b5c1-4975-9b84-f5d83b202e66",
          "length": 32,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "966d04fd-db86-4353-b8b5-ad7af53d9298",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "13c37eba-8046-4421-b1d4-08cde5891482",
          "timestamp": 1755644185418,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "c9882a62-216c-418e-9503-ce15b29b77bf",
          "name": "Notifications Health",
          "request": {
            "url": {
              "path": [
                "notifications",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "a0ba2560-b850-4fda-952b-3b3c4c8c549d",
          "name": "üîî Notifications",
          "description": {
            "content": "Notification service for email, SMS, and push notifications",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c9882a62-216c-418e-9503-ce15b29b77bf",
              "name": "Notifications Health",
              "request": {
                "url": {
                  "path": [
                    "notifications",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "ac3f0d0d-16bf-4e17-b094-a37118e53bd7",
              "name": "Send Email Notification",
              "request": {
                "url": {
                  "path": [
                    "notifications",
                    "api",
                    "{{api_version}}",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"email\",\n  \"recipient\": \"{{test_user_email}}\",\n  \"template\": \"test_notification\",\n  \"subject\": \"API Test Notification\",\n  \"data\": {\n    \"userName\": \"Test User\",\n    \"message\": \"This is a test notification from Postman API testing\",\n    \"testId\": \"{{correlationId}}\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9bf32bfa-59a3-43fe-abbc-98036a45b4bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Email notification sent', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "9e60ace4-555e-4741-8686-76057d500581"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "486c0316-76af-4f3b-a77c-23ce505a999c",
          "length": 32,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8b008b71-9b41-4c5d-8f42-1b290e61aad8",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "d3f6d9af-1c62-4d06-bfcb-a9808117a8a2",
          "timestamp": 1755644185439,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "ac3f0d0d-16bf-4e17-b094-a37118e53bd7",
          "name": "Send Email Notification",
          "request": {
            "url": {
              "path": [
                "notifications",
                "api",
                "{{api_version}}",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"email\",\n  \"recipient\": \"{{test_user_email}}\",\n  \"template\": \"test_notification\",\n  \"subject\": \"API Test Notification\",\n  \"data\": {\n    \"userName\": \"Test User\",\n    \"message\": \"This is a test notification from Postman API testing\",\n    \"testId\": \"{{correlationId}}\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9bf32bfa-59a3-43fe-abbc-98036a45b4bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Email notification sent', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "9e60ace4-555e-4741-8686-76057d500581"
              }
            }
          ]
        },
        "parent": {
          "id": "a0ba2560-b850-4fda-952b-3b3c4c8c549d",
          "name": "üîî Notifications",
          "description": {
            "content": "Notification service for email, SMS, and push notifications",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c9882a62-216c-418e-9503-ce15b29b77bf",
              "name": "Notifications Health",
              "request": {
                "url": {
                  "path": [
                    "notifications",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "ac3f0d0d-16bf-4e17-b094-a37118e53bd7",
              "name": "Send Email Notification",
              "request": {
                "url": {
                  "path": [
                    "notifications",
                    "api",
                    "{{api_version}}",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"email\",\n  \"recipient\": \"{{test_user_email}}\",\n  \"template\": \"test_notification\",\n  \"subject\": \"API Test Notification\",\n  \"data\": {\n    \"userName\": \"Test User\",\n    \"message\": \"This is a test notification from Postman API testing\",\n    \"testId\": \"{{correlationId}}\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9bf32bfa-59a3-43fe-abbc-98036a45b4bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Email notification sent', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "9e60ace4-555e-4741-8686-76057d500581"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c6ee3f00-be2e-4113-b96e-95143273c94b",
          "length": 32,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "89fafd3e-9084-4f6d-a8d5-ad58a44ac6b2",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Email notification sent",
          "message": "expected undefined to be true",
          "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:1:24)",
          "checksum": "eabfd423397f712b82b6aa8282cf7672",
          "id": "4d63c0b4-c08a-4937-9433-b0a24b79529f",
          "timestamp": 1755644185443,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ac3f0d0d-16bf-4e17-b094-a37118e53bd7",
          "name": "Send Email Notification",
          "request": {
            "url": {
              "path": [
                "notifications",
                "api",
                "{{api_version}}",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"email\",\n  \"recipient\": \"{{test_user_email}}\",\n  \"template\": \"test_notification\",\n  \"subject\": \"API Test Notification\",\n  \"data\": {\n    \"userName\": \"Test User\",\n    \"message\": \"This is a test notification from Postman API testing\",\n    \"testId\": \"{{correlationId}}\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9bf32bfa-59a3-43fe-abbc-98036a45b4bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Email notification sent', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "9e60ace4-555e-4741-8686-76057d500581"
              }
            }
          ]
        },
        "parent": {
          "id": "a0ba2560-b850-4fda-952b-3b3c4c8c549d",
          "name": "üîî Notifications",
          "description": {
            "content": "Notification service for email, SMS, and push notifications",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c9882a62-216c-418e-9503-ce15b29b77bf",
              "name": "Notifications Health",
              "request": {
                "url": {
                  "path": [
                    "notifications",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "ac3f0d0d-16bf-4e17-b094-a37118e53bd7",
              "name": "Send Email Notification",
              "request": {
                "url": {
                  "path": [
                    "notifications",
                    "api",
                    "{{api_version}}",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"email\",\n  \"recipient\": \"{{test_user_email}}\",\n  \"template\": \"test_notification\",\n  \"subject\": \"API Test Notification\",\n  \"data\": {\n    \"userName\": \"Test User\",\n    \"message\": \"This is a test notification from Postman API testing\",\n    \"testId\": \"{{correlationId}}\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9bf32bfa-59a3-43fe-abbc-98036a45b4bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Email notification sent', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "9e60ace4-555e-4741-8686-76057d500581"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c6ee3f00-be2e-4113-b96e-95143273c94b",
          "length": 32,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "89fafd3e-9084-4f6d-a8d5-ad58a44ac6b2",
          "scriptId": "9bf32bfa-59a3-43fe-abbc-98036a45b4bc",
          "execution": "9e60ace4-555e-4741-8686-76057d500581"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "a3c0cd53-62b5-4f42-a4bc-2b83e759f1b3",
          "timestamp": 1755644185464,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "a93015ab-7321-4b1c-a442-5a2ddcb48a8e",
          "name": "Live Classes Health",
          "request": {
            "url": {
              "path": [
                "live-classes",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "8860ff0e-274f-4b2b-b1a6-ed3fd73e4ccc",
          "name": "üéì Live Classes",
          "description": {
            "content": "Live streaming and class management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a93015ab-7321-4b1c-a442-5a2ddcb48a8e",
              "name": "Live Classes Health",
              "request": {
                "url": {
                  "path": [
                    "live-classes",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "0e0dc8f6-78ea-4c72-b921-f9c1d9f66844",
              "name": "Create Live Session",
              "request": {
                "url": {
                  "path": [
                    "live-classes",
                    "api",
                    "{{api_version}}",
                    "sessions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Live Session\",\n  \"description\": \"API testing live session\",\n  \"scheduledAt\": \"{{$isoTimestamp}}\",\n  \"duration\": 3600,\n  \"maxParticipants\": 100,\n  \"isRecorded\": true,\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f62a457-4ba1-4be4-878f-5e9f929f831e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Live session created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.streamUrl).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "5a02c27f-7d21-4f2a-a5be-53f9365cf539"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7392dc5b-aa1e-451f-bbe1-bc7f1bba344c",
          "length": 32,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b384e856-dafc-418a-9aa7-b2e0c6a9d65b",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "06ec62b0-0bfa-4fc3-8b0d-a7e4e0db270c",
          "timestamp": 1755644185483,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "0e0dc8f6-78ea-4c72-b921-f9c1d9f66844",
          "name": "Create Live Session",
          "request": {
            "url": {
              "path": [
                "live-classes",
                "api",
                "{{api_version}}",
                "sessions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Live Session\",\n  \"description\": \"API testing live session\",\n  \"scheduledAt\": \"{{$isoTimestamp}}\",\n  \"duration\": 3600,\n  \"maxParticipants\": 100,\n  \"isRecorded\": true,\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f62a457-4ba1-4be4-878f-5e9f929f831e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Live session created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.streamUrl).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "5a02c27f-7d21-4f2a-a5be-53f9365cf539"
              }
            }
          ]
        },
        "parent": {
          "id": "8860ff0e-274f-4b2b-b1a6-ed3fd73e4ccc",
          "name": "üéì Live Classes",
          "description": {
            "content": "Live streaming and class management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a93015ab-7321-4b1c-a442-5a2ddcb48a8e",
              "name": "Live Classes Health",
              "request": {
                "url": {
                  "path": [
                    "live-classes",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "0e0dc8f6-78ea-4c72-b921-f9c1d9f66844",
              "name": "Create Live Session",
              "request": {
                "url": {
                  "path": [
                    "live-classes",
                    "api",
                    "{{api_version}}",
                    "sessions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Live Session\",\n  \"description\": \"API testing live session\",\n  \"scheduledAt\": \"{{$isoTimestamp}}\",\n  \"duration\": 3600,\n  \"maxParticipants\": 100,\n  \"isRecorded\": true,\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f62a457-4ba1-4be4-878f-5e9f929f831e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Live session created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.streamUrl).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "5a02c27f-7d21-4f2a-a5be-53f9365cf539"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f36fa626-8262-43d3-9654-23c88e468522",
          "length": 32,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "aa03d724-adb0-4604-9d37-107632878137",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Live session created",
          "message": "expected response to have status code 201 but got 200",
          "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:26)",
          "checksum": "fc0d67e7fd42589442156a85c792a684",
          "id": "6c8b7137-6f28-4097-bb19-2168ece64067",
          "timestamp": 1755644185484,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0e0dc8f6-78ea-4c72-b921-f9c1d9f66844",
          "name": "Create Live Session",
          "request": {
            "url": {
              "path": [
                "live-classes",
                "api",
                "{{api_version}}",
                "sessions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Live Session\",\n  \"description\": \"API testing live session\",\n  \"scheduledAt\": \"{{$isoTimestamp}}\",\n  \"duration\": 3600,\n  \"maxParticipants\": 100,\n  \"isRecorded\": true,\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f62a457-4ba1-4be4-878f-5e9f929f831e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Live session created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.streamUrl).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "5a02c27f-7d21-4f2a-a5be-53f9365cf539"
              }
            }
          ]
        },
        "parent": {
          "id": "8860ff0e-274f-4b2b-b1a6-ed3fd73e4ccc",
          "name": "üéì Live Classes",
          "description": {
            "content": "Live streaming and class management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a93015ab-7321-4b1c-a442-5a2ddcb48a8e",
              "name": "Live Classes Health",
              "request": {
                "url": {
                  "path": [
                    "live-classes",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "0e0dc8f6-78ea-4c72-b921-f9c1d9f66844",
              "name": "Create Live Session",
              "request": {
                "url": {
                  "path": [
                    "live-classes",
                    "api",
                    "{{api_version}}",
                    "sessions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Live Session\",\n  \"description\": \"API testing live session\",\n  \"scheduledAt\": \"{{$isoTimestamp}}\",\n  \"duration\": 3600,\n  \"maxParticipants\": 100,\n  \"isRecorded\": true,\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f62a457-4ba1-4be4-878f-5e9f929f831e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Live session created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.streamUrl).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "5a02c27f-7d21-4f2a-a5be-53f9365cf539"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f36fa626-8262-43d3-9654-23c88e468522",
          "length": 32,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "aa03d724-adb0-4604-9d37-107632878137",
          "scriptId": "5f62a457-4ba1-4be4-878f-5e9f929f831e",
          "execution": "5a02c27f-7d21-4f2a-a5be-53f9365cf539"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "7b803479-80c8-4f51-9593-bcaf3c66c58d",
          "timestamp": 1755644185496,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "158820ae-0a38-4c81-b862-82e7549b7e0e",
          "name": "LLM Tutor Health",
          "request": {
            "url": {
              "path": [
                "llm-tutor",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "bbd2a212-cdb8-4239-b500-e4631d5f207f",
          "name": "ü§ñ LLM Tutor",
          "description": {
            "content": "AI-powered tutoring and educational assistance",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "158820ae-0a38-4c81-b862-82e7549b7e0e",
              "name": "LLM Tutor Health",
              "request": {
                "url": {
                  "path": [
                    "llm-tutor",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "b61a077b-99b0-4fb5-92db-f6033253826c",
              "name": "Ask Question to Tutor",
              "request": {
                "url": {
                  "path": [
                    "llm-tutor",
                    "api",
                    "{{api_version}}",
                    "ask"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"question\": \"Explain the concept of machine learning in simple terms\",\n  \"context\": {\n    \"subject\": \"computer-science\",\n    \"level\": \"beginner\",\n    \"userId\": \"{{test_user_id}}\"\n  },\n  \"preferences\": {\n    \"responseLength\": \"medium\",\n    \"includeExamples\": true\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f8c7979-0925-42cc-9ff1-e3ff58abadff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Tutor response received', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.answer).to.exist;",
                      "    pm.expect(response.confidence).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "d05e71c6-1c4b-43b3-9d78-2a86c61b1d4a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f7d62a05-b41d-4416-be65-61d32a7eb6f8",
          "length": 32,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ea44656f-4588-455b-8542-7b694b194f9a",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "9cd077f7-1644-433b-873f-605e547ab278",
          "timestamp": 1755644185509,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "b61a077b-99b0-4fb5-92db-f6033253826c",
          "name": "Ask Question to Tutor",
          "request": {
            "url": {
              "path": [
                "llm-tutor",
                "api",
                "{{api_version}}",
                "ask"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"Explain the concept of machine learning in simple terms\",\n  \"context\": {\n    \"subject\": \"computer-science\",\n    \"level\": \"beginner\",\n    \"userId\": \"{{test_user_id}}\"\n  },\n  \"preferences\": {\n    \"responseLength\": \"medium\",\n    \"includeExamples\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f8c7979-0925-42cc-9ff1-e3ff58abadff",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Tutor response received', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.answer).to.exist;",
                  "    pm.expect(response.confidence).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "d05e71c6-1c4b-43b3-9d78-2a86c61b1d4a"
              }
            }
          ]
        },
        "parent": {
          "id": "bbd2a212-cdb8-4239-b500-e4631d5f207f",
          "name": "ü§ñ LLM Tutor",
          "description": {
            "content": "AI-powered tutoring and educational assistance",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "158820ae-0a38-4c81-b862-82e7549b7e0e",
              "name": "LLM Tutor Health",
              "request": {
                "url": {
                  "path": [
                    "llm-tutor",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "b61a077b-99b0-4fb5-92db-f6033253826c",
              "name": "Ask Question to Tutor",
              "request": {
                "url": {
                  "path": [
                    "llm-tutor",
                    "api",
                    "{{api_version}}",
                    "ask"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"question\": \"Explain the concept of machine learning in simple terms\",\n  \"context\": {\n    \"subject\": \"computer-science\",\n    \"level\": \"beginner\",\n    \"userId\": \"{{test_user_id}}\"\n  },\n  \"preferences\": {\n    \"responseLength\": \"medium\",\n    \"includeExamples\": true\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f8c7979-0925-42cc-9ff1-e3ff58abadff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Tutor response received', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.answer).to.exist;",
                      "    pm.expect(response.confidence).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "d05e71c6-1c4b-43b3-9d78-2a86c61b1d4a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8a83edb4-2333-4d43-af60-8894c258cf4d",
          "length": 32,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "14baf36e-bb8c-4168-93f8-881d12cc4cf0",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Tutor response received",
          "message": "expected undefined to exist",
          "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:28)",
          "checksum": "d09774fb9542a06398179dd381356c70",
          "id": "e0fdd0e4-37fe-426f-bbe7-8237dc7265e4",
          "timestamp": 1755644185510,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b61a077b-99b0-4fb5-92db-f6033253826c",
          "name": "Ask Question to Tutor",
          "request": {
            "url": {
              "path": [
                "llm-tutor",
                "api",
                "{{api_version}}",
                "ask"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"Explain the concept of machine learning in simple terms\",\n  \"context\": {\n    \"subject\": \"computer-science\",\n    \"level\": \"beginner\",\n    \"userId\": \"{{test_user_id}}\"\n  },\n  \"preferences\": {\n    \"responseLength\": \"medium\",\n    \"includeExamples\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f8c7979-0925-42cc-9ff1-e3ff58abadff",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Tutor response received', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.answer).to.exist;",
                  "    pm.expect(response.confidence).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "d05e71c6-1c4b-43b3-9d78-2a86c61b1d4a"
              }
            }
          ]
        },
        "parent": {
          "id": "bbd2a212-cdb8-4239-b500-e4631d5f207f",
          "name": "ü§ñ LLM Tutor",
          "description": {
            "content": "AI-powered tutoring and educational assistance",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "158820ae-0a38-4c81-b862-82e7549b7e0e",
              "name": "LLM Tutor Health",
              "request": {
                "url": {
                  "path": [
                    "llm-tutor",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "b61a077b-99b0-4fb5-92db-f6033253826c",
              "name": "Ask Question to Tutor",
              "request": {
                "url": {
                  "path": [
                    "llm-tutor",
                    "api",
                    "{{api_version}}",
                    "ask"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"question\": \"Explain the concept of machine learning in simple terms\",\n  \"context\": {\n    \"subject\": \"computer-science\",\n    \"level\": \"beginner\",\n    \"userId\": \"{{test_user_id}}\"\n  },\n  \"preferences\": {\n    \"responseLength\": \"medium\",\n    \"includeExamples\": true\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f8c7979-0925-42cc-9ff1-e3ff58abadff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Tutor response received', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.answer).to.exist;",
                      "    pm.expect(response.confidence).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "d05e71c6-1c4b-43b3-9d78-2a86c61b1d4a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8a83edb4-2333-4d43-af60-8894c258cf4d",
          "length": 32,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "14baf36e-bb8c-4168-93f8-881d12cc4cf0",
          "scriptId": "4f8c7979-0925-42cc-9ff1-e3ff58abadff",
          "execution": "d05e71c6-1c4b-43b3-9d78-2a86c61b1d4a"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "13af498e-60bf-41c9-9986-b5b081be5c5e",
          "timestamp": 1755644185525,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "d914fa24-7ab6-4d52-9ac1-25b02cee2e2f",
          "name": "Recommendations Health",
          "request": {
            "url": {
              "path": [
                "recommendations",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "57e3dfa7-306a-47e0-9e45-c7a5dd088407",
          "name": "üìà Recommendations",
          "description": {
            "content": "AI-powered content and course recommendations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d914fa24-7ab6-4d52-9ac1-25b02cee2e2f",
              "name": "Recommendations Health",
              "request": {
                "url": {
                  "path": [
                    "recommendations",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4b268a95-0c88-48ba-bec7-d6f075ca6a76",
              "name": "Get User Recommendations",
              "request": {
                "url": {
                  "path": [
                    "recommendations",
                    "api",
                    "{{api_version}}",
                    "users",
                    "{{test_user_id}}",
                    "recommendations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "courses"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b12c8011-b38b-4899-b858-3187e4541f2f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Recommendations retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.recommendations).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "09e3a814-9bd5-4409-b5b5-fe001f9284cb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "18d6fa3b-2020-432c-8cbe-8472919602f8",
          "length": 32,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ca3c6fe3-d628-4b78-b396-c58687d619c0",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "5ec2b225-9dd8-455f-9156-d55ce41ef6e5",
          "timestamp": 1755644185537,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "4b268a95-0c88-48ba-bec7-d6f075ca6a76",
          "name": "Get User Recommendations",
          "request": {
            "url": {
              "path": [
                "recommendations",
                "api",
                "{{api_version}}",
                "users",
                "{{test_user_id}}",
                "recommendations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "courses"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b12c8011-b38b-4899-b858-3187e4541f2f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Recommendations retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.recommendations).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "09e3a814-9bd5-4409-b5b5-fe001f9284cb"
              }
            }
          ]
        },
        "parent": {
          "id": "57e3dfa7-306a-47e0-9e45-c7a5dd088407",
          "name": "üìà Recommendations",
          "description": {
            "content": "AI-powered content and course recommendations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d914fa24-7ab6-4d52-9ac1-25b02cee2e2f",
              "name": "Recommendations Health",
              "request": {
                "url": {
                  "path": [
                    "recommendations",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4b268a95-0c88-48ba-bec7-d6f075ca6a76",
              "name": "Get User Recommendations",
              "request": {
                "url": {
                  "path": [
                    "recommendations",
                    "api",
                    "{{api_version}}",
                    "users",
                    "{{test_user_id}}",
                    "recommendations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "courses"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b12c8011-b38b-4899-b858-3187e4541f2f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Recommendations retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.recommendations).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "09e3a814-9bd5-4409-b5b5-fe001f9284cb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "91310196-1813-41ca-9fff-edb1a526cab0",
          "length": 32,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0184e97f-0695-4090-850f-e607a573feb2",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Recommendations retrieved",
          "message": "expected undefined to be an array",
          "stack": "AssertionError: expected undefined to be an array\n   at Object.eval sandbox-script.js:1:30)",
          "checksum": "86d0870bac5462a4d21b492936d1e05c",
          "id": "ed76a6b5-e667-4566-a02a-5a880dcfde45",
          "timestamp": 1755644185538,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 30,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4b268a95-0c88-48ba-bec7-d6f075ca6a76",
          "name": "Get User Recommendations",
          "request": {
            "url": {
              "path": [
                "recommendations",
                "api",
                "{{api_version}}",
                "users",
                "{{test_user_id}}",
                "recommendations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "courses"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b12c8011-b38b-4899-b858-3187e4541f2f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Recommendations retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.recommendations).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "09e3a814-9bd5-4409-b5b5-fe001f9284cb"
              }
            }
          ]
        },
        "parent": {
          "id": "57e3dfa7-306a-47e0-9e45-c7a5dd088407",
          "name": "üìà Recommendations",
          "description": {
            "content": "AI-powered content and course recommendations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d914fa24-7ab6-4d52-9ac1-25b02cee2e2f",
              "name": "Recommendations Health",
              "request": {
                "url": {
                  "path": [
                    "recommendations",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "4b268a95-0c88-48ba-bec7-d6f075ca6a76",
              "name": "Get User Recommendations",
              "request": {
                "url": {
                  "path": [
                    "recommendations",
                    "api",
                    "{{api_version}}",
                    "users",
                    "{{test_user_id}}",
                    "recommendations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "courses"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b12c8011-b38b-4899-b858-3187e4541f2f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Recommendations retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.recommendations).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "09e3a814-9bd5-4409-b5b5-fe001f9284cb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "91310196-1813-41ca-9fff-edb1a526cab0",
          "length": 32,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0184e97f-0695-4090-850f-e607a573feb2",
          "scriptId": "b12c8011-b38b-4899-b858-3187e4541f2f",
          "execution": "09e3a814-9bd5-4409-b5b5-fe001f9284cb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "31fea079-db82-478f-9254-12d0aeecc48b",
          "timestamp": 1755644185551,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "c4a6dba2-b93c-4456-9dc2-c5b9e6374e22",
          "name": "Admin Dashboard Health",
          "request": {
            "url": {
              "path": [
                "admin",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "487eb6b0-e81a-48e7-b41c-39c1913f5bf9",
          "name": "üîß Admin Operations",
          "description": {
            "content": "Administrative operations and system management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c4a6dba2-b93c-4456-9dc2-c5b9e6374e22",
              "name": "Admin Dashboard Health",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "5c535f00-20ae-42c2-a34e-9eaeb3c899c8",
              "name": "Get System Status",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "api",
                    "{{api_version}}",
                    "system",
                    "status"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3e41b1c-4e51-4dcd-9494-e3cbc4498408",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('System status retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.services).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "1f0ae9e3-6c7a-44f4-8ba3-f453274ae389"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "133d9aa6-c55e-425b-b4f6-a4b8c4216941",
          "length": 32,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2ba8412d-13bb-4c6b-9510-e85d7ba85ac1",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "08bfad15-78bb-460b-8e3a-9540f1460d06",
          "timestamp": 1755644185562,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "5c535f00-20ae-42c2-a34e-9eaeb3c899c8",
          "name": "Get System Status",
          "request": {
            "url": {
              "path": [
                "admin",
                "api",
                "{{api_version}}",
                "system",
                "status"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3e41b1c-4e51-4dcd-9494-e3cbc4498408",
                "type": "text/javascript",
                "exec": [
                  "pm.test('System status retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.services).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "1f0ae9e3-6c7a-44f4-8ba3-f453274ae389"
              }
            }
          ]
        },
        "parent": {
          "id": "487eb6b0-e81a-48e7-b41c-39c1913f5bf9",
          "name": "üîß Admin Operations",
          "description": {
            "content": "Administrative operations and system management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c4a6dba2-b93c-4456-9dc2-c5b9e6374e22",
              "name": "Admin Dashboard Health",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "5c535f00-20ae-42c2-a34e-9eaeb3c899c8",
              "name": "Get System Status",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "api",
                    "{{api_version}}",
                    "system",
                    "status"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3e41b1c-4e51-4dcd-9494-e3cbc4498408",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('System status retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.services).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "1f0ae9e3-6c7a-44f4-8ba3-f453274ae389"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cf3d9798-0fab-4119-b13e-04d64a18acc4",
          "length": 32,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "366b5249-0b40-44ea-84cc-bde5ca7676b6",
          "scriptId": "42b05986-bd70-4b93-8f66-d65852c0a1ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "System status retrieved",
          "message": "expected undefined to exist",
          "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:32)",
          "checksum": "46a808d2dde35a6620a2393af326586e",
          "id": "d655e725-aabf-489a-8c95-0be13e97ddbd",
          "timestamp": 1755644185563,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5c535f00-20ae-42c2-a34e-9eaeb3c899c8",
          "name": "Get System Status",
          "request": {
            "url": {
              "path": [
                "admin",
                "api",
                "{{api_version}}",
                "system",
                "status"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3e41b1c-4e51-4dcd-9494-e3cbc4498408",
                "type": "text/javascript",
                "exec": [
                  "pm.test('System status retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.services).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "1f0ae9e3-6c7a-44f4-8ba3-f453274ae389"
              }
            }
          ]
        },
        "parent": {
          "id": "487eb6b0-e81a-48e7-b41c-39c1913f5bf9",
          "name": "üîß Admin Operations",
          "description": {
            "content": "Administrative operations and system management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c4a6dba2-b93c-4456-9dc2-c5b9e6374e22",
              "name": "Admin Dashboard Health",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "5c535f00-20ae-42c2-a34e-9eaeb3c899c8",
              "name": "Get System Status",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "api",
                    "{{api_version}}",
                    "system",
                    "status"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3e41b1c-4e51-4dcd-9494-e3cbc4498408",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('System status retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.services).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "1f0ae9e3-6c7a-44f4-8ba3-f453274ae389"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cf3d9798-0fab-4119-b13e-04d64a18acc4",
          "length": 32,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "366b5249-0b40-44ea-84cc-bde5ca7676b6",
          "scriptId": "d3e41b1c-4e51-4dcd-9494-e3cbc4498408",
          "execution": "1f0ae9e3-6c7a-44f4-8ba3-f453274ae389"
        }
      }
    ],
    "error": null
  }
}