{
  "collection": {
    "item": [
      {
        "id": "472a482a-de7b-4cd9-a581-618446294c40",
        "name": "üîê Authentication & Authorization",
        "description": {
          "content": "Identity service authentication flows, token management, and user operations",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "1e165b31-2c13-4079-aab2-f230294eaf81",
            "name": "Health Check",
            "request": {
              "url": {
                "path": [
                  "healthz"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "29ec1e58-028b-4c08-b6de-eba841614df1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('API Gateway is healthy', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.service).to.eql('api-gateway');",
                    "});"
                  ],
                  "_lastExecutionId": "bce6d647-d0d3-42ff-b745-e3b12ac262fb"
                }
              }
            ]
          },
          {
            "id": "916dcef0-626a-4b67-923e-a2615145615b",
            "name": "OIDC Discovery",
            "request": {
              "url": {
                "path": [
                  "identity",
                  ".well-known",
                  "openid-configuration"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3cea5814-a6a0-4abc-81ff-f25ca430ae85",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('OIDC Discovery successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.issuer).to.exist;",
                    "    pm.expect(response.authorization_endpoint).to.exist;",
                    "    pm.expect(response.token_endpoint).to.exist;",
                    "    pm.expect(response.jwks_uri).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "7c086d11-1e2f-4f17-ac06-8cf5f2a7f982"
                }
              }
            ]
          },
          {
            "id": "b8f1603e-cbd4-4844-bdc4-d8ff816143cc",
            "name": "Get JWKS",
            "request": {
              "url": {
                "path": [
                  "identity",
                  "oauth2",
                  "jwks"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "864ecea3-4abe-472f-935f-e542e2d6e2f7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('JWKS endpoint accessible', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.keys).to.be.an('array');",
                    "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                    "});"
                  ],
                  "_lastExecutionId": "54313b67-d913-4f28-965a-b8380e96600d"
                }
              }
            ]
          },
          {
            "id": "21c0bafe-a30e-454b-9db9-43e8167b70ca",
            "name": "Register User",
            "request": {
              "url": {
                "path": [
                  "identity",
                  "api",
                  "{{api_version}}",
                  "auth",
                  "register"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "X-Correlation-ID",
                  "value": "{{correlationId}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "43ad3938-004c-4979-91f0-76e28d33d572",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('User registration successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.user).to.exist;",
                    "    pm.expect(response.user.id).to.exist;",
                    "    pm.environment.set('test_user_id', response.user.id);",
                    "    pm.environment.set('test_user_email', response.user.email);",
                    "});"
                  ],
                  "_lastExecutionId": "f37a06a0-2766-489d-9382-797fdd928e8b"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "8ca1bbdb-bc8a-4c7f-8759-e81b6b3803f5",
                  "type": "text/javascript",
                  "exec": [
                    "// Generate unique test user email",
                    "const timestamp = Date.now();",
                    "const email = `test-${timestamp}@suuupra.com`;",
                    "pm.environment.set('test_email', email);"
                  ],
                  "_lastExecutionId": "11b4faef-8196-4475-aabb-733e61e17ea4"
                }
              }
            ]
          },
          {
            "id": "7d7aac3f-5793-44c7-b760-5257c7c8b81e",
            "name": "Login User",
            "request": {
              "url": {
                "path": [
                  "identity",
                  "api",
                  "{{api_version}}",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "eb67c67b-a780-42e8-8783-676f68c0c5c2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Login successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.accessToken).to.exist;",
                    "    pm.expect(response.refreshToken).to.exist;",
                    "    ",
                    "    // Store tokens",
                    "    pm.environment.set('access_token', response.accessToken);",
                    "    pm.environment.set('refresh_token', response.refreshToken);",
                    "    ",
                    "    // Calculate token expiry",
                    "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                    "    pm.environment.set('token_expiry', expiryTime.toString());",
                    "});"
                  ],
                  "_lastExecutionId": "55ad1812-6f5d-4399-85ce-07ea5bf3b42e"
                }
              }
            ]
          },
          {
            "id": "405aaee1-97f9-479e-b92f-40cd7f5681b6",
            "name": "Get Current User Profile",
            "request": {
              "url": {
                "path": [
                  "identity",
                  "api",
                  "{{api_version}}",
                  "users",
                  "me"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6d1dd2d3-8401-421e-b450-82b2b49113c7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('User profile retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.id).to.exist;",
                    "    pm.expect(response.email).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "7ff7e5d4-1762-4947-a88f-ec4a4975f0b1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0813b88a-b8bc-4b30-84b4-fe2824de5e20",
        "name": "üí≥ Payment Gateway",
        "description": {
          "content": "Payment processing, UPI transactions, and financial operations",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "96ead00b-f457-4c9c-ad2b-5fd02efe9ddb",
            "name": "Payment Gateway Health",
            "request": {
              "url": {
                "path": [
                  "payments",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f50b9f51-8f16-4588-8797-596a9cd310ab",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Payment Gateway is healthy', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "f20e1def-2eaa-4863-b7f8-c92a2cc143cd"
                }
              }
            ]
          },
          {
            "id": "25855755-4e59-46de-a5e2-88a533454952",
            "name": "Create Payment Intent",
            "request": {
              "url": {
                "path": [
                  "payments",
                  "api",
                  "{{api_version}}",
                  "intents"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                },
                {
                  "key": "Idempotency-Key",
                  "value": "idem-{{$randomUUID}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6d3c4cf5-74b2-4bdb-b836-02607c672a9a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Payment intent created', function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.id).to.exist;",
                    "    pm.expect(response.clientSecret).to.exist;",
                    "    pm.environment.set('payment_intent_id', response.id);",
                    "});"
                  ],
                  "_lastExecutionId": "834d8e54-3d9a-41d2-aedf-b465f8d3fe46"
                }
              }
            ]
          },
          {
            "id": "15481ace-3c98-4039-8818-5bda9f5fae81",
            "name": "Get Payment Intent",
            "request": {
              "url": {
                "path": [
                  "payments",
                  "api",
                  "{{api_version}}",
                  "intents",
                  "{{payment_intent_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ec00f6cb-3009-4b19-bb70-f4ad0d9d8199",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Payment intent retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                    "});"
                  ],
                  "_lastExecutionId": "1460f88e-918b-4398-9528-0d199543a79f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "406478f8-6bfc-4ff1-a3f0-59498126aca5",
        "name": "üè™ Commerce & Orders",
        "description": {
          "content": "E-commerce operations, shopping cart, and order management",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "e9e2baa6-53fc-4651-b1b3-e73c4b6f87c0",
            "name": "Commerce Health",
            "request": {
              "url": {
                "path": [
                  "commerce",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "2ad5c08a-e07f-4b8f-8401-b1e4a728f801",
            "name": "Create Shopping Cart",
            "request": {
              "url": {
                "path": [
                  "commerce",
                  "api",
                  "{{api_version}}",
                  "cart"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0a3dba5c-8938-4933-8738-e2633d13423a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Shopping cart created', function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.id).to.exist;",
                    "    pm.expect(response.items).to.be.an('array');",
                    "    pm.environment.set('cart_id', response.id);",
                    "});"
                  ],
                  "_lastExecutionId": "2fd7a848-07af-4459-a816-681ce2060a70"
                }
              }
            ]
          },
          {
            "id": "33c2074e-b94d-4734-a88c-5b4b015dffb8",
            "name": "Create Order",
            "request": {
              "url": {
                "path": [
                  "commerce",
                  "api",
                  "{{api_version}}",
                  "orders"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7ee74e60-5aa3-4a6c-b287-1e757e4c5529",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Order created successfully', function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.id).to.exist;",
                    "    pm.expect(response.status).to.exist;",
                    "    pm.environment.set('order_id', response.id);",
                    "});"
                  ],
                  "_lastExecutionId": "66ae44aa-4407-4fcd-baa8-2cdf9ad7c9af"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "08c24c93-361f-4817-bb9a-d0f2597a7260",
        "name": "üìö Content Management",
        "description": {
          "content": "Content creation, file uploads, and content workflow management",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "a2e396a9-dc94-48ed-a436-308ba999ee00",
            "name": "Content Service Health",
            "request": {
              "url": {
                "path": [
                  "content",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "26528526-e705-4d4b-ab0e-0d1e6c28e811",
            "name": "Create Content",
            "request": {
              "url": {
                "path": [
                  "content",
                  "api",
                  "{{api_version}}",
                  "content"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "acfa01f2-0dbc-4d50-b233-1f5948d4ea3c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Content created successfully', function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.id).to.exist;",
                    "    pm.expect(response.title).to.exist;",
                    "    pm.environment.set('content_id', response.id);",
                    "});"
                  ],
                  "_lastExecutionId": "760ec55d-fab9-421b-9394-71bc89923d04"
                }
              }
            ]
          },
          {
            "id": "073cdccb-b30c-486f-9b54-de09d536f662",
            "name": "Search Content",
            "request": {
              "url": {
                "path": [
                  "content",
                  "api",
                  "{{api_version}}",
                  "search"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "q",
                    "value": "machine learning"
                  },
                  {
                    "key": "limit",
                    "value": "10"
                  },
                  {
                    "key": "contentType",
                    "value": "article"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7d2fedd3-bf42-4a18-9d7d-6323411c3c84",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Content search successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.results).to.be.an('array');",
                    "    pm.expect(response.total).to.be.a('number');",
                    "});"
                  ],
                  "_lastExecutionId": "d6e38ead-0a8a-4b39-b373-63162f68c21a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9e0e11f3-ba7a-4afc-8b35-19f809f73d44",
        "name": "üè¶ Banking Simulation",
        "description": {
          "content": "Bank simulator for testing financial operations and UPI transactions",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "d3df01cc-ac18-4c1a-87a0-771460de2457",
            "name": "Bank Simulator Health",
            "request": {
              "url": {
                "path": [
                  "bank-simulator",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "dc3972e5-30c8-4338-9165-e1e05eb59b04",
            "name": "List Banks",
            "request": {
              "url": {
                "path": [
                  "bank-simulator",
                  "api",
                  "banks"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c299bc89-7bba-4aaf-b9cc-df021d14d906",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Banks list retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('array');",
                    "    pm.expect(response.length).to.be.greaterThan(0);",
                    "    ",
                    "    // Store first bank for testing",
                    "    if (response.length > 0) {",
                    "        pm.environment.set('test_bank_code', response[0].code);",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "961ccd6b-f4b7-43b4-8022-58e9cd21bda8"
                }
              }
            ]
          },
          {
            "id": "2794fb75-7c5e-4968-8217-5d8bd1aeeffd",
            "name": "Process Bank Transaction",
            "request": {
              "url": {
                "path": [
                  "bank-simulator",
                  "api",
                  "real-transactions",
                  "process"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "abd91106-ebcb-4e5d-9577-190805188610",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Bank transaction processed', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.success).to.be.true;",
                    "    pm.expect(response.transactionId).to.exist;",
                    "    pm.expect(response.bankReferenceId).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "c6cdd288-6b1b-4109-ab81-65ff34afc853"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4b9bb478-4396-4517-907e-4f09660dffd9",
        "name": "üîÑ UPI Core",
        "description": {
          "content": "UPI transaction processing and VPA management",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "e98ec437-a48b-40a2-a75d-3f4a22cb6561",
            "name": "UPI Core Health",
            "request": {
              "url": {
                "path": [
                  "upi-core",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "07014657-9b3e-430f-872b-db505b220daf",
            "name": "Process UPI Transaction",
            "request": {
              "url": {
                "path": [
                  "upi-core",
                  "upi",
                  "transactions"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"transactionId\": \"UPI{{$randomInt}}\",\n  \"payerVpa\": \"test@paytm\",\n  \"payeeVpa\": \"merchant@phonepe\",\n  \"amountPaisa\": 50000,\n  \"type\": \"P2M\",\n  \"reference\": \"Test UPI payment\",\n  \"payerBankCode\": \"HDFC\",\n  \"payeeBankCode\": \"ICICI\",\n  \"digitalSignature\": \"SHA256:test-signature\",\n  \"initiatedAt\": \"{{$isoTimestamp}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "784297c4-ab09-4085-b92b-cae5bca1e51d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('UPI transaction processed', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.transactionId).to.exist;",
                    "    pm.expect(response.rrn).to.exist;",
                    "    pm.expect(response.status).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "2deb4c4e-2198-4165-90ba-5efff78f88fc"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "53ba3cc7-673c-47a1-986c-08459dc6ddb9",
        "name": "üìä Analytics & Tracking",
        "description": {
          "content": "Analytics data collection and reporting",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "e97a6f76-2397-49b2-bef3-21f06f48a40a",
            "name": "Analytics Health",
            "request": {
              "url": {
                "path": [
                  "analytics",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "524f72ed-ef72-4071-8bad-f995bede011b",
            "name": "Track Event",
            "request": {
              "url": {
                "path": [
                  "analytics",
                  "api",
                  "{{api_version}}",
                  "track"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"event\": \"api_test_event\",\n  \"userId\": \"{{test_user_id}}\",\n  \"properties\": {\n    \"source\": \"postman\",\n    \"testId\": \"{{correlationId}}\",\n    \"timestamp\": \"{{$isoTimestamp}}\",\n    \"userAgent\": \"Postman/API-Test\"\n  },\n  \"context\": {\n    \"ip\": \"127.0.0.1\",\n    \"userAgent\": \"Postman API Testing Suite\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "aa00a37f-b605-47cc-8f04-5020990962f3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Event tracked successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "42115fb7-ef09-4871-bd4d-a99c903a93ff"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "01780c41-924f-49d7-90a2-76211a4909ba",
        "name": "üîî Notifications",
        "description": {
          "content": "Notification service for email, SMS, and push notifications",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "d273affe-384a-4f8d-84fa-2c8f33f8b7d6",
            "name": "Notifications Health",
            "request": {
              "url": {
                "path": [
                  "notifications",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "b1e30861-d1b7-4437-977f-4eb0cb27f36c",
            "name": "Send Email Notification",
            "request": {
              "url": {
                "path": [
                  "notifications",
                  "api",
                  "{{api_version}}",
                  "send"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"type\": \"email\",\n  \"recipient\": \"{{test_user_email}}\",\n  \"template\": \"test_notification\",\n  \"subject\": \"API Test Notification\",\n  \"data\": {\n    \"userName\": \"Test User\",\n    \"message\": \"This is a test notification from Postman API testing\",\n    \"testId\": \"{{correlationId}}\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3426ed84-126e-4f82-93ec-719a48f18ab2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Email notification sent', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.success).to.be.true;",
                    "});"
                  ],
                  "_lastExecutionId": "4f82917f-6491-43dd-8d92-1470eb0724b8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "523369cf-59b2-4a7a-8ad6-1def8a4a2d70",
        "name": "üéì Live Classes",
        "description": {
          "content": "Live streaming and class management",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "3e70be0e-4d36-4413-a579-eacfac61a6bc",
            "name": "Live Classes Health",
            "request": {
              "url": {
                "path": [
                  "live-classes",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "179bb341-898e-4318-bf39-6fa40c433ba9",
            "name": "Create Live Session",
            "request": {
              "url": {
                "path": [
                  "live-classes",
                  "api",
                  "{{api_version}}",
                  "sessions"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"title\": \"Test Live Session\",\n  \"description\": \"API testing live session\",\n  \"scheduledAt\": \"{{$isoTimestamp}}\",\n  \"duration\": 3600,\n  \"maxParticipants\": 100,\n  \"isRecorded\": true,\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "bc5e248b-327f-41f2-b809-baf31c1e47b5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Live session created', function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.id).to.exist;",
                    "    pm.expect(response.streamUrl).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "da61c0fb-4fcf-4544-b891-7c97240a960b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "13015755-89ab-4d75-8af3-86005d4b904b",
        "name": "ü§ñ LLM Tutor",
        "description": {
          "content": "AI-powered tutoring and educational assistance",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "041f7780-4d4e-4483-9d37-829cc79fcb3f",
            "name": "LLM Tutor Health",
            "request": {
              "url": {
                "path": [
                  "llm-tutor",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "2007e7f0-431f-4492-88c8-a1cea44e3854",
            "name": "Ask Question to Tutor",
            "request": {
              "url": {
                "path": [
                  "llm-tutor",
                  "api",
                  "{{api_version}}",
                  "ask"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"question\": \"Explain the concept of machine learning in simple terms\",\n  \"context\": {\n    \"subject\": \"computer-science\",\n    \"level\": \"beginner\",\n    \"userId\": \"{{test_user_id}}\"\n  },\n  \"preferences\": {\n    \"responseLength\": \"medium\",\n    \"includeExamples\": true\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b6dad81c-ef19-4494-ad17-f367722f07a3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Tutor response received', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.answer).to.exist;",
                    "    pm.expect(response.confidence).to.be.a('number');",
                    "});"
                  ],
                  "_lastExecutionId": "99269ae9-a0d5-4833-b718-7b223fc96528"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "452c0631-8bf0-477b-b48d-b328c5149fa6",
        "name": "üìà Recommendations",
        "description": {
          "content": "AI-powered content and course recommendations",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "e97f6bd2-12bb-4c8d-8812-71a006770ae4",
            "name": "Recommendations Health",
            "request": {
              "url": {
                "path": [
                  "recommendations",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "a3757f2c-fee9-46f7-badf-66f67f8049e3",
            "name": "Get User Recommendations",
            "request": {
              "url": {
                "path": [
                  "recommendations",
                  "api",
                  "{{api_version}}",
                  "users",
                  "{{test_user_id}}",
                  "recommendations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "type",
                    "value": "courses"
                  },
                  {
                    "key": "limit",
                    "value": "10"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1b9f8c55-bfe7-4fb3-9589-fb5ac7770a8a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Recommendations retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.recommendations).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "83136293-0342-4dc0-b5fe-e76e86a3d357"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c715546c-bfd0-40ca-889d-b1764d9e1807",
        "name": "üîß Admin Operations",
        "description": {
          "content": "Administrative operations and system management",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "1afc09b4-3fd3-477b-9438-33003d88c60d",
            "name": "Admin Dashboard Health",
            "request": {
              "url": {
                "path": [
                  "admin",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": []
          },
          {
            "id": "58dbc737-148f-431b-b1cc-2264e23433b5",
            "name": "Get System Status",
            "request": {
              "url": {
                "path": [
                  "admin",
                  "api",
                  "{{api_version}}",
                  "system",
                  "status"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{access_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b8be45ff-3b4c-4afd-9ce8-7ae6a1cc23bc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('System status retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.services).to.exist;",
                    "});"
                  ],
                  "_lastExecutionId": "489eafe4-b2c0-465b-bc44-a0cc40e9e0d3"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "auth": {
      "type": "bearer",
      "bearer": [
        {
          "type": "string",
          "value": "{{access_token}}",
          "key": "token"
        }
      ]
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "5f70f35f-75fa-4403-b3bb-8168122ff61d",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "console.log('üöÄ Executing request:', pm.info.requestName);",
            "console.log('üìç Environment:', pm.environment.name);",
            "",
            "// Set correlation ID for tracing",
            "pm.globals.set('correlationId', 'test-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9));",
            "",
            "// Auto-refresh token if expired",
            "const tokenExpiry = pm.environment.get('token_expiry');",
            "if (tokenExpiry && Date.now() > parseInt(tokenExpiry)) {",
            "    console.log('üîÑ Token expired, refreshing...');",
            "    // Token refresh logic will be handled in auth requests",
            "}"
          ],
          "_lastExecutionId": "7020a89b-0358-4b4f-a7b5-897bb74de768"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "eed42074-bbbc-4bf0-ac95-1c1c2a526774",
          "type": "text/javascript",
          "exec": [
            "// Global test script",
            "const responseTime = pm.response.responseTime;",
            "const statusCode = pm.response.code;",
            "",
            "console.log('‚úÖ Response received:', statusCode, 'in', responseTime + 'ms');",
            "",
            "// Performance assertions",
            "pm.test('Response time is acceptable', function () {",
            "    pm.expect(responseTime).to.be.below(5000); // 5 seconds max",
            "});",
            "",
            "// Security headers check",
            "pm.test('Security headers present', function () {",
            "    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.exist;",
            "    pm.expect(pm.response.headers.get('X-Frame-Options')).to.exist;",
            "});",
            "",
            "// Error handling",
            "if (statusCode >= 400) {",
            "    console.log('‚ùå Error response:', pm.response.text());",
            "}"
          ],
          "_lastExecutionId": "cd28b170-ab6b-4ee6-bc7c-07d28dc26cec"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "{{gateway_url}}",
        "key": "base_url"
      },
      {
        "type": "string",
        "value": "v1",
        "key": "api_version"
      }
    ],
    "info": {
      "_postman_id": "8e524cd2-9ecb-4a13-a9d8-4f3663134b0c",
      "name": "Suuupra EdTech Platform - Complete API Testing Suite",
      "version": {
        "raw": "2.0.0",
        "major": 2,
        "minor": 0,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "2.0.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive production-level API testing for all 20+ microservices in the Suuupra EdTech Platform. This collection tests every endpoint through the API Gateway with full authentication, validation, and error handling.",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment"
    },
    "id": "local-dev-env",
    "name": "Local Development",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:8080",
        "key": "gateway_url"
      },
      {
        "type": "any",
        "value": "v1",
        "key": "api_version"
      },
      {
        "type": "any",
        "value": "development",
        "key": "environment"
      },
      {
        "type": "any",
        "value": "",
        "key": "access_token"
      },
      {
        "type": "any",
        "value": "",
        "key": "refresh_token"
      },
      {
        "type": "any",
        "value": "",
        "key": "token_expiry"
      },
      {
        "type": "any",
        "value": "",
        "key": "test_user_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "test_user_email"
      },
      {
        "type": "any",
        "value": "",
        "key": "cart_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "order_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "payment_intent_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "content_id"
      },
      {
        "type": "any",
        "value": "HDFC",
        "key": "test_bank_code"
      },
      {
        "type": "any",
        "value": "",
        "key": "correlationId"
      },
      {
        "type": "any",
        "value": "test-1755644195324@suuupra.com",
        "key": "test_email"
      }
    ]
  },
  "globals": {
    "id": "1d7ef124-de06-4320-94e0-51ae70110017",
    "values": [
      {
        "type": "any",
        "value": "test-1755644195763-1gyk168fr",
        "key": "correlationId"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 32,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 87,
        "pending": 0,
        "failed": 32
      },
      "prerequests": {
        "total": 32,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 32,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 32,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 22,
        "pending": 0,
        "failed": 19
      },
      "testScripts": {
        "total": 54,
        "pending": 0,
        "failed": 32
      },
      "prerequestScripts": {
        "total": 33,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 3.1562500000000004,
      "responseMin": 1,
      "responseMax": 16,
      "responseSd": 3.241424985635178,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1755644195224,
      "completed": 1755644195775
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 32,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7bf2bed0-958a-4ace-8f61-065805da797d",
          "httpRequestId": "3c76f23e-4ade-45a2-a15f-1892801989a4"
        },
        "item": {
          "id": "1e165b31-2c13-4079-aab2-f230294eaf81",
          "name": "Health Check",
          "request": {
            "url": {
              "path": [
                "healthz"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "29ec1e58-028b-4c08-b6de-eba841614df1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API Gateway is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.service).to.eql('api-gateway');",
                  "});"
                ],
                "_lastExecutionId": "bce6d647-d0d3-42ff-b745-e3b12ac262fb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "healthz"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "949cab38-3a7e-47f4-a189-5b04e2e61743",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "ee2028e7-7006-4750-afa7-cca65c0f4788",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              50,
              53,
              51,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              122,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 16,
          "responseSize": 150
        },
        "id": "1e165b31-2c13-4079-aab2-f230294eaf81",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "440ff15f-c9db-4f78-87ad-6b8ce756528b",
              "timestamp": 1755644195264,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "API Gateway is healthy",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "df979270-f23f-4604-a3dc-e1551573b96b",
          "length": 32,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3e38af0d-13a2-4af0-8706-8743b700cb0c"
        },
        "item": {
          "id": "916dcef0-626a-4b67-923e-a2615145615b",
          "name": "OIDC Discovery",
          "request": {
            "url": {
              "path": [
                "identity",
                ".well-known",
                "openid-configuration"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3cea5814-a6a0-4abc-81ff-f25ca430ae85",
                "type": "text/javascript",
                "exec": [
                  "pm.test('OIDC Discovery successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.issuer).to.exist;",
                  "    pm.expect(response.authorization_endpoint).to.exist;",
                  "    pm.expect(response.token_endpoint).to.exist;",
                  "    pm.expect(response.jwks_uri).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "7c086d11-1e2f-4f17-ac06-8cf5f2a7f982"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "identity",
              ".well-known",
              "openid-configuration"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "69e1e1b5-2442-45f9-a361-a81ebbff0f67",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "af7347a8-4f98-4eb3-ae1c-6a2583460be1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              50,
              55,
              57,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              47,
              46,
              119,
              101,
              108,
              108,
              45,
              107,
              110,
              111,
              119,
              110,
              47,
              111,
              112,
              101,
              110,
              105,
              100,
              45,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 184
        },
        "id": "916dcef0-626a-4b67-923e-a2615145615b",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "71c7e572-5039-4b73-8a95-a9e728ac0ac1",
              "timestamp": 1755644195285,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "OIDC Discovery successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "OIDC Discovery successful",
              "message": "expected undefined to exist",
              "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "594ff22b-a561-47bd-9ed5-6464270ca544",
          "length": 32,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fbbea16f-101b-4c86-97bc-a5a9f874c332"
        },
        "item": {
          "id": "b8f1603e-cbd4-4844-bdc4-d8ff816143cc",
          "name": "Get JWKS",
          "request": {
            "url": {
              "path": [
                "identity",
                "oauth2",
                "jwks"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "864ecea3-4abe-472f-935f-e542e2d6e2f7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('JWKS endpoint accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.keys).to.be.an('array');",
                  "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "54313b67-d913-4f28-965a-b8380e96600d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "identity",
              "oauth2",
              "jwks"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ad99669c-2a8c-4700-b7e7-7b1e89497d66",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a71567a3-0338-48f5-bbf6-71bc265bfa2c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              51,
              48,
              53,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              47,
              111,
              97,
              117,
              116,
              104,
              50,
              47,
              106,
              119,
              107,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 163
        },
        "id": "b8f1603e-cbd4-4844-bdc4-d8ff816143cc",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "61ebe8b1-c110-4a9c-9841-f8e1631d29ca",
              "timestamp": 1755644195312,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "JWKS endpoint accessible",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "JWKS endpoint accessible",
              "message": "expected undefined to be an array",
              "stack": "AssertionError: expected undefined to be an array\n   at Object.eval sandbox-script.js:1:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9b59ebe7-cbb3-444b-8db5-a0788e2808c7",
          "length": 32,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a852b285-2d4f-4e46-be55-046aef40231c"
        },
        "item": {
          "id": "21c0bafe-a30e-454b-9db9-43e8167b70ca",
          "name": "Register User",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Correlation-ID",
                "value": "{{correlationId}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "43ad3938-004c-4979-91f0-76e28d33d572",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user).to.exist;",
                  "    pm.expect(response.user.id).to.exist;",
                  "    pm.environment.set('test_user_id', response.user.id);",
                  "    pm.environment.set('test_user_email', response.user.email);",
                  "});"
                ],
                "_lastExecutionId": "f37a06a0-2766-489d-9382-797fdd928e8b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8ca1bbdb-bc8a-4c7f-8759-e81b6b3803f5",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique test user email",
                  "const timestamp = Date.now();",
                  "const email = `test-${timestamp}@suuupra.com`;",
                  "pm.environment.set('test_email', email);"
                ],
                "_lastExecutionId": "11b4faef-8196-4475-aabb-733e61e17ea4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "identity",
              "api",
              "v1",
              "auth",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Correlation-ID",
              "value": ""
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "244de85e-1022-44e9-a0f9-ea58ec8104af",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "139",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"test-328@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "4de35cd3-c991-421b-991e-11c80bce6864",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              51,
              50,
              56,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              117,
              116,
              104,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 173
        },
        "id": "21c0bafe-a30e-454b-9db9-43e8167b70ca",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "2e30780d-b6fb-45bd-aca4-4857b2ca560e",
              "timestamp": 1755644195334,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "User registration successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "User registration successful",
              "message": "expected response to have status code 201 but got 200",
              "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8015beb6-2e67-4f06-bd52-4ce751c61a39",
          "length": 32,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "330fa105-9dd1-4c72-aa00-73a9c9e349b3"
        },
        "item": {
          "id": "7d7aac3f-5793-44c7-b760-5257c7c8b81e",
          "name": "Login User",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eb67c67b-a780-42e8-8783-676f68c0c5c2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.accessToken).to.exist;",
                  "    pm.expect(response.refreshToken).to.exist;",
                  "    ",
                  "    // Store tokens",
                  "    pm.environment.set('access_token', response.accessToken);",
                  "    pm.environment.set('refresh_token', response.refreshToken);",
                  "    ",
                  "    // Calculate token expiry",
                  "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                  "    pm.environment.set('token_expiry', expiryTime.toString());",
                  "});"
                ],
                "_lastExecutionId": "55ad1812-6f5d-4399-85ce-07ea5bf3b42e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "identity",
              "api",
              "v1",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fd5fb819-2a9b-43e1-9c4a-32e93188380d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "51",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"\",\n  \"password\": \"TestPassword123!\"\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "ebc47bb6-2ac4-4283-9085-15275a4e8c36",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              51,
              52,
              56,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              117,
              116,
              104,
              47,
              108,
              111,
              103,
              105,
              110,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 170
        },
        "id": "7d7aac3f-5793-44c7-b760-5257c7c8b81e",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "21cbad5c-e341-4fa3-8212-c4e80b8f66f7",
              "timestamp": 1755644195364,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Login successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Login successful",
              "message": "expected undefined to exist",
              "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "17c1e85b-2ddc-4d59-a5c2-29455faf24f1",
          "length": 32,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0ccd0c13-0db1-4cdb-934e-ea9c140a5638"
        },
        "item": {
          "id": "405aaee1-97f9-479e-b92f-40cd7f5681b6",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "users",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d1dd2d3-8401-421e-b450-82b2b49113c7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User profile retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.email).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "7ff7e5d4-1762-4947-a88f-ec4a4975f0b1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "identity",
              "api",
              "v1",
              "users",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "adb1e60c-68c0-47f6-bb5f-59b415362922",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6db2b362-9133-47d8-a3ac-b3c57586b782",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              51,
              55,
              55,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              109,
              101,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 167
        },
        "id": "405aaee1-97f9-479e-b92f-40cd7f5681b6",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "259e15cb-0a9d-4f93-8c2b-be0119dc72f9",
              "timestamp": 1755644195382,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "User profile retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "User profile retrieved",
              "message": "expected undefined to exist",
              "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ab920249-d2a0-4621-8583-43455210bb76",
          "length": 32,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b6d49bd5-935e-4a7e-a772-3d779152ed74"
        },
        "item": {
          "id": "96ead00b-f457-4c9c-ad2b-5fd02efe9ddb",
          "name": "Payment Gateway Health",
          "request": {
            "url": {
              "path": [
                "payments",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f50b9f51-8f16-4588-8797-596a9cd310ab",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment Gateway is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "f20e1def-2eaa-4863-b7f8-c92a2cc143cd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "payments",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7d9f0fbd-7f4e-4d97-ad75-fd4a468aaf98",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "e34a8c71-e91a-411b-a884-7158467df6ba",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              51,
              57,
              51,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              112,
              97,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 158
        },
        "id": "96ead00b-f457-4c9c-ad2b-5fd02efe9ddb",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "9a741d2e-ae1e-41b6-bbab-ec017333a1b2",
              "timestamp": 1755644195397,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Payment Gateway is healthy",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6801853a-d9bc-4a72-8be1-b24c94b82db2",
          "length": 32,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6dde71bd-d6fe-4fd6-86d9-359159cc81ef"
        },
        "item": {
          "id": "25855755-4e59-46de-a5e2-88a533454952",
          "name": "Create Payment Intent",
          "request": {
            "url": {
              "path": [
                "payments",
                "api",
                "{{api_version}}",
                "intents"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Idempotency-Key",
                "value": "idem-{{$randomUUID}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d3c4cf5-74b2-4bdb-b836-02607c672a9a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment intent created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.clientSecret).to.exist;",
                  "    pm.environment.set('payment_intent_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "834d8e54-3d9a-41d2-aedf-b465f8d3fe46"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "payments",
              "api",
              "v1",
              "intents"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Idempotency-Key",
              "value": "idem-b9c52933-697a-4ed0-99b9-0d9f7e740a95"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "368379df-c03d-43be-9cae-0243dbdd34e5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "359",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"\",\n    \"source\": \"postman\"\n  }\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "cfe46b32-1166-4466-91dd-eb47b0e857d0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              52,
              48,
              56,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              112,
              97,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 167
        },
        "id": "25855755-4e59-46de-a5e2-88a533454952",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "2377ad6b-3261-40d7-bd48-a831e971ba3d",
              "timestamp": 1755644195413,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Payment intent created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Payment intent created",
              "message": "expected response to have status code 201 but got 200",
              "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "43035700-70be-4ac6-a51f-951ea1ae1d3c",
          "length": 32,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "249dbb0c-2669-46fe-9808-47ffc79234d5"
        },
        "item": {
          "id": "15481ace-3c98-4039-8818-5bda9f5fae81",
          "name": "Get Payment Intent",
          "request": {
            "url": {
              "path": [
                "payments",
                "api",
                "{{api_version}}",
                "intents",
                "{{payment_intent_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ec00f6cb-3009-4b19-bb70-f4ad0d9d8199",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment intent retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                  "});"
                ],
                "_lastExecutionId": "1460f88e-918b-4398-9528-0d199543a79f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "payments",
              "api",
              "v1",
              "intents",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9e4cec14-923a-4882-ba84-2a6469f366e6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "167ef4ee-b9f8-4f7c-bbb2-fcbcee805a30",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              52,
              50,
              54,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              112,
              97,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              105,
              110,
              116,
              101,
              110,
              116,
              115,
              47,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 167
        },
        "id": "15481ace-3c98-4039-8818-5bda9f5fae81",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "12a54fb5-4ede-495e-bf1c-d900c9943583",
              "timestamp": 1755644195431,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Payment intent retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Payment intent retrieved",
              "message": "expected undefined to deeply equal ''",
              "stack": "AssertionError: expected undefined to deeply equal ''\n   at Object.eval sandbox-script.js:1:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a0a59b60-a9dc-45e4-81e1-c4a38b5dddf3",
          "length": 32,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1382e60e-40c6-4862-8df7-26725e7dcf23"
        },
        "item": {
          "id": "e9e2baa6-53fc-4651-b1b3-e73c4b6f87c0",
          "name": "Commerce Health",
          "request": {
            "url": {
              "path": [
                "commerce",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "commerce",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "71b4bf14-4fb1-4fd0-8c3f-db774b19d8ed",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "75eb8279-aa60-4e55-9098-97d772ffe638",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              52,
              52,
              55,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              99,
              111,
              109,
              109,
              101,
              114,
              99,
              101,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 158
        },
        "id": "e9e2baa6-53fc-4651-b1b3-e73c4b6f87c0",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "7cc69760-cdd0-4da7-8ed6-5debd19fec79",
              "timestamp": 1755644195453,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8359d202-19d0-49a7-887d-65c45dead5c5",
          "length": 32,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fbf7d500-dedf-40ea-ab3c-60a40c929ff4"
        },
        "item": {
          "id": "2ad5c08a-e07f-4b8f-8401-b1e4a728f801",
          "name": "Create Shopping Cart",
          "request": {
            "url": {
              "path": [
                "commerce",
                "api",
                "{{api_version}}",
                "cart"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0a3dba5c-8938-4933-8738-e2633d13423a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Shopping cart created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.items).to.be.an('array');",
                  "    pm.environment.set('cart_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "2fd7a848-07af-4459-a816-681ce2060a70"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "commerce",
              "api",
              "v1",
              "cart"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "68036291-e365-4c60-95ac-1ac9f7725182",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "366",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-59\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-697\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "cdec4921-6fc2-4f3d-a87b-e38f8386a8a7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              52,
              54,
              50,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              99,
              111,
              109,
              109,
              101,
              114,
              99,
              101,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              99,
              97,
              114,
              116,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 164
        },
        "id": "2ad5c08a-e07f-4b8f-8401-b1e4a728f801",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "9c25f97a-e7a7-4a36-a6b6-34a29ce49f91",
              "timestamp": 1755644195468,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Shopping cart created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Shopping cart created",
              "message": "expected response to have status code 201 but got 200",
              "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "74e8fa96-6360-4d2a-a5a6-fd555c89cff1",
          "length": 32,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "59a20ac6-3950-4df7-aa01-2643089c68ba"
        },
        "item": {
          "id": "33c2074e-b94d-4734-a88c-5b4b015dffb8",
          "name": "Create Order",
          "request": {
            "url": {
              "path": [
                "commerce",
                "api",
                "{{api_version}}",
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ee74e60-5aa3-4a6c-b287-1e757e4c5529",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Order created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.status).to.exist;",
                  "    pm.environment.set('order_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "66ae44aa-4407-4fcd-baa8-2cdf9ad7c9af"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "commerce",
              "api",
              "v1",
              "orders"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7f83bad6-a505-4cd6-8dd9-05c602df5b48",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "269",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"cartId\": \"\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-ae8ff38e-960f-49b1-aee4-36b676c629e9\"\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "27e82cb6-05e0-44c7-873d-ee880feb0c5f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              52,
              56,
              49,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              99,
              111,
              109,
              109,
              101,
              114,
              99,
              101,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 166
        },
        "id": "33c2074e-b94d-4734-a88c-5b4b015dffb8",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "7f1ce324-adf8-4cba-b092-0803eb3a50f0",
              "timestamp": 1755644195486,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Order created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Order created successfully",
              "message": "expected response to have status code 201 but got 200",
              "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "4eee1db3-8874-4b90-b27d-1bd2c0dbbc93",
          "length": 32,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a9841bb4-814f-431f-9737-b0aaeee87518"
        },
        "item": {
          "id": "a2e396a9-dc94-48ed-a436-308ba999ee00",
          "name": "Content Service Health",
          "request": {
            "url": {
              "path": [
                "content",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "content",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cb53f500-c10e-42b9-af56-f65dde0ce884",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "5049852c-aeaf-4122-a10c-92c2c66263ac",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              52,
              57,
              54,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 157
        },
        "id": "a2e396a9-dc94-48ed-a436-308ba999ee00",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "b714513c-f051-4b84-a4e2-0fc87081298d",
              "timestamp": 1755644195502,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "358c7b9e-d028-4eb5-9d07-6732dce116ea",
          "length": 32,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7ddd6672-2a9d-42ca-bc26-e0b132c9b5a6"
        },
        "item": {
          "id": "26528526-e705-4d4b-ab0e-0d1e6c28e811",
          "name": "Create Content",
          "request": {
            "url": {
              "path": [
                "content",
                "api",
                "{{api_version}}",
                "content"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "acfa01f2-0dbc-4d50-b233-1f5948d4ea3c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Content created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.title).to.exist;",
                  "    pm.environment.set('content_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "760ec55d-fab9-421b-9394-71bc89923d04"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "content",
              "api",
              "v1",
              "content"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9b70cadb-3136-445c-b7e0-cac1199f3662",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "437",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-ee393a65-86d4-4a96-a26a-61b7c652e8d0\"\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "1215f46b-f3f9-4630-9c80-51805294814b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              53,
              49,
              48,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 166
        },
        "id": "26528526-e705-4d4b-ab0e-0d1e6c28e811",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "b47e85c6-a793-4328-adcc-40a4635ddc94",
              "timestamp": 1755644195514,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Content created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Content created successfully",
              "message": "expected response to have status code 201 but got 200",
              "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "46bd1883-5d60-4735-aa95-e6a5d461d7b1",
          "length": 32,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6aca2d93-ecbe-40c3-8abc-73cb3d8a8f60"
        },
        "item": {
          "id": "073cdccb-b30c-486f-9b54-de09d536f662",
          "name": "Search Content",
          "request": {
            "url": {
              "path": [
                "content",
                "api",
                "{{api_version}}",
                "search"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "machine learning"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "contentType",
                  "value": "article"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7d2fedd3-bf42-4a18-9d7d-6323411c3c84",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Content search successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.results).to.be.an('array');",
                  "    pm.expect(response.total).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "d6e38ead-0a8a-4b39-b373-63162f68c21a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "content",
              "api",
              "v1",
              "search"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "q",
                "value": "machine%20learning"
              },
              {
                "key": "limit",
                "value": "10"
              },
              {
                "key": "contentType",
                "value": "article"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "335145ad-86e5-473a-a1bc-c40984b6ffc6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "7a0afb96-2cc1-425b-9e75-154bc1a27b14",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              53,
              50,
              52,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              115,
              101,
              97,
              114,
              99,
              104,
              63,
              113,
              61,
              109,
              97,
              99,
              104,
              105,
              110,
              101,
              37,
              50,
              48,
              108,
              101,
              97,
              114,
              110,
              105,
              110,
              103,
              38,
              108,
              105,
              109,
              105,
              116,
              61,
              49,
              48,
              38,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              84,
              121,
              112,
              101,
              61,
              97,
              114,
              116,
              105,
              99,
              108,
              101,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 214
        },
        "id": "073cdccb-b30c-486f-9b54-de09d536f662",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "52ea0b2f-ee2e-4297-9be7-dce0a48d5445",
              "timestamp": 1755644195529,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Content search successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Content search successful",
              "message": "expected undefined to be an array",
              "stack": "AssertionError: expected undefined to be an array\n   at Object.eval sandbox-script.js:1:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "614d0da5-0270-4aa2-b420-ad2604b22b45",
          "length": 32,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3ead28ff-cc21-45dd-be5a-d8a629e7f2c0"
        },
        "item": {
          "id": "d3df01cc-ac18-4c1a-87a0-771460de2457",
          "name": "Bank Simulator Health",
          "request": {
            "url": {
              "path": [
                "bank-simulator",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "bank-simulator",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "baa73938-6795-4c75-8e85-ce76f80c5838",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "59faf9cc-93f7-4ae8-852b-1f0969bf619e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              53,
              51,
              57,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              98,
              97,
              110,
              107,
              45,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              111,
              114,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 164
        },
        "id": "d3df01cc-ac18-4c1a-87a0-771460de2457",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "e2bf9bc5-e0c1-4935-a201-0f0f783f31eb",
              "timestamp": 1755644195544,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c4066b9d-3ab2-4f2f-8889-f87d14006614",
          "length": 32,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c332f173-d43a-4e10-b30a-16e9176354d9"
        },
        "item": {
          "id": "dc3972e5-30c8-4338-9165-e1e05eb59b04",
          "name": "List Banks",
          "request": {
            "url": {
              "path": [
                "bank-simulator",
                "api",
                "banks"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c299bc89-7bba-4aaf-b9cc-df021d14d906",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Banks list retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    pm.expect(response.length).to.be.greaterThan(0);",
                  "    ",
                  "    // Store first bank for testing",
                  "    if (response.length > 0) {",
                  "        pm.environment.set('test_bank_code', response[0].code);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "961ccd6b-f4b7-43b4-8022-58e9cd21bda8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "bank-simulator",
              "api",
              "banks"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3d947a7e-d4d4-42b4-abc8-85b1395174a1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "03580108-443e-4880-b232-7055f017a106",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              53,
              53,
              51,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              98,
              97,
              110,
              107,
              45,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              111,
              114,
              47,
              97,
              112,
              105,
              47,
              98,
              97,
              110,
              107,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 167
        },
        "id": "dc3972e5-30c8-4338-9165-e1e05eb59b04",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "5da59409-6191-4e44-b9a8-dd8f3fe13133",
              "timestamp": 1755644195557,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Banks list retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Banks list retrieved",
              "message": "expected { ‚Ä¶(6) } to be an array",
              "stack": "AssertionError: expected { ‚Ä¶(6) } to be an array\n   at Object.eval sandbox-script.js:1:17)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cba067d4-892d-4ab5-b0ac-7f40d87d888a",
          "length": 32,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8e84d2e8-efe1-4876-b243-961fa6ca4c06"
        },
        "item": {
          "id": "2794fb75-7c5e-4968-8217-5d8bd1aeeffd",
          "name": "Process Bank Transaction",
          "request": {
            "url": {
              "path": [
                "bank-simulator",
                "api",
                "real-transactions",
                "process"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abd91106-ebcb-4e5d-9577-190805188610",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bank transaction processed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.transactionId).to.exist;",
                  "    pm.expect(response.bankReferenceId).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "c6cdd288-6b1b-4109-ab81-65ff34afc853"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "bank-simulator",
              "api",
              "real-transactions",
              "process"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "871b9e76-db96-42b7-8c59-65bd5f974bb3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "296",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"transactionId\": \"TXN31\",\n  \"bankCode\": \"HDFC\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"\",\n    \"source\": \"postman-api-test\"\n  }\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "7cb71f23-a8d8-4dc4-bca3-a17b66d4c1a1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              53,
              54,
              57,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              98,
              97,
              110,
              107,
              45,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              111,
              114,
              47,
              97,
              112,
              105,
              47,
              114,
              101,
              97,
              108,
              45,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 188
        },
        "id": "2794fb75-7c5e-4968-8217-5d8bd1aeeffd",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "b7e6b49f-089c-4bd4-9346-dd2c0010399e",
              "timestamp": 1755644195574,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Bank transaction processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Bank transaction processed",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:1:18)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0df7275f-1c87-4b3e-a075-2e0ed41b86dd",
          "length": 32,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d06e0ded-6004-4154-a483-58e45df42b44"
        },
        "item": {
          "id": "e98ec437-a48b-40a2-a75d-3f4a22cb6561",
          "name": "UPI Core Health",
          "request": {
            "url": {
              "path": [
                "upi-core",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "upi-core",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "91a568d4-5322-4361-bc4e-97261968285f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "72157e87-8df2-4378-b555-b117a599eebe",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              53,
              56,
              52,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              117,
              112,
              105,
              45,
              99,
              111,
              114,
              101,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 158
        },
        "id": "e98ec437-a48b-40a2-a75d-3f4a22cb6561",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "ea45c1a6-2399-431e-85fc-747e275ed54b",
              "timestamp": 1755644195588,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "410c8932-f9a8-4f42-92b5-8e69943741ae",
          "length": 32,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3999aa28-1eea-4917-82b6-8b25b74cfb01"
        },
        "item": {
          "id": "07014657-9b3e-430f-872b-db505b220daf",
          "name": "Process UPI Transaction",
          "request": {
            "url": {
              "path": [
                "upi-core",
                "upi",
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"UPI{{$randomInt}}\",\n  \"payerVpa\": \"test@paytm\",\n  \"payeeVpa\": \"merchant@phonepe\",\n  \"amountPaisa\": 50000,\n  \"type\": \"P2M\",\n  \"reference\": \"Test UPI payment\",\n  \"payerBankCode\": \"HDFC\",\n  \"payeeBankCode\": \"ICICI\",\n  \"digitalSignature\": \"SHA256:test-signature\",\n  \"initiatedAt\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "784297c4-ab09-4085-b92b-cae5bca1e51d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('UPI transaction processed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.transactionId).to.exist;",
                  "    pm.expect(response.rrn).to.exist;",
                  "    pm.expect(response.status).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "2deb4c4e-2198-4165-90ba-5efff78f88fc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "upi-core",
              "upi",
              "transactions"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ca55e9ae-6d0e-4ae1-a3c8-020207c3d977",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "316",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"transactionId\": \"UPI696\",\n  \"payerVpa\": \"test@paytm\",\n  \"payeeVpa\": \"merchant@phonepe\",\n  \"amountPaisa\": 50000,\n  \"type\": \"P2M\",\n  \"reference\": \"Test UPI payment\",\n  \"payerBankCode\": \"HDFC\",\n  \"payeeBankCode\": \"ICICI\",\n  \"digitalSignature\": \"SHA256:test-signature\",\n  \"initiatedAt\": \"2025-08-19T22:56:35.595Z\"\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "d820a34e-04a7-4a19-b163-030330f2e324",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              53,
              57,
              54,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              117,
              112,
              105,
              45,
              99,
              111,
              114,
              101,
              47,
              117,
              112,
              105,
              47,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 169
        },
        "id": "07014657-9b3e-430f-872b-db505b220daf",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "1ff08008-8cf9-4daa-a8f9-303a6d46aa3d",
              "timestamp": 1755644195601,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "UPI transaction processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "UPI transaction processed",
              "message": "expected undefined to exist",
              "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:20)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "62508137-5976-4be3-a9c2-f8230c0c3d6e",
          "length": 32,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1dffe813-6449-46e8-83cb-026ad1718b49"
        },
        "item": {
          "id": "e97a6f76-2397-49b2-bef3-21f06f48a40a",
          "name": "Analytics Health",
          "request": {
            "url": {
              "path": [
                "analytics",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "analytics",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1d0ae337-5935-40bd-b720-9de1dee16e53",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "3016bf8f-2869-42de-aa38-73e235d83482",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              54,
              49,
              49,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 159
        },
        "id": "e97a6f76-2397-49b2-bef3-21f06f48a40a",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "94166deb-dfc5-42aa-af99-5b7e84fd7201",
              "timestamp": 1755644195616,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "52d7a466-cae1-43a1-9c41-cd30e3065cb7",
          "length": 32,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ef40a105-0d31-4348-b893-116f63bde003"
        },
        "item": {
          "id": "524f72ed-ef72-4071-8bad-f995bede011b",
          "name": "Track Event",
          "request": {
            "url": {
              "path": [
                "analytics",
                "api",
                "{{api_version}}",
                "track"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event\": \"api_test_event\",\n  \"userId\": \"{{test_user_id}}\",\n  \"properties\": {\n    \"source\": \"postman\",\n    \"testId\": \"{{correlationId}}\",\n    \"timestamp\": \"{{$isoTimestamp}}\",\n    \"userAgent\": \"Postman/API-Test\"\n  },\n  \"context\": {\n    \"ip\": \"127.0.0.1\",\n    \"userAgent\": \"Postman API Testing Suite\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aa00a37f-b605-47cc-8f04-5020990962f3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Event tracked successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "42115fb7-ef09-4871-bd4d-a99c903a93ff"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "analytics",
              "api",
              "v1",
              "track"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8ba56d6c-68b3-4f1d-be28-f2f06fc4d53e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "282",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"event\": \"api_test_event\",\n  \"userId\": \"\",\n  \"properties\": {\n    \"source\": \"postman\",\n    \"testId\": \"\",\n    \"timestamp\": \"2025-08-19T22:56:35.623Z\",\n    \"userAgent\": \"Postman/API-Test\"\n  },\n  \"context\": {\n    \"ip\": \"127.0.0.1\",\n    \"userAgent\": \"Postman API Testing Suite\"\n  }\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "f7504438-db45-4da6-b7e3-f2a79d0d6730",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              54,
              50,
              52,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              116,
              114,
              97,
              99,
              107,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 166
        },
        "id": "524f72ed-ef72-4071-8bad-f995bede011b",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "c2dbb985-e90c-4f3a-86b8-c31ff966d3b1",
              "timestamp": 1755644195629,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Event tracked successfully",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ecdfdab5-9689-478a-aa3d-c0cde285fd52",
          "length": 32,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "86720be7-3a05-4d81-90ab-6f42da01e09f"
        },
        "item": {
          "id": "d273affe-384a-4f8d-84fa-2c8f33f8b7d6",
          "name": "Notifications Health",
          "request": {
            "url": {
              "path": [
                "notifications",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "notifications",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a75a7098-c3bd-4a2d-a1e6-a9192d8609e2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "53585ea4-0c83-42e5-b11f-363d9b1a9da6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              54,
              52,
              48,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 163
        },
        "id": "d273affe-384a-4f8d-84fa-2c8f33f8b7d6",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "78b54c90-e071-4f41-aa92-183f87901fa4",
              "timestamp": 1755644195645,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0a30d775-1a24-41e3-812a-a790b0d172be",
          "length": 32,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f59409c5-8dfd-4ba7-a7d1-95cf149c74d3"
        },
        "item": {
          "id": "b1e30861-d1b7-4437-977f-4eb0cb27f36c",
          "name": "Send Email Notification",
          "request": {
            "url": {
              "path": [
                "notifications",
                "api",
                "{{api_version}}",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"email\",\n  \"recipient\": \"{{test_user_email}}\",\n  \"template\": \"test_notification\",\n  \"subject\": \"API Test Notification\",\n  \"data\": {\n    \"userName\": \"Test User\",\n    \"message\": \"This is a test notification from Postman API testing\",\n    \"testId\": \"{{correlationId}}\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3426ed84-126e-4f82-93ec-719a48f18ab2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Email notification sent', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "4f82917f-6491-43dd-8d92-1470eb0724b8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "notifications",
              "api",
              "v1",
              "send"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a5bfc46c-f224-4be7-81e1-e78986a6f6af",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "247",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"type\": \"email\",\n  \"recipient\": \"\",\n  \"template\": \"test_notification\",\n  \"subject\": \"API Test Notification\",\n  \"data\": {\n    \"userName\": \"Test User\",\n    \"message\": \"This is a test notification from Postman API testing\",\n    \"testId\": \"\"\n  }\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a82e4944-9522-40c3-a1b5-6742f0bd77c1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              54,
              53,
              51,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              115,
              101,
              110,
              100,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 169
        },
        "id": "b1e30861-d1b7-4437-977f-4eb0cb27f36c",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "805fcd35-ed99-46e5-bac3-08e4bd161ba6",
              "timestamp": 1755644195658,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Email notification sent",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Email notification sent",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:1:24)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7106021b-c799-479e-ad67-4125d21c64b1",
          "length": 32,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c4f99c33-86e2-41a7-846f-7839a4087e30"
        },
        "item": {
          "id": "3e70be0e-4d36-4413-a579-eacfac61a6bc",
          "name": "Live Classes Health",
          "request": {
            "url": {
              "path": [
                "live-classes",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "live-classes",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d808a97a-7e8a-4672-b06c-8031b4c92f30",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "53499c1f-82b3-427c-a828-484ed7b7931a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              54,
              54,
              55,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              108,
              105,
              118,
              101,
              45,
              99,
              108,
              97,
              115,
              115,
              101,
              115,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 162
        },
        "id": "3e70be0e-4d36-4413-a579-eacfac61a6bc",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "c39fceab-b374-4c81-9c82-4deae314695e",
              "timestamp": 1755644195672,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8b137ef6-8596-4668-a0bb-ee7d0238e6e2",
          "length": 32,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2a01f863-4398-4143-92d9-5ca58599f818"
        },
        "item": {
          "id": "179bb341-898e-4318-bf39-6fa40c433ba9",
          "name": "Create Live Session",
          "request": {
            "url": {
              "path": [
                "live-classes",
                "api",
                "{{api_version}}",
                "sessions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Live Session\",\n  \"description\": \"API testing live session\",\n  \"scheduledAt\": \"{{$isoTimestamp}}\",\n  \"duration\": 3600,\n  \"maxParticipants\": 100,\n  \"isRecorded\": true,\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc5e248b-327f-41f2-b809-baf31c1e47b5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Live session created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.streamUrl).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "da61c0fb-4fcf-4544-b891-7c97240a960b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "live-classes",
              "api",
              "v1",
              "sessions"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e0a8b390-6a81-4d12-9e3f-189c0e987591",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "255",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"title\": \"Test Live Session\",\n  \"description\": \"API testing live session\",\n  \"scheduledAt\": \"2025-08-19T22:56:35.679Z\",\n  \"duration\": 3600,\n  \"maxParticipants\": 100,\n  \"isRecorded\": true,\n  \"metadata\": {\n    \"testId\": \"\",\n    \"source\": \"postman\"\n  }\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "43f454c8-7c58-42bd-92e9-2a1909f7bb74",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              54,
              56,
              48,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              108,
              105,
              118,
              101,
              45,
              99,
              108,
              97,
              115,
              115,
              101,
              115,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 172
        },
        "id": "179bb341-898e-4318-bf39-6fa40c433ba9",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "1803b458-e54a-4df2-b7b2-5e5e39c2927d",
              "timestamp": 1755644195685,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Live session created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Live session created",
              "message": "expected response to have status code 201 but got 200",
              "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:26)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e17f7c61-caa2-430a-860b-002440a57fb1",
          "length": 32,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8d379008-1475-495f-a91e-85d0fe48a7c1"
        },
        "item": {
          "id": "041f7780-4d4e-4483-9d37-829cc79fcb3f",
          "name": "LLM Tutor Health",
          "request": {
            "url": {
              "path": [
                "llm-tutor",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "llm-tutor",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dc486bcc-eef2-423d-8d54-af4019e072e4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "2b0042d0-36cb-4d63-85b5-af8d7d070419",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              54,
              57,
              52,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              108,
              108,
              109,
              45,
              116,
              117,
              116,
              111,
              114,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 159
        },
        "id": "041f7780-4d4e-4483-9d37-829cc79fcb3f",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "f7ea3092-a2c5-40a3-9de8-96cffa8d675c",
              "timestamp": 1755644195698,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f5b18625-29f6-4c45-9849-0c876d64594f",
          "length": 32,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a740569a-9428-4d1e-9d8b-b7e8bdcad857"
        },
        "item": {
          "id": "2007e7f0-431f-4492-88c8-a1cea44e3854",
          "name": "Ask Question to Tutor",
          "request": {
            "url": {
              "path": [
                "llm-tutor",
                "api",
                "{{api_version}}",
                "ask"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"Explain the concept of machine learning in simple terms\",\n  \"context\": {\n    \"subject\": \"computer-science\",\n    \"level\": \"beginner\",\n    \"userId\": \"{{test_user_id}}\"\n  },\n  \"preferences\": {\n    \"responseLength\": \"medium\",\n    \"includeExamples\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b6dad81c-ef19-4494-ad17-f367722f07a3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Tutor response received', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.answer).to.exist;",
                  "    pm.expect(response.confidence).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "99269ae9-a0d5-4833-b718-7b223fc96528"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "llm-tutor",
              "api",
              "v1",
              "ask"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9d37443c-5be6-4044-83b6-2e5dc9800dd4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "256",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"question\": \"Explain the concept of machine learning in simple terms\",\n  \"context\": {\n    \"subject\": \"computer-science\",\n    \"level\": \"beginner\",\n    \"userId\": \"\"\n  },\n  \"preferences\": {\n    \"responseLength\": \"medium\",\n    \"includeExamples\": true\n  }\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "721dee83-a682-4574-914e-9eb37ed4dc59",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              55,
              48,
              54,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              108,
              108,
              109,
              45,
              116,
              117,
              116,
              111,
              114,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              115,
              107,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              80,
              79,
              83,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 164
        },
        "id": "2007e7f0-431f-4492-88c8-a1cea44e3854",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "172d56ce-1780-492a-894d-817d01b85d24",
              "timestamp": 1755644195710,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Tutor response received",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Tutor response received",
              "message": "expected undefined to exist",
              "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:28)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8560d728-dfdb-4d03-8c79-1d412f6508d8",
          "length": 32,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "777693d6-5ba2-4078-87c4-3c43f093d1d6"
        },
        "item": {
          "id": "e97f6bd2-12bb-4c8d-8812-71a006770ae4",
          "name": "Recommendations Health",
          "request": {
            "url": {
              "path": [
                "recommendations",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "recommendations",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6d7edd58-5dc3-4f01-84ad-40fa9442ed95",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "1796c3fa-45bf-4d4d-b319-7182307a8153",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              55,
              50,
              48,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 165
        },
        "id": "e97f6bd2-12bb-4c8d-8812-71a006770ae4",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "a0f30bea-8578-4515-96b0-379e88a02c7b",
              "timestamp": 1755644195724,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a0d05a76-6ee7-4d23-b9e6-0c6752bcaee4",
          "length": 32,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f1917142-8d83-4782-b819-5bfef87f71a6"
        },
        "item": {
          "id": "a3757f2c-fee9-46f7-badf-66f67f8049e3",
          "name": "Get User Recommendations",
          "request": {
            "url": {
              "path": [
                "recommendations",
                "api",
                "{{api_version}}",
                "users",
                "{{test_user_id}}",
                "recommendations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "courses"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1b9f8c55-bfe7-4fb3-9589-fb5ac7770a8a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Recommendations retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.recommendations).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "83136293-0342-4dc0-b5fe-e76e86a3d357"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "recommendations",
              "api",
              "v1",
              "users",
              "",
              "recommendations"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "type",
                "value": "courses"
              },
              {
                "key": "limit",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6bfaf0d2-ccd6-4193-969a-007e59e71a9e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "3ab1aee2-7b1e-4ee7-98d6-9ca38fb8f0f6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              55,
              51,
              51,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              63,
              116,
              121,
              112,
              101,
              61,
              99,
              111,
              117,
              114,
              115,
              101,
              115,
              38,
              108,
              105,
              109,
              105,
              116,
              61,
              49,
              48,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 210
        },
        "id": "a3757f2c-fee9-46f7-badf-66f67f8049e3",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "eaf44a36-d9c8-4831-8902-d2894ada7a85",
              "timestamp": 1755644195745,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Recommendations retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Recommendations retrieved",
              "message": "expected undefined to be an array",
              "stack": "AssertionError: expected undefined to be an array\n   at Object.eval sandbox-script.js:1:30)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "044d2f4e-e269-40f2-8e8f-3753690d41d1",
          "length": 32,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c4890d90-ac9f-46a1-a1eb-9293cca921cb"
        },
        "item": {
          "id": "1afc09b4-3fd3-477b-9438-33003d88c60d",
          "name": "Admin Dashboard Health",
          "request": {
            "url": {
              "path": [
                "admin",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "admin",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2723451f-42c6-48e4-bb41-4f0eb5d8105b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a0813b52-d155-4023-8d5e-5a7e38cc22b7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              55,
              53,
              53,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              100,
              109,
              105,
              110,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 155
        },
        "id": "1afc09b4-3fd3-477b-9438-33003d88c60d",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "1cd08b1a-2028-487e-af8d-e00c72f34d3b",
              "timestamp": 1755644195758,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "04e12063-be7e-4217-adc1-97985147651b",
          "length": 32,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "02047267-c4a0-4257-b04a-be504a14dfe8"
        },
        "item": {
          "id": "58dbc737-148f-431b-b1cc-2264e23433b5",
          "name": "Get System Status",
          "request": {
            "url": {
              "path": [
                "admin",
                "api",
                "{{api_version}}",
                "system",
                "status"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b8be45ff-3b4c-4afd-9ce8-7ae6a1cc23bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('System status retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.services).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "489eafe4-b2c0-465b-bc44-a0cc40e9e0d3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "admin",
              "api",
              "v1",
              "system",
              "status"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1273e92c-d960-4f8e-82a2-8e0059bb0f60",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "35d04440-4a10-4901-a162-e5683409b5b5",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Content-Type, Authorization"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Aug 2025 22:56:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              97,
              112,
              105,
              45,
              103,
              97,
              116,
              101,
              119,
              97,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              57,
              84,
              50,
              50,
              58,
              53,
              54,
              58,
              51,
              53,
              46,
              55,
              54,
              54,
              90,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              100,
              109,
              105,
              110,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              115,
              121,
              115,
              116,
              101,
              109,
              47,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              44,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              34,
              71,
              69,
              84,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 169
        },
        "id": "58dbc737-148f-431b-b1cc-2264e23433b5",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "fd873311-1f13-46e4-b265-9ba65c2bf8d3",
              "timestamp": 1755644195770,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "System status retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "System status retrieved",
              "message": "expected undefined to exist",
              "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:32)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 5383
    },
    "failures": [
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "440ff15f-c9db-4f78-87ad-6b8ce756528b",
          "timestamp": 1755644195264,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "1e165b31-2c13-4079-aab2-f230294eaf81",
          "name": "Health Check",
          "request": {
            "url": {
              "path": [
                "healthz"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "29ec1e58-028b-4c08-b6de-eba841614df1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API Gateway is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.service).to.eql('api-gateway');",
                  "});"
                ],
                "_lastExecutionId": "bce6d647-d0d3-42ff-b745-e3b12ac262fb"
              }
            }
          ]
        },
        "parent": {
          "id": "472a482a-de7b-4cd9-a581-618446294c40",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1e165b31-2c13-4079-aab2-f230294eaf81",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29ec1e58-028b-4c08-b6de-eba841614df1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "bce6d647-d0d3-42ff-b745-e3b12ac262fb"
                  }
                }
              ]
            },
            {
              "id": "916dcef0-626a-4b67-923e-a2615145615b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cea5814-a6a0-4abc-81ff-f25ca430ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7c086d11-1e2f-4f17-ac06-8cf5f2a7f982"
                  }
                }
              ]
            },
            {
              "id": "b8f1603e-cbd4-4844-bdc4-d8ff816143cc",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "864ecea3-4abe-472f-935f-e542e2d6e2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "54313b67-d913-4f28-965a-b8380e96600d"
                  }
                }
              ]
            },
            {
              "id": "21c0bafe-a30e-454b-9db9-43e8167b70ca",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43ad3938-004c-4979-91f0-76e28d33d572",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "f37a06a0-2766-489d-9382-797fdd928e8b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8ca1bbdb-bc8a-4c7f-8759-e81b6b3803f5",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "11b4faef-8196-4475-aabb-733e61e17ea4"
                  }
                }
              ]
            },
            {
              "id": "7d7aac3f-5793-44c7-b760-5257c7c8b81e",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eb67c67b-a780-42e8-8783-676f68c0c5c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "55ad1812-6f5d-4399-85ce-07ea5bf3b42e"
                  }
                }
              ]
            },
            {
              "id": "405aaee1-97f9-479e-b92f-40cd7f5681b6",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1dd2d3-8401-421e-b450-82b2b49113c7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7ff7e5d4-1762-4947-a88f-ec4a4975f0b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 32,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7bf2bed0-958a-4ace-8f61-065805da797d",
          "httpRequestId": "3c76f23e-4ade-45a2-a15f-1892801989a4",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "71c7e572-5039-4b73-8a95-a9e728ac0ac1",
          "timestamp": 1755644195285,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "916dcef0-626a-4b67-923e-a2615145615b",
          "name": "OIDC Discovery",
          "request": {
            "url": {
              "path": [
                "identity",
                ".well-known",
                "openid-configuration"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3cea5814-a6a0-4abc-81ff-f25ca430ae85",
                "type": "text/javascript",
                "exec": [
                  "pm.test('OIDC Discovery successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.issuer).to.exist;",
                  "    pm.expect(response.authorization_endpoint).to.exist;",
                  "    pm.expect(response.token_endpoint).to.exist;",
                  "    pm.expect(response.jwks_uri).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "7c086d11-1e2f-4f17-ac06-8cf5f2a7f982"
              }
            }
          ]
        },
        "parent": {
          "id": "472a482a-de7b-4cd9-a581-618446294c40",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1e165b31-2c13-4079-aab2-f230294eaf81",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29ec1e58-028b-4c08-b6de-eba841614df1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "bce6d647-d0d3-42ff-b745-e3b12ac262fb"
                  }
                }
              ]
            },
            {
              "id": "916dcef0-626a-4b67-923e-a2615145615b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cea5814-a6a0-4abc-81ff-f25ca430ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7c086d11-1e2f-4f17-ac06-8cf5f2a7f982"
                  }
                }
              ]
            },
            {
              "id": "b8f1603e-cbd4-4844-bdc4-d8ff816143cc",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "864ecea3-4abe-472f-935f-e542e2d6e2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "54313b67-d913-4f28-965a-b8380e96600d"
                  }
                }
              ]
            },
            {
              "id": "21c0bafe-a30e-454b-9db9-43e8167b70ca",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43ad3938-004c-4979-91f0-76e28d33d572",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "f37a06a0-2766-489d-9382-797fdd928e8b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8ca1bbdb-bc8a-4c7f-8759-e81b6b3803f5",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "11b4faef-8196-4475-aabb-733e61e17ea4"
                  }
                }
              ]
            },
            {
              "id": "7d7aac3f-5793-44c7-b760-5257c7c8b81e",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eb67c67b-a780-42e8-8783-676f68c0c5c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "55ad1812-6f5d-4399-85ce-07ea5bf3b42e"
                  }
                }
              ]
            },
            {
              "id": "405aaee1-97f9-479e-b92f-40cd7f5681b6",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1dd2d3-8401-421e-b450-82b2b49113c7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7ff7e5d4-1762-4947-a88f-ec4a4975f0b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "df979270-f23f-4604-a3dc-e1551573b96b",
          "length": 32,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3e38af0d-13a2-4af0-8706-8743b700cb0c",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "OIDC Discovery successful",
          "message": "expected undefined to exist",
          "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "ba558ec7dc9f422f49049c5c3d5dcb6e",
          "id": "2f63a0b3-952f-4747-9423-6fcedb37f2d2",
          "timestamp": 1755644195290,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "916dcef0-626a-4b67-923e-a2615145615b",
          "name": "OIDC Discovery",
          "request": {
            "url": {
              "path": [
                "identity",
                ".well-known",
                "openid-configuration"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3cea5814-a6a0-4abc-81ff-f25ca430ae85",
                "type": "text/javascript",
                "exec": [
                  "pm.test('OIDC Discovery successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.issuer).to.exist;",
                  "    pm.expect(response.authorization_endpoint).to.exist;",
                  "    pm.expect(response.token_endpoint).to.exist;",
                  "    pm.expect(response.jwks_uri).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "7c086d11-1e2f-4f17-ac06-8cf5f2a7f982"
              }
            }
          ]
        },
        "parent": {
          "id": "472a482a-de7b-4cd9-a581-618446294c40",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1e165b31-2c13-4079-aab2-f230294eaf81",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29ec1e58-028b-4c08-b6de-eba841614df1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "bce6d647-d0d3-42ff-b745-e3b12ac262fb"
                  }
                }
              ]
            },
            {
              "id": "916dcef0-626a-4b67-923e-a2615145615b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cea5814-a6a0-4abc-81ff-f25ca430ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7c086d11-1e2f-4f17-ac06-8cf5f2a7f982"
                  }
                }
              ]
            },
            {
              "id": "b8f1603e-cbd4-4844-bdc4-d8ff816143cc",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "864ecea3-4abe-472f-935f-e542e2d6e2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "54313b67-d913-4f28-965a-b8380e96600d"
                  }
                }
              ]
            },
            {
              "id": "21c0bafe-a30e-454b-9db9-43e8167b70ca",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43ad3938-004c-4979-91f0-76e28d33d572",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "f37a06a0-2766-489d-9382-797fdd928e8b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8ca1bbdb-bc8a-4c7f-8759-e81b6b3803f5",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "11b4faef-8196-4475-aabb-733e61e17ea4"
                  }
                }
              ]
            },
            {
              "id": "7d7aac3f-5793-44c7-b760-5257c7c8b81e",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eb67c67b-a780-42e8-8783-676f68c0c5c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "55ad1812-6f5d-4399-85ce-07ea5bf3b42e"
                  }
                }
              ]
            },
            {
              "id": "405aaee1-97f9-479e-b92f-40cd7f5681b6",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1dd2d3-8401-421e-b450-82b2b49113c7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7ff7e5d4-1762-4947-a88f-ec4a4975f0b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "df979270-f23f-4604-a3dc-e1551573b96b",
          "length": 32,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3e38af0d-13a2-4af0-8706-8743b700cb0c",
          "scriptId": "3cea5814-a6a0-4abc-81ff-f25ca430ae85",
          "execution": "7c086d11-1e2f-4f17-ac06-8cf5f2a7f982"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "61ebe8b1-c110-4a9c-9841-f8e1631d29ca",
          "timestamp": 1755644195312,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "b8f1603e-cbd4-4844-bdc4-d8ff816143cc",
          "name": "Get JWKS",
          "request": {
            "url": {
              "path": [
                "identity",
                "oauth2",
                "jwks"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "864ecea3-4abe-472f-935f-e542e2d6e2f7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('JWKS endpoint accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.keys).to.be.an('array');",
                  "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "54313b67-d913-4f28-965a-b8380e96600d"
              }
            }
          ]
        },
        "parent": {
          "id": "472a482a-de7b-4cd9-a581-618446294c40",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1e165b31-2c13-4079-aab2-f230294eaf81",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29ec1e58-028b-4c08-b6de-eba841614df1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "bce6d647-d0d3-42ff-b745-e3b12ac262fb"
                  }
                }
              ]
            },
            {
              "id": "916dcef0-626a-4b67-923e-a2615145615b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cea5814-a6a0-4abc-81ff-f25ca430ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7c086d11-1e2f-4f17-ac06-8cf5f2a7f982"
                  }
                }
              ]
            },
            {
              "id": "b8f1603e-cbd4-4844-bdc4-d8ff816143cc",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "864ecea3-4abe-472f-935f-e542e2d6e2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "54313b67-d913-4f28-965a-b8380e96600d"
                  }
                }
              ]
            },
            {
              "id": "21c0bafe-a30e-454b-9db9-43e8167b70ca",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43ad3938-004c-4979-91f0-76e28d33d572",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "f37a06a0-2766-489d-9382-797fdd928e8b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8ca1bbdb-bc8a-4c7f-8759-e81b6b3803f5",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "11b4faef-8196-4475-aabb-733e61e17ea4"
                  }
                }
              ]
            },
            {
              "id": "7d7aac3f-5793-44c7-b760-5257c7c8b81e",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eb67c67b-a780-42e8-8783-676f68c0c5c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "55ad1812-6f5d-4399-85ce-07ea5bf3b42e"
                  }
                }
              ]
            },
            {
              "id": "405aaee1-97f9-479e-b92f-40cd7f5681b6",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1dd2d3-8401-421e-b450-82b2b49113c7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7ff7e5d4-1762-4947-a88f-ec4a4975f0b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "594ff22b-a561-47bd-9ed5-6464270ca544",
          "length": 32,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fbbea16f-101b-4c86-97bc-a5a9f874c332",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "JWKS endpoint accessible",
          "message": "expected undefined to be an array",
          "stack": "AssertionError: expected undefined to be an array\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "03422fe8d4907032bc2cf668f6aa757a",
          "id": "b05ba3d0-6a13-4bcc-bffb-cdd7403c2938",
          "timestamp": 1755644195315,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b8f1603e-cbd4-4844-bdc4-d8ff816143cc",
          "name": "Get JWKS",
          "request": {
            "url": {
              "path": [
                "identity",
                "oauth2",
                "jwks"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "864ecea3-4abe-472f-935f-e542e2d6e2f7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('JWKS endpoint accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.keys).to.be.an('array');",
                  "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "54313b67-d913-4f28-965a-b8380e96600d"
              }
            }
          ]
        },
        "parent": {
          "id": "472a482a-de7b-4cd9-a581-618446294c40",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1e165b31-2c13-4079-aab2-f230294eaf81",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29ec1e58-028b-4c08-b6de-eba841614df1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "bce6d647-d0d3-42ff-b745-e3b12ac262fb"
                  }
                }
              ]
            },
            {
              "id": "916dcef0-626a-4b67-923e-a2615145615b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cea5814-a6a0-4abc-81ff-f25ca430ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7c086d11-1e2f-4f17-ac06-8cf5f2a7f982"
                  }
                }
              ]
            },
            {
              "id": "b8f1603e-cbd4-4844-bdc4-d8ff816143cc",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "864ecea3-4abe-472f-935f-e542e2d6e2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "54313b67-d913-4f28-965a-b8380e96600d"
                  }
                }
              ]
            },
            {
              "id": "21c0bafe-a30e-454b-9db9-43e8167b70ca",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43ad3938-004c-4979-91f0-76e28d33d572",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "f37a06a0-2766-489d-9382-797fdd928e8b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8ca1bbdb-bc8a-4c7f-8759-e81b6b3803f5",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "11b4faef-8196-4475-aabb-733e61e17ea4"
                  }
                }
              ]
            },
            {
              "id": "7d7aac3f-5793-44c7-b760-5257c7c8b81e",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eb67c67b-a780-42e8-8783-676f68c0c5c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "55ad1812-6f5d-4399-85ce-07ea5bf3b42e"
                  }
                }
              ]
            },
            {
              "id": "405aaee1-97f9-479e-b92f-40cd7f5681b6",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1dd2d3-8401-421e-b450-82b2b49113c7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7ff7e5d4-1762-4947-a88f-ec4a4975f0b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "594ff22b-a561-47bd-9ed5-6464270ca544",
          "length": 32,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fbbea16f-101b-4c86-97bc-a5a9f874c332",
          "scriptId": "864ecea3-4abe-472f-935f-e542e2d6e2f7",
          "execution": "54313b67-d913-4f28-965a-b8380e96600d"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "2e30780d-b6fb-45bd-aca4-4857b2ca560e",
          "timestamp": 1755644195334,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "21c0bafe-a30e-454b-9db9-43e8167b70ca",
          "name": "Register User",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Correlation-ID",
                "value": "{{correlationId}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "43ad3938-004c-4979-91f0-76e28d33d572",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user).to.exist;",
                  "    pm.expect(response.user.id).to.exist;",
                  "    pm.environment.set('test_user_id', response.user.id);",
                  "    pm.environment.set('test_user_email', response.user.email);",
                  "});"
                ],
                "_lastExecutionId": "f37a06a0-2766-489d-9382-797fdd928e8b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8ca1bbdb-bc8a-4c7f-8759-e81b6b3803f5",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique test user email",
                  "const timestamp = Date.now();",
                  "const email = `test-${timestamp}@suuupra.com`;",
                  "pm.environment.set('test_email', email);"
                ],
                "_lastExecutionId": "11b4faef-8196-4475-aabb-733e61e17ea4"
              }
            }
          ]
        },
        "parent": {
          "id": "472a482a-de7b-4cd9-a581-618446294c40",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1e165b31-2c13-4079-aab2-f230294eaf81",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29ec1e58-028b-4c08-b6de-eba841614df1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "bce6d647-d0d3-42ff-b745-e3b12ac262fb"
                  }
                }
              ]
            },
            {
              "id": "916dcef0-626a-4b67-923e-a2615145615b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cea5814-a6a0-4abc-81ff-f25ca430ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7c086d11-1e2f-4f17-ac06-8cf5f2a7f982"
                  }
                }
              ]
            },
            {
              "id": "b8f1603e-cbd4-4844-bdc4-d8ff816143cc",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "864ecea3-4abe-472f-935f-e542e2d6e2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "54313b67-d913-4f28-965a-b8380e96600d"
                  }
                }
              ]
            },
            {
              "id": "21c0bafe-a30e-454b-9db9-43e8167b70ca",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43ad3938-004c-4979-91f0-76e28d33d572",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "f37a06a0-2766-489d-9382-797fdd928e8b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8ca1bbdb-bc8a-4c7f-8759-e81b6b3803f5",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "11b4faef-8196-4475-aabb-733e61e17ea4"
                  }
                }
              ]
            },
            {
              "id": "7d7aac3f-5793-44c7-b760-5257c7c8b81e",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eb67c67b-a780-42e8-8783-676f68c0c5c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "55ad1812-6f5d-4399-85ce-07ea5bf3b42e"
                  }
                }
              ]
            },
            {
              "id": "405aaee1-97f9-479e-b92f-40cd7f5681b6",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1dd2d3-8401-421e-b450-82b2b49113c7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7ff7e5d4-1762-4947-a88f-ec4a4975f0b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9b59ebe7-cbb3-444b-8db5-a0788e2808c7",
          "length": 32,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a852b285-2d4f-4e46-be55-046aef40231c",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "User registration successful",
          "message": "expected response to have status code 201 but got 200",
          "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "595750de87dd22477a8d52737465df27",
          "id": "53952acd-1183-4365-8220-903146118596",
          "timestamp": 1755644195337,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "21c0bafe-a30e-454b-9db9-43e8167b70ca",
          "name": "Register User",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Correlation-ID",
                "value": "{{correlationId}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "43ad3938-004c-4979-91f0-76e28d33d572",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user).to.exist;",
                  "    pm.expect(response.user.id).to.exist;",
                  "    pm.environment.set('test_user_id', response.user.id);",
                  "    pm.environment.set('test_user_email', response.user.email);",
                  "});"
                ],
                "_lastExecutionId": "f37a06a0-2766-489d-9382-797fdd928e8b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8ca1bbdb-bc8a-4c7f-8759-e81b6b3803f5",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique test user email",
                  "const timestamp = Date.now();",
                  "const email = `test-${timestamp}@suuupra.com`;",
                  "pm.environment.set('test_email', email);"
                ],
                "_lastExecutionId": "11b4faef-8196-4475-aabb-733e61e17ea4"
              }
            }
          ]
        },
        "parent": {
          "id": "472a482a-de7b-4cd9-a581-618446294c40",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1e165b31-2c13-4079-aab2-f230294eaf81",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29ec1e58-028b-4c08-b6de-eba841614df1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "bce6d647-d0d3-42ff-b745-e3b12ac262fb"
                  }
                }
              ]
            },
            {
              "id": "916dcef0-626a-4b67-923e-a2615145615b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cea5814-a6a0-4abc-81ff-f25ca430ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7c086d11-1e2f-4f17-ac06-8cf5f2a7f982"
                  }
                }
              ]
            },
            {
              "id": "b8f1603e-cbd4-4844-bdc4-d8ff816143cc",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "864ecea3-4abe-472f-935f-e542e2d6e2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "54313b67-d913-4f28-965a-b8380e96600d"
                  }
                }
              ]
            },
            {
              "id": "21c0bafe-a30e-454b-9db9-43e8167b70ca",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43ad3938-004c-4979-91f0-76e28d33d572",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "f37a06a0-2766-489d-9382-797fdd928e8b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8ca1bbdb-bc8a-4c7f-8759-e81b6b3803f5",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "11b4faef-8196-4475-aabb-733e61e17ea4"
                  }
                }
              ]
            },
            {
              "id": "7d7aac3f-5793-44c7-b760-5257c7c8b81e",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eb67c67b-a780-42e8-8783-676f68c0c5c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "55ad1812-6f5d-4399-85ce-07ea5bf3b42e"
                  }
                }
              ]
            },
            {
              "id": "405aaee1-97f9-479e-b92f-40cd7f5681b6",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1dd2d3-8401-421e-b450-82b2b49113c7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7ff7e5d4-1762-4947-a88f-ec4a4975f0b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9b59ebe7-cbb3-444b-8db5-a0788e2808c7",
          "length": 32,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a852b285-2d4f-4e46-be55-046aef40231c",
          "scriptId": "43ad3938-004c-4979-91f0-76e28d33d572",
          "execution": "f37a06a0-2766-489d-9382-797fdd928e8b"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "21cbad5c-e341-4fa3-8212-c4e80b8f66f7",
          "timestamp": 1755644195364,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "7d7aac3f-5793-44c7-b760-5257c7c8b81e",
          "name": "Login User",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eb67c67b-a780-42e8-8783-676f68c0c5c2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.accessToken).to.exist;",
                  "    pm.expect(response.refreshToken).to.exist;",
                  "    ",
                  "    // Store tokens",
                  "    pm.environment.set('access_token', response.accessToken);",
                  "    pm.environment.set('refresh_token', response.refreshToken);",
                  "    ",
                  "    // Calculate token expiry",
                  "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                  "    pm.environment.set('token_expiry', expiryTime.toString());",
                  "});"
                ],
                "_lastExecutionId": "55ad1812-6f5d-4399-85ce-07ea5bf3b42e"
              }
            }
          ]
        },
        "parent": {
          "id": "472a482a-de7b-4cd9-a581-618446294c40",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1e165b31-2c13-4079-aab2-f230294eaf81",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29ec1e58-028b-4c08-b6de-eba841614df1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "bce6d647-d0d3-42ff-b745-e3b12ac262fb"
                  }
                }
              ]
            },
            {
              "id": "916dcef0-626a-4b67-923e-a2615145615b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cea5814-a6a0-4abc-81ff-f25ca430ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7c086d11-1e2f-4f17-ac06-8cf5f2a7f982"
                  }
                }
              ]
            },
            {
              "id": "b8f1603e-cbd4-4844-bdc4-d8ff816143cc",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "864ecea3-4abe-472f-935f-e542e2d6e2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "54313b67-d913-4f28-965a-b8380e96600d"
                  }
                }
              ]
            },
            {
              "id": "21c0bafe-a30e-454b-9db9-43e8167b70ca",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43ad3938-004c-4979-91f0-76e28d33d572",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "f37a06a0-2766-489d-9382-797fdd928e8b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8ca1bbdb-bc8a-4c7f-8759-e81b6b3803f5",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "11b4faef-8196-4475-aabb-733e61e17ea4"
                  }
                }
              ]
            },
            {
              "id": "7d7aac3f-5793-44c7-b760-5257c7c8b81e",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eb67c67b-a780-42e8-8783-676f68c0c5c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "55ad1812-6f5d-4399-85ce-07ea5bf3b42e"
                  }
                }
              ]
            },
            {
              "id": "405aaee1-97f9-479e-b92f-40cd7f5681b6",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1dd2d3-8401-421e-b450-82b2b49113c7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7ff7e5d4-1762-4947-a88f-ec4a4975f0b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8015beb6-2e67-4f06-bd52-4ce751c61a39",
          "length": 32,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "330fa105-9dd1-4c72-aa00-73a9c9e349b3",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Login successful",
          "message": "expected undefined to exist",
          "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "92527479afdc5946d168e572014f4640",
          "id": "997e1fdd-0711-48db-8f1c-bdc9455af404",
          "timestamp": 1755644195366,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7d7aac3f-5793-44c7-b760-5257c7c8b81e",
          "name": "Login User",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eb67c67b-a780-42e8-8783-676f68c0c5c2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.accessToken).to.exist;",
                  "    pm.expect(response.refreshToken).to.exist;",
                  "    ",
                  "    // Store tokens",
                  "    pm.environment.set('access_token', response.accessToken);",
                  "    pm.environment.set('refresh_token', response.refreshToken);",
                  "    ",
                  "    // Calculate token expiry",
                  "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                  "    pm.environment.set('token_expiry', expiryTime.toString());",
                  "});"
                ],
                "_lastExecutionId": "55ad1812-6f5d-4399-85ce-07ea5bf3b42e"
              }
            }
          ]
        },
        "parent": {
          "id": "472a482a-de7b-4cd9-a581-618446294c40",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1e165b31-2c13-4079-aab2-f230294eaf81",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29ec1e58-028b-4c08-b6de-eba841614df1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "bce6d647-d0d3-42ff-b745-e3b12ac262fb"
                  }
                }
              ]
            },
            {
              "id": "916dcef0-626a-4b67-923e-a2615145615b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cea5814-a6a0-4abc-81ff-f25ca430ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7c086d11-1e2f-4f17-ac06-8cf5f2a7f982"
                  }
                }
              ]
            },
            {
              "id": "b8f1603e-cbd4-4844-bdc4-d8ff816143cc",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "864ecea3-4abe-472f-935f-e542e2d6e2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "54313b67-d913-4f28-965a-b8380e96600d"
                  }
                }
              ]
            },
            {
              "id": "21c0bafe-a30e-454b-9db9-43e8167b70ca",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43ad3938-004c-4979-91f0-76e28d33d572",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "f37a06a0-2766-489d-9382-797fdd928e8b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8ca1bbdb-bc8a-4c7f-8759-e81b6b3803f5",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "11b4faef-8196-4475-aabb-733e61e17ea4"
                  }
                }
              ]
            },
            {
              "id": "7d7aac3f-5793-44c7-b760-5257c7c8b81e",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eb67c67b-a780-42e8-8783-676f68c0c5c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "55ad1812-6f5d-4399-85ce-07ea5bf3b42e"
                  }
                }
              ]
            },
            {
              "id": "405aaee1-97f9-479e-b92f-40cd7f5681b6",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1dd2d3-8401-421e-b450-82b2b49113c7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7ff7e5d4-1762-4947-a88f-ec4a4975f0b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8015beb6-2e67-4f06-bd52-4ce751c61a39",
          "length": 32,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "330fa105-9dd1-4c72-aa00-73a9c9e349b3",
          "scriptId": "eb67c67b-a780-42e8-8783-676f68c0c5c2",
          "execution": "55ad1812-6f5d-4399-85ce-07ea5bf3b42e"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "259e15cb-0a9d-4f93-8c2b-be0119dc72f9",
          "timestamp": 1755644195382,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "405aaee1-97f9-479e-b92f-40cd7f5681b6",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "users",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d1dd2d3-8401-421e-b450-82b2b49113c7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User profile retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.email).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "7ff7e5d4-1762-4947-a88f-ec4a4975f0b1"
              }
            }
          ]
        },
        "parent": {
          "id": "472a482a-de7b-4cd9-a581-618446294c40",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1e165b31-2c13-4079-aab2-f230294eaf81",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29ec1e58-028b-4c08-b6de-eba841614df1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "bce6d647-d0d3-42ff-b745-e3b12ac262fb"
                  }
                }
              ]
            },
            {
              "id": "916dcef0-626a-4b67-923e-a2615145615b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cea5814-a6a0-4abc-81ff-f25ca430ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7c086d11-1e2f-4f17-ac06-8cf5f2a7f982"
                  }
                }
              ]
            },
            {
              "id": "b8f1603e-cbd4-4844-bdc4-d8ff816143cc",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "864ecea3-4abe-472f-935f-e542e2d6e2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "54313b67-d913-4f28-965a-b8380e96600d"
                  }
                }
              ]
            },
            {
              "id": "21c0bafe-a30e-454b-9db9-43e8167b70ca",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43ad3938-004c-4979-91f0-76e28d33d572",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "f37a06a0-2766-489d-9382-797fdd928e8b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8ca1bbdb-bc8a-4c7f-8759-e81b6b3803f5",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "11b4faef-8196-4475-aabb-733e61e17ea4"
                  }
                }
              ]
            },
            {
              "id": "7d7aac3f-5793-44c7-b760-5257c7c8b81e",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eb67c67b-a780-42e8-8783-676f68c0c5c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "55ad1812-6f5d-4399-85ce-07ea5bf3b42e"
                  }
                }
              ]
            },
            {
              "id": "405aaee1-97f9-479e-b92f-40cd7f5681b6",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1dd2d3-8401-421e-b450-82b2b49113c7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7ff7e5d4-1762-4947-a88f-ec4a4975f0b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "17c1e85b-2ddc-4d59-a5c2-29455faf24f1",
          "length": 32,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0ccd0c13-0db1-4cdb-934e-ea9c140a5638",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "User profile retrieved",
          "message": "expected undefined to exist",
          "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "b28cfd0d179f8c08c8c04dc89530455e",
          "id": "a501c53c-b098-4975-976e-af7252729dfe",
          "timestamp": 1755644195383,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "405aaee1-97f9-479e-b92f-40cd7f5681b6",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "identity",
                "api",
                "{{api_version}}",
                "users",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d1dd2d3-8401-421e-b450-82b2b49113c7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User profile retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.email).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "7ff7e5d4-1762-4947-a88f-ec4a4975f0b1"
              }
            }
          ]
        },
        "parent": {
          "id": "472a482a-de7b-4cd9-a581-618446294c40",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Identity service authentication flows, token management, and user operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1e165b31-2c13-4079-aab2-f230294eaf81",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "healthz"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "29ec1e58-028b-4c08-b6de-eba841614df1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.service).to.eql('api-gateway');",
                      "});"
                    ],
                    "_lastExecutionId": "bce6d647-d0d3-42ff-b745-e3b12ac262fb"
                  }
                }
              ]
            },
            {
              "id": "916dcef0-626a-4b67-923e-a2615145615b",
              "name": "OIDC Discovery",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    ".well-known",
                    "openid-configuration"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cea5814-a6a0-4abc-81ff-f25ca430ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('OIDC Discovery successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.issuer).to.exist;",
                      "    pm.expect(response.authorization_endpoint).to.exist;",
                      "    pm.expect(response.token_endpoint).to.exist;",
                      "    pm.expect(response.jwks_uri).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7c086d11-1e2f-4f17-ac06-8cf5f2a7f982"
                  }
                }
              ]
            },
            {
              "id": "b8f1603e-cbd4-4844-bdc4-d8ff816143cc",
              "name": "Get JWKS",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "oauth2",
                    "jwks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "864ecea3-4abe-472f-935f-e542e2d6e2f7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('JWKS endpoint accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.keys).to.be.an('array');",
                      "    pm.expect(response.keys.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "54313b67-d913-4f28-965a-b8380e96600d"
                  }
                }
              ]
            },
            {
              "id": "21c0bafe-a30e-454b-9db9-43e8167b70ca",
              "name": "Register User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "{{correlationId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test-{{$randomInt}}@suuupra.com\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"acceptTerms\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43ad3938-004c-4979-91f0-76e28d33d572",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.user).to.exist;",
                      "    pm.expect(response.user.id).to.exist;",
                      "    pm.environment.set('test_user_id', response.user.id);",
                      "    pm.environment.set('test_user_email', response.user.email);",
                      "});"
                    ],
                    "_lastExecutionId": "f37a06a0-2766-489d-9382-797fdd928e8b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8ca1bbdb-bc8a-4c7f-8759-e81b6b3803f5",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique test user email",
                      "const timestamp = Date.now();",
                      "const email = `test-${timestamp}@suuupra.com`;",
                      "pm.environment.set('test_email', email);"
                    ],
                    "_lastExecutionId": "11b4faef-8196-4475-aabb-733e61e17ea4"
                  }
                }
              ]
            },
            {
              "id": "7d7aac3f-5793-44c7-b760-5257c7c8b81e",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"TestPassword123!\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eb67c67b-a780-42e8-8783-676f68c0c5c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.accessToken).to.exist;",
                      "    pm.expect(response.refreshToken).to.exist;",
                      "    ",
                      "    // Store tokens",
                      "    pm.environment.set('access_token', response.accessToken);",
                      "    pm.environment.set('refresh_token', response.refreshToken);",
                      "    ",
                      "    // Calculate token expiry",
                      "    const expiryTime = Date.now() + (response.expiresIn * 1000);",
                      "    pm.environment.set('token_expiry', expiryTime.toString());",
                      "});"
                    ],
                    "_lastExecutionId": "55ad1812-6f5d-4399-85ce-07ea5bf3b42e"
                  }
                }
              ]
            },
            {
              "id": "405aaee1-97f9-479e-b92f-40cd7f5681b6",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "identity",
                    "api",
                    "{{api_version}}",
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1dd2d3-8401-421e-b450-82b2b49113c7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.email).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "7ff7e5d4-1762-4947-a88f-ec4a4975f0b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "17c1e85b-2ddc-4d59-a5c2-29455faf24f1",
          "length": 32,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0ccd0c13-0db1-4cdb-934e-ea9c140a5638",
          "scriptId": "6d1dd2d3-8401-421e-b450-82b2b49113c7",
          "execution": "7ff7e5d4-1762-4947-a88f-ec4a4975f0b1"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "9a741d2e-ae1e-41b6-bbab-ec017333a1b2",
          "timestamp": 1755644195397,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "96ead00b-f457-4c9c-ad2b-5fd02efe9ddb",
          "name": "Payment Gateway Health",
          "request": {
            "url": {
              "path": [
                "payments",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f50b9f51-8f16-4588-8797-596a9cd310ab",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment Gateway is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "f20e1def-2eaa-4863-b7f8-c92a2cc143cd"
              }
            }
          ]
        },
        "parent": {
          "id": "0813b88a-b8bc-4b30-84b4-fe2824de5e20",
          "name": "üí≥ Payment Gateway",
          "description": {
            "content": "Payment processing, UPI transactions, and financial operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "96ead00b-f457-4c9c-ad2b-5fd02efe9ddb",
              "name": "Payment Gateway Health",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f50b9f51-8f16-4588-8797-596a9cd310ab",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "f20e1def-2eaa-4863-b7f8-c92a2cc143cd"
                  }
                }
              ]
            },
            {
              "id": "25855755-4e59-46de-a5e2-88a533454952",
              "name": "Create Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Idempotency-Key",
                    "value": "idem-{{$randomUUID}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d3c4cf5-74b2-4bdb-b836-02607c672a9a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.clientSecret).to.exist;",
                      "    pm.environment.set('payment_intent_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "834d8e54-3d9a-41d2-aedf-b465f8d3fe46"
                  }
                }
              ]
            },
            {
              "id": "15481ace-3c98-4039-8818-5bda9f5fae81",
              "name": "Get Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents",
                    "{{payment_intent_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ec00f6cb-3009-4b19-bb70-f4ad0d9d8199",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                      "});"
                    ],
                    "_lastExecutionId": "1460f88e-918b-4398-9528-0d199543a79f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ab920249-d2a0-4621-8583-43455210bb76",
          "length": 32,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b6d49bd5-935e-4a7e-a772-3d779152ed74",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "2377ad6b-3261-40d7-bd48-a831e971ba3d",
          "timestamp": 1755644195413,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "25855755-4e59-46de-a5e2-88a533454952",
          "name": "Create Payment Intent",
          "request": {
            "url": {
              "path": [
                "payments",
                "api",
                "{{api_version}}",
                "intents"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Idempotency-Key",
                "value": "idem-{{$randomUUID}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d3c4cf5-74b2-4bdb-b836-02607c672a9a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment intent created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.clientSecret).to.exist;",
                  "    pm.environment.set('payment_intent_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "834d8e54-3d9a-41d2-aedf-b465f8d3fe46"
              }
            }
          ]
        },
        "parent": {
          "id": "0813b88a-b8bc-4b30-84b4-fe2824de5e20",
          "name": "üí≥ Payment Gateway",
          "description": {
            "content": "Payment processing, UPI transactions, and financial operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "96ead00b-f457-4c9c-ad2b-5fd02efe9ddb",
              "name": "Payment Gateway Health",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f50b9f51-8f16-4588-8797-596a9cd310ab",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "f20e1def-2eaa-4863-b7f8-c92a2cc143cd"
                  }
                }
              ]
            },
            {
              "id": "25855755-4e59-46de-a5e2-88a533454952",
              "name": "Create Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Idempotency-Key",
                    "value": "idem-{{$randomUUID}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d3c4cf5-74b2-4bdb-b836-02607c672a9a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.clientSecret).to.exist;",
                      "    pm.environment.set('payment_intent_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "834d8e54-3d9a-41d2-aedf-b465f8d3fe46"
                  }
                }
              ]
            },
            {
              "id": "15481ace-3c98-4039-8818-5bda9f5fae81",
              "name": "Get Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents",
                    "{{payment_intent_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ec00f6cb-3009-4b19-bb70-f4ad0d9d8199",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                      "});"
                    ],
                    "_lastExecutionId": "1460f88e-918b-4398-9528-0d199543a79f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6801853a-d9bc-4a72-8be1-b24c94b82db2",
          "length": 32,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6dde71bd-d6fe-4fd6-86d9-359159cc81ef",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Payment intent created",
          "message": "expected response to have status code 201 but got 200",
          "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "ecefa2119207a32b09dc091c7805eea4",
          "id": "484f8e9a-3368-4362-a203-c89b3d585183",
          "timestamp": 1755644195416,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "25855755-4e59-46de-a5e2-88a533454952",
          "name": "Create Payment Intent",
          "request": {
            "url": {
              "path": [
                "payments",
                "api",
                "{{api_version}}",
                "intents"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Idempotency-Key",
                "value": "idem-{{$randomUUID}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d3c4cf5-74b2-4bdb-b836-02607c672a9a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment intent created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.clientSecret).to.exist;",
                  "    pm.environment.set('payment_intent_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "834d8e54-3d9a-41d2-aedf-b465f8d3fe46"
              }
            }
          ]
        },
        "parent": {
          "id": "0813b88a-b8bc-4b30-84b4-fe2824de5e20",
          "name": "üí≥ Payment Gateway",
          "description": {
            "content": "Payment processing, UPI transactions, and financial operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "96ead00b-f457-4c9c-ad2b-5fd02efe9ddb",
              "name": "Payment Gateway Health",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f50b9f51-8f16-4588-8797-596a9cd310ab",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "f20e1def-2eaa-4863-b7f8-c92a2cc143cd"
                  }
                }
              ]
            },
            {
              "id": "25855755-4e59-46de-a5e2-88a533454952",
              "name": "Create Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Idempotency-Key",
                    "value": "idem-{{$randomUUID}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d3c4cf5-74b2-4bdb-b836-02607c672a9a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.clientSecret).to.exist;",
                      "    pm.environment.set('payment_intent_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "834d8e54-3d9a-41d2-aedf-b465f8d3fe46"
                  }
                }
              ]
            },
            {
              "id": "15481ace-3c98-4039-8818-5bda9f5fae81",
              "name": "Get Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents",
                    "{{payment_intent_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ec00f6cb-3009-4b19-bb70-f4ad0d9d8199",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                      "});"
                    ],
                    "_lastExecutionId": "1460f88e-918b-4398-9528-0d199543a79f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6801853a-d9bc-4a72-8be1-b24c94b82db2",
          "length": 32,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6dde71bd-d6fe-4fd6-86d9-359159cc81ef",
          "scriptId": "6d3c4cf5-74b2-4bdb-b836-02607c672a9a",
          "execution": "834d8e54-3d9a-41d2-aedf-b465f8d3fe46"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "12a54fb5-4ede-495e-bf1c-d900c9943583",
          "timestamp": 1755644195431,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "15481ace-3c98-4039-8818-5bda9f5fae81",
          "name": "Get Payment Intent",
          "request": {
            "url": {
              "path": [
                "payments",
                "api",
                "{{api_version}}",
                "intents",
                "{{payment_intent_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ec00f6cb-3009-4b19-bb70-f4ad0d9d8199",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment intent retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                  "});"
                ],
                "_lastExecutionId": "1460f88e-918b-4398-9528-0d199543a79f"
              }
            }
          ]
        },
        "parent": {
          "id": "0813b88a-b8bc-4b30-84b4-fe2824de5e20",
          "name": "üí≥ Payment Gateway",
          "description": {
            "content": "Payment processing, UPI transactions, and financial operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "96ead00b-f457-4c9c-ad2b-5fd02efe9ddb",
              "name": "Payment Gateway Health",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f50b9f51-8f16-4588-8797-596a9cd310ab",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "f20e1def-2eaa-4863-b7f8-c92a2cc143cd"
                  }
                }
              ]
            },
            {
              "id": "25855755-4e59-46de-a5e2-88a533454952",
              "name": "Create Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Idempotency-Key",
                    "value": "idem-{{$randomUUID}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d3c4cf5-74b2-4bdb-b836-02607c672a9a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.clientSecret).to.exist;",
                      "    pm.environment.set('payment_intent_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "834d8e54-3d9a-41d2-aedf-b465f8d3fe46"
                  }
                }
              ]
            },
            {
              "id": "15481ace-3c98-4039-8818-5bda9f5fae81",
              "name": "Get Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents",
                    "{{payment_intent_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ec00f6cb-3009-4b19-bb70-f4ad0d9d8199",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                      "});"
                    ],
                    "_lastExecutionId": "1460f88e-918b-4398-9528-0d199543a79f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "43035700-70be-4ac6-a51f-951ea1ae1d3c",
          "length": 32,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "249dbb0c-2669-46fe-9808-47ffc79234d5",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Payment intent retrieved",
          "message": "expected undefined to deeply equal ''",
          "stack": "AssertionError: expected undefined to deeply equal ''\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "5eae7b7f09b85129e0de7adb407f356c",
          "id": "73fe7c6d-58f8-4112-a047-004aa275b2f5",
          "timestamp": 1755644195433,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "15481ace-3c98-4039-8818-5bda9f5fae81",
          "name": "Get Payment Intent",
          "request": {
            "url": {
              "path": [
                "payments",
                "api",
                "{{api_version}}",
                "intents",
                "{{payment_intent_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ec00f6cb-3009-4b19-bb70-f4ad0d9d8199",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment intent retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                  "});"
                ],
                "_lastExecutionId": "1460f88e-918b-4398-9528-0d199543a79f"
              }
            }
          ]
        },
        "parent": {
          "id": "0813b88a-b8bc-4b30-84b4-fe2824de5e20",
          "name": "üí≥ Payment Gateway",
          "description": {
            "content": "Payment processing, UPI transactions, and financial operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "96ead00b-f457-4c9c-ad2b-5fd02efe9ddb",
              "name": "Payment Gateway Health",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f50b9f51-8f16-4588-8797-596a9cd310ab",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment Gateway is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "f20e1def-2eaa-4863-b7f8-c92a2cc143cd"
                  }
                }
              ]
            },
            {
              "id": "25855755-4e59-46de-a5e2-88a533454952",
              "name": "Create Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Idempotency-Key",
                    "value": "idem-{{$randomUUID}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"amount\": 50000,\n  \"currency\": \"INR\",\n  \"paymentMethods\": [\"upi\", \"card\"],\n  \"customer\": {\n    \"vpa\": \"customer@paytm\",\n    \"mobile\": \"+919876543210\"\n  },\n  \"merchant\": {\n    \"vpa\": \"merchant@phonepe\",\n    \"businessName\": \"Test Merchant\"\n  },\n  \"description\": \"Test payment for API testing\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d3c4cf5-74b2-4bdb-b836-02607c672a9a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.clientSecret).to.exist;",
                      "    pm.environment.set('payment_intent_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "834d8e54-3d9a-41d2-aedf-b465f8d3fe46"
                  }
                }
              ]
            },
            {
              "id": "15481ace-3c98-4039-8818-5bda9f5fae81",
              "name": "Get Payment Intent",
              "request": {
                "url": {
                  "path": [
                    "payments",
                    "api",
                    "{{api_version}}",
                    "intents",
                    "{{payment_intent_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ec00f6cb-3009-4b19-bb70-f4ad0d9d8199",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment intent retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.eql(pm.environment.get('payment_intent_id'));",
                      "});"
                    ],
                    "_lastExecutionId": "1460f88e-918b-4398-9528-0d199543a79f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "43035700-70be-4ac6-a51f-951ea1ae1d3c",
          "length": 32,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "249dbb0c-2669-46fe-9808-47ffc79234d5",
          "scriptId": "ec00f6cb-3009-4b19-bb70-f4ad0d9d8199",
          "execution": "1460f88e-918b-4398-9528-0d199543a79f"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "7cc69760-cdd0-4da7-8ed6-5debd19fec79",
          "timestamp": 1755644195453,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "e9e2baa6-53fc-4651-b1b3-e73c4b6f87c0",
          "name": "Commerce Health",
          "request": {
            "url": {
              "path": [
                "commerce",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "406478f8-6bfc-4ff1-a3f0-59498126aca5",
          "name": "üè™ Commerce & Orders",
          "description": {
            "content": "E-commerce operations, shopping cart, and order management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e9e2baa6-53fc-4651-b1b3-e73c4b6f87c0",
              "name": "Commerce Health",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2ad5c08a-e07f-4b8f-8401-b1e4a728f801",
              "name": "Create Shopping Cart",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a3dba5c-8938-4933-8738-e2633d13423a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Shopping cart created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.environment.set('cart_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "2fd7a848-07af-4459-a816-681ce2060a70"
                  }
                }
              ]
            },
            {
              "id": "33c2074e-b94d-4734-a88c-5b4b015dffb8",
              "name": "Create Order",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7ee74e60-5aa3-4a6c-b287-1e757e4c5529",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.status).to.exist;",
                      "    pm.environment.set('order_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "66ae44aa-4407-4fcd-baa8-2cdf9ad7c9af"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a0a59b60-a9dc-45e4-81e1-c4a38b5dddf3",
          "length": 32,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1382e60e-40c6-4862-8df7-26725e7dcf23",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "9c25f97a-e7a7-4a36-a6b6-34a29ce49f91",
          "timestamp": 1755644195468,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "2ad5c08a-e07f-4b8f-8401-b1e4a728f801",
          "name": "Create Shopping Cart",
          "request": {
            "url": {
              "path": [
                "commerce",
                "api",
                "{{api_version}}",
                "cart"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0a3dba5c-8938-4933-8738-e2633d13423a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Shopping cart created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.items).to.be.an('array');",
                  "    pm.environment.set('cart_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "2fd7a848-07af-4459-a816-681ce2060a70"
              }
            }
          ]
        },
        "parent": {
          "id": "406478f8-6bfc-4ff1-a3f0-59498126aca5",
          "name": "üè™ Commerce & Orders",
          "description": {
            "content": "E-commerce operations, shopping cart, and order management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e9e2baa6-53fc-4651-b1b3-e73c4b6f87c0",
              "name": "Commerce Health",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2ad5c08a-e07f-4b8f-8401-b1e4a728f801",
              "name": "Create Shopping Cart",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a3dba5c-8938-4933-8738-e2633d13423a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Shopping cart created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.environment.set('cart_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "2fd7a848-07af-4459-a816-681ce2060a70"
                  }
                }
              ]
            },
            {
              "id": "33c2074e-b94d-4734-a88c-5b4b015dffb8",
              "name": "Create Order",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7ee74e60-5aa3-4a6c-b287-1e757e4c5529",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.status).to.exist;",
                      "    pm.environment.set('order_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "66ae44aa-4407-4fcd-baa8-2cdf9ad7c9af"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8359d202-19d0-49a7-887d-65c45dead5c5",
          "length": 32,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fbf7d500-dedf-40ea-ab3c-60a40c929ff4",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Shopping cart created",
          "message": "expected response to have status code 201 but got 200",
          "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "167e7c94301de9d77441b9e2ef0603fd",
          "id": "f11a4a66-6b5c-4969-97d7-b061a9619dc8",
          "timestamp": 1755644195471,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2ad5c08a-e07f-4b8f-8401-b1e4a728f801",
          "name": "Create Shopping Cart",
          "request": {
            "url": {
              "path": [
                "commerce",
                "api",
                "{{api_version}}",
                "cart"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0a3dba5c-8938-4933-8738-e2633d13423a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Shopping cart created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.items).to.be.an('array');",
                  "    pm.environment.set('cart_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "2fd7a848-07af-4459-a816-681ce2060a70"
              }
            }
          ]
        },
        "parent": {
          "id": "406478f8-6bfc-4ff1-a3f0-59498126aca5",
          "name": "üè™ Commerce & Orders",
          "description": {
            "content": "E-commerce operations, shopping cart, and order management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e9e2baa6-53fc-4651-b1b3-e73c4b6f87c0",
              "name": "Commerce Health",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2ad5c08a-e07f-4b8f-8401-b1e4a728f801",
              "name": "Create Shopping Cart",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a3dba5c-8938-4933-8738-e2633d13423a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Shopping cart created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.environment.set('cart_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "2fd7a848-07af-4459-a816-681ce2060a70"
                  }
                }
              ]
            },
            {
              "id": "33c2074e-b94d-4734-a88c-5b4b015dffb8",
              "name": "Create Order",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7ee74e60-5aa3-4a6c-b287-1e757e4c5529",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.status).to.exist;",
                      "    pm.environment.set('order_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "66ae44aa-4407-4fcd-baa8-2cdf9ad7c9af"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8359d202-19d0-49a7-887d-65c45dead5c5",
          "length": 32,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fbf7d500-dedf-40ea-ab3c-60a40c929ff4",
          "scriptId": "0a3dba5c-8938-4933-8738-e2633d13423a",
          "execution": "2fd7a848-07af-4459-a816-681ce2060a70"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "7f1ce324-adf8-4cba-b092-0803eb3a50f0",
          "timestamp": 1755644195486,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "33c2074e-b94d-4734-a88c-5b4b015dffb8",
          "name": "Create Order",
          "request": {
            "url": {
              "path": [
                "commerce",
                "api",
                "{{api_version}}",
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ee74e60-5aa3-4a6c-b287-1e757e4c5529",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Order created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.status).to.exist;",
                  "    pm.environment.set('order_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "66ae44aa-4407-4fcd-baa8-2cdf9ad7c9af"
              }
            }
          ]
        },
        "parent": {
          "id": "406478f8-6bfc-4ff1-a3f0-59498126aca5",
          "name": "üè™ Commerce & Orders",
          "description": {
            "content": "E-commerce operations, shopping cart, and order management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e9e2baa6-53fc-4651-b1b3-e73c4b6f87c0",
              "name": "Commerce Health",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2ad5c08a-e07f-4b8f-8401-b1e4a728f801",
              "name": "Create Shopping Cart",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a3dba5c-8938-4933-8738-e2633d13423a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Shopping cart created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.environment.set('cart_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "2fd7a848-07af-4459-a816-681ce2060a70"
                  }
                }
              ]
            },
            {
              "id": "33c2074e-b94d-4734-a88c-5b4b015dffb8",
              "name": "Create Order",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7ee74e60-5aa3-4a6c-b287-1e757e4c5529",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.status).to.exist;",
                      "    pm.environment.set('order_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "66ae44aa-4407-4fcd-baa8-2cdf9ad7c9af"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "74e8fa96-6360-4d2a-a5a6-fd555c89cff1",
          "length": 32,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "59a20ac6-3950-4df7-aa01-2643089c68ba",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Order created successfully",
          "message": "expected response to have status code 201 but got 200",
          "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "1b8edddb6d883412c4735b0e7467161b",
          "id": "d2142f44-0c5e-49b7-8296-e17d80bee47e",
          "timestamp": 1755644195487,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "33c2074e-b94d-4734-a88c-5b4b015dffb8",
          "name": "Create Order",
          "request": {
            "url": {
              "path": [
                "commerce",
                "api",
                "{{api_version}}",
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ee74e60-5aa3-4a6c-b287-1e757e4c5529",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Order created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.status).to.exist;",
                  "    pm.environment.set('order_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "66ae44aa-4407-4fcd-baa8-2cdf9ad7c9af"
              }
            }
          ]
        },
        "parent": {
          "id": "406478f8-6bfc-4ff1-a3f0-59498126aca5",
          "name": "üè™ Commerce & Orders",
          "description": {
            "content": "E-commerce operations, shopping cart, and order management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e9e2baa6-53fc-4651-b1b3-e73c4b6f87c0",
              "name": "Commerce Health",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2ad5c08a-e07f-4b8f-8401-b1e4a728f801",
              "name": "Create Shopping Cart",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 2,\n      \"price\": 2999,\n      \"name\": \"JavaScript Masterclass\",\n      \"description\": \"Complete JavaScript course\"\n    },\n    {\n      \"productId\": \"prod-{{$randomInt}}\",\n      \"quantity\": 1,\n      \"price\": 4999,\n      \"name\": \"React Advanced Course\",\n      \"description\": \"Advanced React concepts\"\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a3dba5c-8938-4933-8738-e2633d13423a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Shopping cart created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.environment.set('cart_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "2fd7a848-07af-4459-a816-681ce2060a70"
                  }
                }
              ]
            },
            {
              "id": "33c2074e-b94d-4734-a88c-5b4b015dffb8",
              "name": "Create Order",
              "request": {
                "url": {
                  "path": [
                    "commerce",
                    "api",
                    "{{api_version}}",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cartId\": \"{{cart_id}}\",\n  \"paymentMethod\": \"upi\",\n  \"shippingAddress\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Mumbai\",\n    \"state\": \"Maharashtra\",\n    \"zipCode\": \"400001\",\n    \"country\": \"India\"\n  },\n  \"idempotencyKey\": \"order-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7ee74e60-5aa3-4a6c-b287-1e757e4c5529",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.status).to.exist;",
                      "    pm.environment.set('order_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "66ae44aa-4407-4fcd-baa8-2cdf9ad7c9af"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "74e8fa96-6360-4d2a-a5a6-fd555c89cff1",
          "length": 32,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "59a20ac6-3950-4df7-aa01-2643089c68ba",
          "scriptId": "7ee74e60-5aa3-4a6c-b287-1e757e4c5529",
          "execution": "66ae44aa-4407-4fcd-baa8-2cdf9ad7c9af"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "b714513c-f051-4b84-a4e2-0fc87081298d",
          "timestamp": 1755644195502,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "a2e396a9-dc94-48ed-a436-308ba999ee00",
          "name": "Content Service Health",
          "request": {
            "url": {
              "path": [
                "content",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "08c24c93-361f-4817-bb9a-d0f2597a7260",
          "name": "üìö Content Management",
          "description": {
            "content": "Content creation, file uploads, and content workflow management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a2e396a9-dc94-48ed-a436-308ba999ee00",
              "name": "Content Service Health",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "26528526-e705-4d4b-ab0e-0d1e6c28e811",
              "name": "Create Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "content"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "acfa01f2-0dbc-4d50-b233-1f5948d4ea3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.title).to.exist;",
                      "    pm.environment.set('content_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "760ec55d-fab9-421b-9394-71bc89923d04"
                  }
                }
              ]
            },
            {
              "id": "073cdccb-b30c-486f-9b54-de09d536f662",
              "name": "Search Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "machine learning"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "contentType",
                      "value": "article"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7d2fedd3-bf42-4a18-9d7d-6323411c3c84",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content search successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.results).to.be.an('array');",
                      "    pm.expect(response.total).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "d6e38ead-0a8a-4b39-b373-63162f68c21a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4eee1db3-8874-4b90-b27d-1bd2c0dbbc93",
          "length": 32,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a9841bb4-814f-431f-9737-b0aaeee87518",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "b47e85c6-a793-4328-adcc-40a4635ddc94",
          "timestamp": 1755644195514,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "26528526-e705-4d4b-ab0e-0d1e6c28e811",
          "name": "Create Content",
          "request": {
            "url": {
              "path": [
                "content",
                "api",
                "{{api_version}}",
                "content"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "acfa01f2-0dbc-4d50-b233-1f5948d4ea3c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Content created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.title).to.exist;",
                  "    pm.environment.set('content_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "760ec55d-fab9-421b-9394-71bc89923d04"
              }
            }
          ]
        },
        "parent": {
          "id": "08c24c93-361f-4817-bb9a-d0f2597a7260",
          "name": "üìö Content Management",
          "description": {
            "content": "Content creation, file uploads, and content workflow management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a2e396a9-dc94-48ed-a436-308ba999ee00",
              "name": "Content Service Health",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "26528526-e705-4d4b-ab0e-0d1e6c28e811",
              "name": "Create Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "content"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "acfa01f2-0dbc-4d50-b233-1f5948d4ea3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.title).to.exist;",
                      "    pm.environment.set('content_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "760ec55d-fab9-421b-9394-71bc89923d04"
                  }
                }
              ]
            },
            {
              "id": "073cdccb-b30c-486f-9b54-de09d536f662",
              "name": "Search Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "machine learning"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "contentType",
                      "value": "article"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7d2fedd3-bf42-4a18-9d7d-6323411c3c84",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content search successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.results).to.be.an('array');",
                      "    pm.expect(response.total).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "d6e38ead-0a8a-4b39-b373-63162f68c21a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "358c7b9e-d028-4eb5-9d07-6732dce116ea",
          "length": 32,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7ddd6672-2a9d-42ca-bc26-e0b132c9b5a6",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Content created successfully",
          "message": "expected response to have status code 201 but got 200",
          "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "aa7c5e19c3f765fab7bd0b851d5d91b7",
          "id": "2e8911b2-24c0-4286-aeb8-061baa7cc64c",
          "timestamp": 1755644195516,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "26528526-e705-4d4b-ab0e-0d1e6c28e811",
          "name": "Create Content",
          "request": {
            "url": {
              "path": [
                "content",
                "api",
                "{{api_version}}",
                "content"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "acfa01f2-0dbc-4d50-b233-1f5948d4ea3c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Content created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.title).to.exist;",
                  "    pm.environment.set('content_id', response.id);",
                  "});"
                ],
                "_lastExecutionId": "760ec55d-fab9-421b-9394-71bc89923d04"
              }
            }
          ]
        },
        "parent": {
          "id": "08c24c93-361f-4817-bb9a-d0f2597a7260",
          "name": "üìö Content Management",
          "description": {
            "content": "Content creation, file uploads, and content workflow management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a2e396a9-dc94-48ed-a436-308ba999ee00",
              "name": "Content Service Health",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "26528526-e705-4d4b-ab0e-0d1e6c28e811",
              "name": "Create Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "content"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "acfa01f2-0dbc-4d50-b233-1f5948d4ea3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.title).to.exist;",
                      "    pm.environment.set('content_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "760ec55d-fab9-421b-9394-71bc89923d04"
                  }
                }
              ]
            },
            {
              "id": "073cdccb-b30c-486f-9b54-de09d536f662",
              "name": "Search Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "machine learning"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "contentType",
                      "value": "article"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7d2fedd3-bf42-4a18-9d7d-6323411c3c84",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content search successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.results).to.be.an('array');",
                      "    pm.expect(response.total).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "d6e38ead-0a8a-4b39-b373-63162f68c21a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "358c7b9e-d028-4eb5-9d07-6732dce116ea",
          "length": 32,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7ddd6672-2a9d-42ca-bc26-e0b132c9b5a6",
          "scriptId": "acfa01f2-0dbc-4d50-b233-1f5948d4ea3c",
          "execution": "760ec55d-fab9-421b-9394-71bc89923d04"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "52ea0b2f-ee2e-4297-9be7-dce0a48d5445",
          "timestamp": 1755644195529,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "073cdccb-b30c-486f-9b54-de09d536f662",
          "name": "Search Content",
          "request": {
            "url": {
              "path": [
                "content",
                "api",
                "{{api_version}}",
                "search"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "machine learning"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "contentType",
                  "value": "article"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7d2fedd3-bf42-4a18-9d7d-6323411c3c84",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Content search successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.results).to.be.an('array');",
                  "    pm.expect(response.total).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "d6e38ead-0a8a-4b39-b373-63162f68c21a"
              }
            }
          ]
        },
        "parent": {
          "id": "08c24c93-361f-4817-bb9a-d0f2597a7260",
          "name": "üìö Content Management",
          "description": {
            "content": "Content creation, file uploads, and content workflow management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a2e396a9-dc94-48ed-a436-308ba999ee00",
              "name": "Content Service Health",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "26528526-e705-4d4b-ab0e-0d1e6c28e811",
              "name": "Create Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "content"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "acfa01f2-0dbc-4d50-b233-1f5948d4ea3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.title).to.exist;",
                      "    pm.environment.set('content_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "760ec55d-fab9-421b-9394-71bc89923d04"
                  }
                }
              ]
            },
            {
              "id": "073cdccb-b30c-486f-9b54-de09d536f662",
              "name": "Search Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "machine learning"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "contentType",
                      "value": "article"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7d2fedd3-bf42-4a18-9d7d-6323411c3c84",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content search successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.results).to.be.an('array');",
                      "    pm.expect(response.total).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "d6e38ead-0a8a-4b39-b373-63162f68c21a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "46bd1883-5d60-4735-aa95-e6a5d461d7b1",
          "length": 32,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6aca2d93-ecbe-40c3-8abc-73cb3d8a8f60",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Content search successful",
          "message": "expected undefined to be an array",
          "stack": "AssertionError: expected undefined to be an array\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "2aa75f02c7818364c5c77c1c4e1392a3",
          "id": "6724415f-4dc3-4338-a4d5-a1795b7a26a9",
          "timestamp": 1755644195531,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "073cdccb-b30c-486f-9b54-de09d536f662",
          "name": "Search Content",
          "request": {
            "url": {
              "path": [
                "content",
                "api",
                "{{api_version}}",
                "search"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "machine learning"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "contentType",
                  "value": "article"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7d2fedd3-bf42-4a18-9d7d-6323411c3c84",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Content search successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.results).to.be.an('array');",
                  "    pm.expect(response.total).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "d6e38ead-0a8a-4b39-b373-63162f68c21a"
              }
            }
          ]
        },
        "parent": {
          "id": "08c24c93-361f-4817-bb9a-d0f2597a7260",
          "name": "üìö Content Management",
          "description": {
            "content": "Content creation, file uploads, and content workflow management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "a2e396a9-dc94-48ed-a436-308ba999ee00",
              "name": "Content Service Health",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "26528526-e705-4d4b-ab0e-0d1e6c28e811",
              "name": "Create Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "content"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Introduction to Machine Learning\",\n  \"description\": \"A comprehensive guide to machine learning fundamentals\",\n  \"contentType\": \"article\",\n  \"tags\": [\"machine-learning\", \"ai\", \"data-science\"],\n  \"categories\": [\"technology\", \"education\"],\n  \"metadata\": {\n    \"difficulty\": \"beginner\",\n    \"estimatedReadTime\": \"15 minutes\",\n    \"author\": \"Test Author\"\n  },\n  \"idempotencyKey\": \"content-{{$randomUUID}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "acfa01f2-0dbc-4d50-b233-1f5948d4ea3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.title).to.exist;",
                      "    pm.environment.set('content_id', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "760ec55d-fab9-421b-9394-71bc89923d04"
                  }
                }
              ]
            },
            {
              "id": "073cdccb-b30c-486f-9b54-de09d536f662",
              "name": "Search Content",
              "request": {
                "url": {
                  "path": [
                    "content",
                    "api",
                    "{{api_version}}",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "machine learning"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "contentType",
                      "value": "article"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7d2fedd3-bf42-4a18-9d7d-6323411c3c84",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Content search successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.results).to.be.an('array');",
                      "    pm.expect(response.total).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "d6e38ead-0a8a-4b39-b373-63162f68c21a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "46bd1883-5d60-4735-aa95-e6a5d461d7b1",
          "length": 32,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6aca2d93-ecbe-40c3-8abc-73cb3d8a8f60",
          "scriptId": "7d2fedd3-bf42-4a18-9d7d-6323411c3c84",
          "execution": "d6e38ead-0a8a-4b39-b373-63162f68c21a"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "e2bf9bc5-e0c1-4935-a201-0f0f783f31eb",
          "timestamp": 1755644195544,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "d3df01cc-ac18-4c1a-87a0-771460de2457",
          "name": "Bank Simulator Health",
          "request": {
            "url": {
              "path": [
                "bank-simulator",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "9e0e11f3-ba7a-4afc-8b35-19f809f73d44",
          "name": "üè¶ Banking Simulation",
          "description": {
            "content": "Bank simulator for testing financial operations and UPI transactions",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d3df01cc-ac18-4c1a-87a0-771460de2457",
              "name": "Bank Simulator Health",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "dc3972e5-30c8-4338-9165-e1e05eb59b04",
              "name": "List Banks",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "banks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c299bc89-7bba-4aaf-b9cc-df021d14d906",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Banks list retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "    pm.expect(response.length).to.be.greaterThan(0);",
                      "    ",
                      "    // Store first bank for testing",
                      "    if (response.length > 0) {",
                      "        pm.environment.set('test_bank_code', response[0].code);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "961ccd6b-f4b7-43b4-8022-58e9cd21bda8"
                  }
                }
              ]
            },
            {
              "id": "2794fb75-7c5e-4968-8217-5d8bd1aeeffd",
              "name": "Process Bank Transaction",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "real-transactions",
                    "process"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "abd91106-ebcb-4e5d-9577-190805188610",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bank transaction processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.transactionId).to.exist;",
                      "    pm.expect(response.bankReferenceId).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c6cdd288-6b1b-4109-ab81-65ff34afc853"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "614d0da5-0270-4aa2-b420-ad2604b22b45",
          "length": 32,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3ead28ff-cc21-45dd-be5a-d8a629e7f2c0",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "5da59409-6191-4e44-b9a8-dd8f3fe13133",
          "timestamp": 1755644195557,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "dc3972e5-30c8-4338-9165-e1e05eb59b04",
          "name": "List Banks",
          "request": {
            "url": {
              "path": [
                "bank-simulator",
                "api",
                "banks"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c299bc89-7bba-4aaf-b9cc-df021d14d906",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Banks list retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    pm.expect(response.length).to.be.greaterThan(0);",
                  "    ",
                  "    // Store first bank for testing",
                  "    if (response.length > 0) {",
                  "        pm.environment.set('test_bank_code', response[0].code);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "961ccd6b-f4b7-43b4-8022-58e9cd21bda8"
              }
            }
          ]
        },
        "parent": {
          "id": "9e0e11f3-ba7a-4afc-8b35-19f809f73d44",
          "name": "üè¶ Banking Simulation",
          "description": {
            "content": "Bank simulator for testing financial operations and UPI transactions",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d3df01cc-ac18-4c1a-87a0-771460de2457",
              "name": "Bank Simulator Health",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "dc3972e5-30c8-4338-9165-e1e05eb59b04",
              "name": "List Banks",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "banks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c299bc89-7bba-4aaf-b9cc-df021d14d906",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Banks list retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "    pm.expect(response.length).to.be.greaterThan(0);",
                      "    ",
                      "    // Store first bank for testing",
                      "    if (response.length > 0) {",
                      "        pm.environment.set('test_bank_code', response[0].code);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "961ccd6b-f4b7-43b4-8022-58e9cd21bda8"
                  }
                }
              ]
            },
            {
              "id": "2794fb75-7c5e-4968-8217-5d8bd1aeeffd",
              "name": "Process Bank Transaction",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "real-transactions",
                    "process"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "abd91106-ebcb-4e5d-9577-190805188610",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bank transaction processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.transactionId).to.exist;",
                      "    pm.expect(response.bankReferenceId).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c6cdd288-6b1b-4109-ab81-65ff34afc853"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c4066b9d-3ab2-4f2f-8889-f87d14006614",
          "length": 32,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c332f173-d43a-4e10-b30a-16e9176354d9",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Banks list retrieved",
          "message": "expected { ‚Ä¶(6) } to be an array",
          "stack": "AssertionError: expected { ‚Ä¶(6) } to be an array\n   at Object.eval sandbox-script.js:1:17)",
          "checksum": "7e1616d92223a7f5c7f2d8c0ad3517b9",
          "id": "a0dae2c9-c8c1-4aa9-8f72-0a3e21cab96f",
          "timestamp": 1755644195559,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "dc3972e5-30c8-4338-9165-e1e05eb59b04",
          "name": "List Banks",
          "request": {
            "url": {
              "path": [
                "bank-simulator",
                "api",
                "banks"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c299bc89-7bba-4aaf-b9cc-df021d14d906",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Banks list retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    pm.expect(response.length).to.be.greaterThan(0);",
                  "    ",
                  "    // Store first bank for testing",
                  "    if (response.length > 0) {",
                  "        pm.environment.set('test_bank_code', response[0].code);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "961ccd6b-f4b7-43b4-8022-58e9cd21bda8"
              }
            }
          ]
        },
        "parent": {
          "id": "9e0e11f3-ba7a-4afc-8b35-19f809f73d44",
          "name": "üè¶ Banking Simulation",
          "description": {
            "content": "Bank simulator for testing financial operations and UPI transactions",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d3df01cc-ac18-4c1a-87a0-771460de2457",
              "name": "Bank Simulator Health",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "dc3972e5-30c8-4338-9165-e1e05eb59b04",
              "name": "List Banks",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "banks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c299bc89-7bba-4aaf-b9cc-df021d14d906",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Banks list retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "    pm.expect(response.length).to.be.greaterThan(0);",
                      "    ",
                      "    // Store first bank for testing",
                      "    if (response.length > 0) {",
                      "        pm.environment.set('test_bank_code', response[0].code);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "961ccd6b-f4b7-43b4-8022-58e9cd21bda8"
                  }
                }
              ]
            },
            {
              "id": "2794fb75-7c5e-4968-8217-5d8bd1aeeffd",
              "name": "Process Bank Transaction",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "real-transactions",
                    "process"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "abd91106-ebcb-4e5d-9577-190805188610",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bank transaction processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.transactionId).to.exist;",
                      "    pm.expect(response.bankReferenceId).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c6cdd288-6b1b-4109-ab81-65ff34afc853"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c4066b9d-3ab2-4f2f-8889-f87d14006614",
          "length": 32,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c332f173-d43a-4e10-b30a-16e9176354d9",
          "scriptId": "c299bc89-7bba-4aaf-b9cc-df021d14d906",
          "execution": "961ccd6b-f4b7-43b4-8022-58e9cd21bda8"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "b7e6b49f-089c-4bd4-9346-dd2c0010399e",
          "timestamp": 1755644195574,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "2794fb75-7c5e-4968-8217-5d8bd1aeeffd",
          "name": "Process Bank Transaction",
          "request": {
            "url": {
              "path": [
                "bank-simulator",
                "api",
                "real-transactions",
                "process"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abd91106-ebcb-4e5d-9577-190805188610",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bank transaction processed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.transactionId).to.exist;",
                  "    pm.expect(response.bankReferenceId).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "c6cdd288-6b1b-4109-ab81-65ff34afc853"
              }
            }
          ]
        },
        "parent": {
          "id": "9e0e11f3-ba7a-4afc-8b35-19f809f73d44",
          "name": "üè¶ Banking Simulation",
          "description": {
            "content": "Bank simulator for testing financial operations and UPI transactions",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d3df01cc-ac18-4c1a-87a0-771460de2457",
              "name": "Bank Simulator Health",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "dc3972e5-30c8-4338-9165-e1e05eb59b04",
              "name": "List Banks",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "banks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c299bc89-7bba-4aaf-b9cc-df021d14d906",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Banks list retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "    pm.expect(response.length).to.be.greaterThan(0);",
                      "    ",
                      "    // Store first bank for testing",
                      "    if (response.length > 0) {",
                      "        pm.environment.set('test_bank_code', response[0].code);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "961ccd6b-f4b7-43b4-8022-58e9cd21bda8"
                  }
                }
              ]
            },
            {
              "id": "2794fb75-7c5e-4968-8217-5d8bd1aeeffd",
              "name": "Process Bank Transaction",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "real-transactions",
                    "process"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "abd91106-ebcb-4e5d-9577-190805188610",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bank transaction processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.transactionId).to.exist;",
                      "    pm.expect(response.bankReferenceId).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c6cdd288-6b1b-4109-ab81-65ff34afc853"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cba067d4-892d-4ab5-b0ac-7f40d87d888a",
          "length": 32,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8e84d2e8-efe1-4876-b243-961fa6ca4c06",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Bank transaction processed",
          "message": "expected undefined to be true",
          "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:1:18)",
          "checksum": "0d664fcae57189816a005b834482901f",
          "id": "a658de9d-3a1d-4898-b200-111a3c38c4d6",
          "timestamp": 1755644195575,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2794fb75-7c5e-4968-8217-5d8bd1aeeffd",
          "name": "Process Bank Transaction",
          "request": {
            "url": {
              "path": [
                "bank-simulator",
                "api",
                "real-transactions",
                "process"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abd91106-ebcb-4e5d-9577-190805188610",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bank transaction processed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.transactionId).to.exist;",
                  "    pm.expect(response.bankReferenceId).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "c6cdd288-6b1b-4109-ab81-65ff34afc853"
              }
            }
          ]
        },
        "parent": {
          "id": "9e0e11f3-ba7a-4afc-8b35-19f809f73d44",
          "name": "üè¶ Banking Simulation",
          "description": {
            "content": "Bank simulator for testing financial operations and UPI transactions",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d3df01cc-ac18-4c1a-87a0-771460de2457",
              "name": "Bank Simulator Health",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "dc3972e5-30c8-4338-9165-e1e05eb59b04",
              "name": "List Banks",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "banks"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c299bc89-7bba-4aaf-b9cc-df021d14d906",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Banks list retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "    pm.expect(response.length).to.be.greaterThan(0);",
                      "    ",
                      "    // Store first bank for testing",
                      "    if (response.length > 0) {",
                      "        pm.environment.set('test_bank_code', response[0].code);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "961ccd6b-f4b7-43b4-8022-58e9cd21bda8"
                  }
                }
              ]
            },
            {
              "id": "2794fb75-7c5e-4968-8217-5d8bd1aeeffd",
              "name": "Process Bank Transaction",
              "request": {
                "url": {
                  "path": [
                    "bank-simulator",
                    "api",
                    "real-transactions",
                    "process"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"transactionId\": \"TXN{{$randomInt}}\",\n  \"bankCode\": \"{{test_bank_code}}\",\n  \"accountNumber\": \"50100123456789\",\n  \"amountPaisa\": 150000,\n  \"type\": \"DEBIT\",\n  \"reference\": \"Test transaction via Postman\",\n  \"description\": \"API testing transaction\",\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman-api-test\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "abd91106-ebcb-4e5d-9577-190805188610",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bank transaction processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.transactionId).to.exist;",
                      "    pm.expect(response.bankReferenceId).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "c6cdd288-6b1b-4109-ab81-65ff34afc853"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cba067d4-892d-4ab5-b0ac-7f40d87d888a",
          "length": 32,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8e84d2e8-efe1-4876-b243-961fa6ca4c06",
          "scriptId": "abd91106-ebcb-4e5d-9577-190805188610",
          "execution": "c6cdd288-6b1b-4109-ab81-65ff34afc853"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "ea45c1a6-2399-431e-85fc-747e275ed54b",
          "timestamp": 1755644195588,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "e98ec437-a48b-40a2-a75d-3f4a22cb6561",
          "name": "UPI Core Health",
          "request": {
            "url": {
              "path": [
                "upi-core",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "4b9bb478-4396-4517-907e-4f09660dffd9",
          "name": "üîÑ UPI Core",
          "description": {
            "content": "UPI transaction processing and VPA management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e98ec437-a48b-40a2-a75d-3f4a22cb6561",
              "name": "UPI Core Health",
              "request": {
                "url": {
                  "path": [
                    "upi-core",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "07014657-9b3e-430f-872b-db505b220daf",
              "name": "Process UPI Transaction",
              "request": {
                "url": {
                  "path": [
                    "upi-core",
                    "upi",
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"transactionId\": \"UPI{{$randomInt}}\",\n  \"payerVpa\": \"test@paytm\",\n  \"payeeVpa\": \"merchant@phonepe\",\n  \"amountPaisa\": 50000,\n  \"type\": \"P2M\",\n  \"reference\": \"Test UPI payment\",\n  \"payerBankCode\": \"HDFC\",\n  \"payeeBankCode\": \"ICICI\",\n  \"digitalSignature\": \"SHA256:test-signature\",\n  \"initiatedAt\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "784297c4-ab09-4085-b92b-cae5bca1e51d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('UPI transaction processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.transactionId).to.exist;",
                      "    pm.expect(response.rrn).to.exist;",
                      "    pm.expect(response.status).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "2deb4c4e-2198-4165-90ba-5efff78f88fc"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0df7275f-1c87-4b3e-a075-2e0ed41b86dd",
          "length": 32,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d06e0ded-6004-4154-a483-58e45df42b44",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "1ff08008-8cf9-4daa-a8f9-303a6d46aa3d",
          "timestamp": 1755644195601,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "07014657-9b3e-430f-872b-db505b220daf",
          "name": "Process UPI Transaction",
          "request": {
            "url": {
              "path": [
                "upi-core",
                "upi",
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"UPI{{$randomInt}}\",\n  \"payerVpa\": \"test@paytm\",\n  \"payeeVpa\": \"merchant@phonepe\",\n  \"amountPaisa\": 50000,\n  \"type\": \"P2M\",\n  \"reference\": \"Test UPI payment\",\n  \"payerBankCode\": \"HDFC\",\n  \"payeeBankCode\": \"ICICI\",\n  \"digitalSignature\": \"SHA256:test-signature\",\n  \"initiatedAt\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "784297c4-ab09-4085-b92b-cae5bca1e51d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('UPI transaction processed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.transactionId).to.exist;",
                  "    pm.expect(response.rrn).to.exist;",
                  "    pm.expect(response.status).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "2deb4c4e-2198-4165-90ba-5efff78f88fc"
              }
            }
          ]
        },
        "parent": {
          "id": "4b9bb478-4396-4517-907e-4f09660dffd9",
          "name": "üîÑ UPI Core",
          "description": {
            "content": "UPI transaction processing and VPA management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e98ec437-a48b-40a2-a75d-3f4a22cb6561",
              "name": "UPI Core Health",
              "request": {
                "url": {
                  "path": [
                    "upi-core",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "07014657-9b3e-430f-872b-db505b220daf",
              "name": "Process UPI Transaction",
              "request": {
                "url": {
                  "path": [
                    "upi-core",
                    "upi",
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"transactionId\": \"UPI{{$randomInt}}\",\n  \"payerVpa\": \"test@paytm\",\n  \"payeeVpa\": \"merchant@phonepe\",\n  \"amountPaisa\": 50000,\n  \"type\": \"P2M\",\n  \"reference\": \"Test UPI payment\",\n  \"payerBankCode\": \"HDFC\",\n  \"payeeBankCode\": \"ICICI\",\n  \"digitalSignature\": \"SHA256:test-signature\",\n  \"initiatedAt\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "784297c4-ab09-4085-b92b-cae5bca1e51d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('UPI transaction processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.transactionId).to.exist;",
                      "    pm.expect(response.rrn).to.exist;",
                      "    pm.expect(response.status).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "2deb4c4e-2198-4165-90ba-5efff78f88fc"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "410c8932-f9a8-4f42-92b5-8e69943741ae",
          "length": 32,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3999aa28-1eea-4917-82b6-8b25b74cfb01",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "UPI transaction processed",
          "message": "expected undefined to exist",
          "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:20)",
          "checksum": "3b830904845c3568945cb6c02069ecff",
          "id": "d152fc63-93c7-4551-a046-a1f2bce25a77",
          "timestamp": 1755644195603,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "07014657-9b3e-430f-872b-db505b220daf",
          "name": "Process UPI Transaction",
          "request": {
            "url": {
              "path": [
                "upi-core",
                "upi",
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"UPI{{$randomInt}}\",\n  \"payerVpa\": \"test@paytm\",\n  \"payeeVpa\": \"merchant@phonepe\",\n  \"amountPaisa\": 50000,\n  \"type\": \"P2M\",\n  \"reference\": \"Test UPI payment\",\n  \"payerBankCode\": \"HDFC\",\n  \"payeeBankCode\": \"ICICI\",\n  \"digitalSignature\": \"SHA256:test-signature\",\n  \"initiatedAt\": \"{{$isoTimestamp}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "784297c4-ab09-4085-b92b-cae5bca1e51d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('UPI transaction processed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.transactionId).to.exist;",
                  "    pm.expect(response.rrn).to.exist;",
                  "    pm.expect(response.status).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "2deb4c4e-2198-4165-90ba-5efff78f88fc"
              }
            }
          ]
        },
        "parent": {
          "id": "4b9bb478-4396-4517-907e-4f09660dffd9",
          "name": "üîÑ UPI Core",
          "description": {
            "content": "UPI transaction processing and VPA management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e98ec437-a48b-40a2-a75d-3f4a22cb6561",
              "name": "UPI Core Health",
              "request": {
                "url": {
                  "path": [
                    "upi-core",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "07014657-9b3e-430f-872b-db505b220daf",
              "name": "Process UPI Transaction",
              "request": {
                "url": {
                  "path": [
                    "upi-core",
                    "upi",
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"transactionId\": \"UPI{{$randomInt}}\",\n  \"payerVpa\": \"test@paytm\",\n  \"payeeVpa\": \"merchant@phonepe\",\n  \"amountPaisa\": 50000,\n  \"type\": \"P2M\",\n  \"reference\": \"Test UPI payment\",\n  \"payerBankCode\": \"HDFC\",\n  \"payeeBankCode\": \"ICICI\",\n  \"digitalSignature\": \"SHA256:test-signature\",\n  \"initiatedAt\": \"{{$isoTimestamp}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "784297c4-ab09-4085-b92b-cae5bca1e51d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('UPI transaction processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.transactionId).to.exist;",
                      "    pm.expect(response.rrn).to.exist;",
                      "    pm.expect(response.status).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "2deb4c4e-2198-4165-90ba-5efff78f88fc"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "410c8932-f9a8-4f42-92b5-8e69943741ae",
          "length": 32,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3999aa28-1eea-4917-82b6-8b25b74cfb01",
          "scriptId": "784297c4-ab09-4085-b92b-cae5bca1e51d",
          "execution": "2deb4c4e-2198-4165-90ba-5efff78f88fc"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "94166deb-dfc5-42aa-af99-5b7e84fd7201",
          "timestamp": 1755644195616,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "e97a6f76-2397-49b2-bef3-21f06f48a40a",
          "name": "Analytics Health",
          "request": {
            "url": {
              "path": [
                "analytics",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "53ba3cc7-673c-47a1-986c-08459dc6ddb9",
          "name": "üìä Analytics & Tracking",
          "description": {
            "content": "Analytics data collection and reporting",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e97a6f76-2397-49b2-bef3-21f06f48a40a",
              "name": "Analytics Health",
              "request": {
                "url": {
                  "path": [
                    "analytics",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "524f72ed-ef72-4071-8bad-f995bede011b",
              "name": "Track Event",
              "request": {
                "url": {
                  "path": [
                    "analytics",
                    "api",
                    "{{api_version}}",
                    "track"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"event\": \"api_test_event\",\n  \"userId\": \"{{test_user_id}}\",\n  \"properties\": {\n    \"source\": \"postman\",\n    \"testId\": \"{{correlationId}}\",\n    \"timestamp\": \"{{$isoTimestamp}}\",\n    \"userAgent\": \"Postman/API-Test\"\n  },\n  \"context\": {\n    \"ip\": \"127.0.0.1\",\n    \"userAgent\": \"Postman API Testing Suite\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aa00a37f-b605-47cc-8f04-5020990962f3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Event tracked successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "42115fb7-ef09-4871-bd4d-a99c903a93ff"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "62508137-5976-4be3-a9c2-f8230c0c3d6e",
          "length": 32,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1dffe813-6449-46e8-83cb-026ad1718b49",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "c2dbb985-e90c-4f3a-86b8-c31ff966d3b1",
          "timestamp": 1755644195629,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "524f72ed-ef72-4071-8bad-f995bede011b",
          "name": "Track Event",
          "request": {
            "url": {
              "path": [
                "analytics",
                "api",
                "{{api_version}}",
                "track"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"event\": \"api_test_event\",\n  \"userId\": \"{{test_user_id}}\",\n  \"properties\": {\n    \"source\": \"postman\",\n    \"testId\": \"{{correlationId}}\",\n    \"timestamp\": \"{{$isoTimestamp}}\",\n    \"userAgent\": \"Postman/API-Test\"\n  },\n  \"context\": {\n    \"ip\": \"127.0.0.1\",\n    \"userAgent\": \"Postman API Testing Suite\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aa00a37f-b605-47cc-8f04-5020990962f3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Event tracked successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "42115fb7-ef09-4871-bd4d-a99c903a93ff"
              }
            }
          ]
        },
        "parent": {
          "id": "53ba3cc7-673c-47a1-986c-08459dc6ddb9",
          "name": "üìä Analytics & Tracking",
          "description": {
            "content": "Analytics data collection and reporting",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e97a6f76-2397-49b2-bef3-21f06f48a40a",
              "name": "Analytics Health",
              "request": {
                "url": {
                  "path": [
                    "analytics",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "524f72ed-ef72-4071-8bad-f995bede011b",
              "name": "Track Event",
              "request": {
                "url": {
                  "path": [
                    "analytics",
                    "api",
                    "{{api_version}}",
                    "track"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"event\": \"api_test_event\",\n  \"userId\": \"{{test_user_id}}\",\n  \"properties\": {\n    \"source\": \"postman\",\n    \"testId\": \"{{correlationId}}\",\n    \"timestamp\": \"{{$isoTimestamp}}\",\n    \"userAgent\": \"Postman/API-Test\"\n  },\n  \"context\": {\n    \"ip\": \"127.0.0.1\",\n    \"userAgent\": \"Postman API Testing Suite\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aa00a37f-b605-47cc-8f04-5020990962f3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Event tracked successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "42115fb7-ef09-4871-bd4d-a99c903a93ff"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "52d7a466-cae1-43a1-9c41-cd30e3065cb7",
          "length": 32,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ef40a105-0d31-4348-b893-116f63bde003",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "78b54c90-e071-4f41-aa92-183f87901fa4",
          "timestamp": 1755644195645,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "d273affe-384a-4f8d-84fa-2c8f33f8b7d6",
          "name": "Notifications Health",
          "request": {
            "url": {
              "path": [
                "notifications",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "01780c41-924f-49d7-90a2-76211a4909ba",
          "name": "üîî Notifications",
          "description": {
            "content": "Notification service for email, SMS, and push notifications",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d273affe-384a-4f8d-84fa-2c8f33f8b7d6",
              "name": "Notifications Health",
              "request": {
                "url": {
                  "path": [
                    "notifications",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "b1e30861-d1b7-4437-977f-4eb0cb27f36c",
              "name": "Send Email Notification",
              "request": {
                "url": {
                  "path": [
                    "notifications",
                    "api",
                    "{{api_version}}",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"email\",\n  \"recipient\": \"{{test_user_email}}\",\n  \"template\": \"test_notification\",\n  \"subject\": \"API Test Notification\",\n  \"data\": {\n    \"userName\": \"Test User\",\n    \"message\": \"This is a test notification from Postman API testing\",\n    \"testId\": \"{{correlationId}}\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3426ed84-126e-4f82-93ec-719a48f18ab2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Email notification sent', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "4f82917f-6491-43dd-8d92-1470eb0724b8"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ecdfdab5-9689-478a-aa3d-c0cde285fd52",
          "length": 32,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "86720be7-3a05-4d81-90ab-6f42da01e09f",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "805fcd35-ed99-46e5-bac3-08e4bd161ba6",
          "timestamp": 1755644195658,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "b1e30861-d1b7-4437-977f-4eb0cb27f36c",
          "name": "Send Email Notification",
          "request": {
            "url": {
              "path": [
                "notifications",
                "api",
                "{{api_version}}",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"email\",\n  \"recipient\": \"{{test_user_email}}\",\n  \"template\": \"test_notification\",\n  \"subject\": \"API Test Notification\",\n  \"data\": {\n    \"userName\": \"Test User\",\n    \"message\": \"This is a test notification from Postman API testing\",\n    \"testId\": \"{{correlationId}}\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3426ed84-126e-4f82-93ec-719a48f18ab2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Email notification sent', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "4f82917f-6491-43dd-8d92-1470eb0724b8"
              }
            }
          ]
        },
        "parent": {
          "id": "01780c41-924f-49d7-90a2-76211a4909ba",
          "name": "üîî Notifications",
          "description": {
            "content": "Notification service for email, SMS, and push notifications",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d273affe-384a-4f8d-84fa-2c8f33f8b7d6",
              "name": "Notifications Health",
              "request": {
                "url": {
                  "path": [
                    "notifications",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "b1e30861-d1b7-4437-977f-4eb0cb27f36c",
              "name": "Send Email Notification",
              "request": {
                "url": {
                  "path": [
                    "notifications",
                    "api",
                    "{{api_version}}",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"email\",\n  \"recipient\": \"{{test_user_email}}\",\n  \"template\": \"test_notification\",\n  \"subject\": \"API Test Notification\",\n  \"data\": {\n    \"userName\": \"Test User\",\n    \"message\": \"This is a test notification from Postman API testing\",\n    \"testId\": \"{{correlationId}}\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3426ed84-126e-4f82-93ec-719a48f18ab2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Email notification sent', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "4f82917f-6491-43dd-8d92-1470eb0724b8"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0a30d775-1a24-41e3-812a-a790b0d172be",
          "length": 32,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f59409c5-8dfd-4ba7-a7d1-95cf149c74d3",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Email notification sent",
          "message": "expected undefined to be true",
          "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:1:24)",
          "checksum": "eabfd423397f712b82b6aa8282cf7672",
          "id": "955ce04c-44f9-4575-a5ea-c4e4c9d676d2",
          "timestamp": 1755644195659,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b1e30861-d1b7-4437-977f-4eb0cb27f36c",
          "name": "Send Email Notification",
          "request": {
            "url": {
              "path": [
                "notifications",
                "api",
                "{{api_version}}",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"email\",\n  \"recipient\": \"{{test_user_email}}\",\n  \"template\": \"test_notification\",\n  \"subject\": \"API Test Notification\",\n  \"data\": {\n    \"userName\": \"Test User\",\n    \"message\": \"This is a test notification from Postman API testing\",\n    \"testId\": \"{{correlationId}}\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3426ed84-126e-4f82-93ec-719a48f18ab2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Email notification sent', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "4f82917f-6491-43dd-8d92-1470eb0724b8"
              }
            }
          ]
        },
        "parent": {
          "id": "01780c41-924f-49d7-90a2-76211a4909ba",
          "name": "üîî Notifications",
          "description": {
            "content": "Notification service for email, SMS, and push notifications",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d273affe-384a-4f8d-84fa-2c8f33f8b7d6",
              "name": "Notifications Health",
              "request": {
                "url": {
                  "path": [
                    "notifications",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "b1e30861-d1b7-4437-977f-4eb0cb27f36c",
              "name": "Send Email Notification",
              "request": {
                "url": {
                  "path": [
                    "notifications",
                    "api",
                    "{{api_version}}",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"email\",\n  \"recipient\": \"{{test_user_email}}\",\n  \"template\": \"test_notification\",\n  \"subject\": \"API Test Notification\",\n  \"data\": {\n    \"userName\": \"Test User\",\n    \"message\": \"This is a test notification from Postman API testing\",\n    \"testId\": \"{{correlationId}}\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3426ed84-126e-4f82-93ec-719a48f18ab2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Email notification sent', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "4f82917f-6491-43dd-8d92-1470eb0724b8"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0a30d775-1a24-41e3-812a-a790b0d172be",
          "length": 32,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f59409c5-8dfd-4ba7-a7d1-95cf149c74d3",
          "scriptId": "3426ed84-126e-4f82-93ec-719a48f18ab2",
          "execution": "4f82917f-6491-43dd-8d92-1470eb0724b8"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "c39fceab-b374-4c81-9c82-4deae314695e",
          "timestamp": 1755644195672,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "3e70be0e-4d36-4413-a579-eacfac61a6bc",
          "name": "Live Classes Health",
          "request": {
            "url": {
              "path": [
                "live-classes",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "523369cf-59b2-4a7a-8ad6-1def8a4a2d70",
          "name": "üéì Live Classes",
          "description": {
            "content": "Live streaming and class management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3e70be0e-4d36-4413-a579-eacfac61a6bc",
              "name": "Live Classes Health",
              "request": {
                "url": {
                  "path": [
                    "live-classes",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "179bb341-898e-4318-bf39-6fa40c433ba9",
              "name": "Create Live Session",
              "request": {
                "url": {
                  "path": [
                    "live-classes",
                    "api",
                    "{{api_version}}",
                    "sessions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Live Session\",\n  \"description\": \"API testing live session\",\n  \"scheduledAt\": \"{{$isoTimestamp}}\",\n  \"duration\": 3600,\n  \"maxParticipants\": 100,\n  \"isRecorded\": true,\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc5e248b-327f-41f2-b809-baf31c1e47b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Live session created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.streamUrl).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "da61c0fb-4fcf-4544-b891-7c97240a960b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7106021b-c799-479e-ad67-4125d21c64b1",
          "length": 32,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c4f99c33-86e2-41a7-846f-7839a4087e30",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "1803b458-e54a-4df2-b7b2-5e5e39c2927d",
          "timestamp": 1755644195685,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "179bb341-898e-4318-bf39-6fa40c433ba9",
          "name": "Create Live Session",
          "request": {
            "url": {
              "path": [
                "live-classes",
                "api",
                "{{api_version}}",
                "sessions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Live Session\",\n  \"description\": \"API testing live session\",\n  \"scheduledAt\": \"{{$isoTimestamp}}\",\n  \"duration\": 3600,\n  \"maxParticipants\": 100,\n  \"isRecorded\": true,\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc5e248b-327f-41f2-b809-baf31c1e47b5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Live session created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.streamUrl).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "da61c0fb-4fcf-4544-b891-7c97240a960b"
              }
            }
          ]
        },
        "parent": {
          "id": "523369cf-59b2-4a7a-8ad6-1def8a4a2d70",
          "name": "üéì Live Classes",
          "description": {
            "content": "Live streaming and class management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3e70be0e-4d36-4413-a579-eacfac61a6bc",
              "name": "Live Classes Health",
              "request": {
                "url": {
                  "path": [
                    "live-classes",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "179bb341-898e-4318-bf39-6fa40c433ba9",
              "name": "Create Live Session",
              "request": {
                "url": {
                  "path": [
                    "live-classes",
                    "api",
                    "{{api_version}}",
                    "sessions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Live Session\",\n  \"description\": \"API testing live session\",\n  \"scheduledAt\": \"{{$isoTimestamp}}\",\n  \"duration\": 3600,\n  \"maxParticipants\": 100,\n  \"isRecorded\": true,\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc5e248b-327f-41f2-b809-baf31c1e47b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Live session created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.streamUrl).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "da61c0fb-4fcf-4544-b891-7c97240a960b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8b137ef6-8596-4668-a0bb-ee7d0238e6e2",
          "length": 32,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2a01f863-4398-4143-92d9-5ca58599f818",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Live session created",
          "message": "expected response to have status code 201 but got 200",
          "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:26)",
          "checksum": "fc0d67e7fd42589442156a85c792a684",
          "id": "7c409d1c-bdb0-4cc2-beec-222ad779d887",
          "timestamp": 1755644195686,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "179bb341-898e-4318-bf39-6fa40c433ba9",
          "name": "Create Live Session",
          "request": {
            "url": {
              "path": [
                "live-classes",
                "api",
                "{{api_version}}",
                "sessions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Live Session\",\n  \"description\": \"API testing live session\",\n  \"scheduledAt\": \"{{$isoTimestamp}}\",\n  \"duration\": 3600,\n  \"maxParticipants\": 100,\n  \"isRecorded\": true,\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc5e248b-327f-41f2-b809-baf31c1e47b5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Live session created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.exist;",
                  "    pm.expect(response.streamUrl).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "da61c0fb-4fcf-4544-b891-7c97240a960b"
              }
            }
          ]
        },
        "parent": {
          "id": "523369cf-59b2-4a7a-8ad6-1def8a4a2d70",
          "name": "üéì Live Classes",
          "description": {
            "content": "Live streaming and class management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3e70be0e-4d36-4413-a579-eacfac61a6bc",
              "name": "Live Classes Health",
              "request": {
                "url": {
                  "path": [
                    "live-classes",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "179bb341-898e-4318-bf39-6fa40c433ba9",
              "name": "Create Live Session",
              "request": {
                "url": {
                  "path": [
                    "live-classes",
                    "api",
                    "{{api_version}}",
                    "sessions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Live Session\",\n  \"description\": \"API testing live session\",\n  \"scheduledAt\": \"{{$isoTimestamp}}\",\n  \"duration\": 3600,\n  \"maxParticipants\": 100,\n  \"isRecorded\": true,\n  \"metadata\": {\n    \"testId\": \"{{correlationId}}\",\n    \"source\": \"postman\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc5e248b-327f-41f2-b809-baf31c1e47b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Live session created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.exist;",
                      "    pm.expect(response.streamUrl).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "da61c0fb-4fcf-4544-b891-7c97240a960b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8b137ef6-8596-4668-a0bb-ee7d0238e6e2",
          "length": 32,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2a01f863-4398-4143-92d9-5ca58599f818",
          "scriptId": "bc5e248b-327f-41f2-b809-baf31c1e47b5",
          "execution": "da61c0fb-4fcf-4544-b891-7c97240a960b"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "f7ea3092-a2c5-40a3-9de8-96cffa8d675c",
          "timestamp": 1755644195698,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "041f7780-4d4e-4483-9d37-829cc79fcb3f",
          "name": "LLM Tutor Health",
          "request": {
            "url": {
              "path": [
                "llm-tutor",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "13015755-89ab-4d75-8af3-86005d4b904b",
          "name": "ü§ñ LLM Tutor",
          "description": {
            "content": "AI-powered tutoring and educational assistance",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "041f7780-4d4e-4483-9d37-829cc79fcb3f",
              "name": "LLM Tutor Health",
              "request": {
                "url": {
                  "path": [
                    "llm-tutor",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2007e7f0-431f-4492-88c8-a1cea44e3854",
              "name": "Ask Question to Tutor",
              "request": {
                "url": {
                  "path": [
                    "llm-tutor",
                    "api",
                    "{{api_version}}",
                    "ask"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"question\": \"Explain the concept of machine learning in simple terms\",\n  \"context\": {\n    \"subject\": \"computer-science\",\n    \"level\": \"beginner\",\n    \"userId\": \"{{test_user_id}}\"\n  },\n  \"preferences\": {\n    \"responseLength\": \"medium\",\n    \"includeExamples\": true\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b6dad81c-ef19-4494-ad17-f367722f07a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Tutor response received', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.answer).to.exist;",
                      "    pm.expect(response.confidence).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "99269ae9-a0d5-4833-b718-7b223fc96528"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e17f7c61-caa2-430a-860b-002440a57fb1",
          "length": 32,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8d379008-1475-495f-a91e-85d0fe48a7c1",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "172d56ce-1780-492a-894d-817d01b85d24",
          "timestamp": 1755644195710,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "2007e7f0-431f-4492-88c8-a1cea44e3854",
          "name": "Ask Question to Tutor",
          "request": {
            "url": {
              "path": [
                "llm-tutor",
                "api",
                "{{api_version}}",
                "ask"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"Explain the concept of machine learning in simple terms\",\n  \"context\": {\n    \"subject\": \"computer-science\",\n    \"level\": \"beginner\",\n    \"userId\": \"{{test_user_id}}\"\n  },\n  \"preferences\": {\n    \"responseLength\": \"medium\",\n    \"includeExamples\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b6dad81c-ef19-4494-ad17-f367722f07a3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Tutor response received', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.answer).to.exist;",
                  "    pm.expect(response.confidence).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "99269ae9-a0d5-4833-b718-7b223fc96528"
              }
            }
          ]
        },
        "parent": {
          "id": "13015755-89ab-4d75-8af3-86005d4b904b",
          "name": "ü§ñ LLM Tutor",
          "description": {
            "content": "AI-powered tutoring and educational assistance",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "041f7780-4d4e-4483-9d37-829cc79fcb3f",
              "name": "LLM Tutor Health",
              "request": {
                "url": {
                  "path": [
                    "llm-tutor",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2007e7f0-431f-4492-88c8-a1cea44e3854",
              "name": "Ask Question to Tutor",
              "request": {
                "url": {
                  "path": [
                    "llm-tutor",
                    "api",
                    "{{api_version}}",
                    "ask"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"question\": \"Explain the concept of machine learning in simple terms\",\n  \"context\": {\n    \"subject\": \"computer-science\",\n    \"level\": \"beginner\",\n    \"userId\": \"{{test_user_id}}\"\n  },\n  \"preferences\": {\n    \"responseLength\": \"medium\",\n    \"includeExamples\": true\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b6dad81c-ef19-4494-ad17-f367722f07a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Tutor response received', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.answer).to.exist;",
                      "    pm.expect(response.confidence).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "99269ae9-a0d5-4833-b718-7b223fc96528"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f5b18625-29f6-4c45-9849-0c876d64594f",
          "length": 32,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a740569a-9428-4d1e-9d8b-b7e8bdcad857",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Tutor response received",
          "message": "expected undefined to exist",
          "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:28)",
          "checksum": "d09774fb9542a06398179dd381356c70",
          "id": "087eb662-52a0-4076-a74a-04d9e9566fe7",
          "timestamp": 1755644195712,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2007e7f0-431f-4492-88c8-a1cea44e3854",
          "name": "Ask Question to Tutor",
          "request": {
            "url": {
              "path": [
                "llm-tutor",
                "api",
                "{{api_version}}",
                "ask"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"Explain the concept of machine learning in simple terms\",\n  \"context\": {\n    \"subject\": \"computer-science\",\n    \"level\": \"beginner\",\n    \"userId\": \"{{test_user_id}}\"\n  },\n  \"preferences\": {\n    \"responseLength\": \"medium\",\n    \"includeExamples\": true\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b6dad81c-ef19-4494-ad17-f367722f07a3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Tutor response received', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.answer).to.exist;",
                  "    pm.expect(response.confidence).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "99269ae9-a0d5-4833-b718-7b223fc96528"
              }
            }
          ]
        },
        "parent": {
          "id": "13015755-89ab-4d75-8af3-86005d4b904b",
          "name": "ü§ñ LLM Tutor",
          "description": {
            "content": "AI-powered tutoring and educational assistance",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "041f7780-4d4e-4483-9d37-829cc79fcb3f",
              "name": "LLM Tutor Health",
              "request": {
                "url": {
                  "path": [
                    "llm-tutor",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "2007e7f0-431f-4492-88c8-a1cea44e3854",
              "name": "Ask Question to Tutor",
              "request": {
                "url": {
                  "path": [
                    "llm-tutor",
                    "api",
                    "{{api_version}}",
                    "ask"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"question\": \"Explain the concept of machine learning in simple terms\",\n  \"context\": {\n    \"subject\": \"computer-science\",\n    \"level\": \"beginner\",\n    \"userId\": \"{{test_user_id}}\"\n  },\n  \"preferences\": {\n    \"responseLength\": \"medium\",\n    \"includeExamples\": true\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b6dad81c-ef19-4494-ad17-f367722f07a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Tutor response received', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.answer).to.exist;",
                      "    pm.expect(response.confidence).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "99269ae9-a0d5-4833-b718-7b223fc96528"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f5b18625-29f6-4c45-9849-0c876d64594f",
          "length": 32,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a740569a-9428-4d1e-9d8b-b7e8bdcad857",
          "scriptId": "b6dad81c-ef19-4494-ad17-f367722f07a3",
          "execution": "99269ae9-a0d5-4833-b718-7b223fc96528"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "a0f30bea-8578-4515-96b0-379e88a02c7b",
          "timestamp": 1755644195724,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "e97f6bd2-12bb-4c8d-8812-71a006770ae4",
          "name": "Recommendations Health",
          "request": {
            "url": {
              "path": [
                "recommendations",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "452c0631-8bf0-477b-b48d-b328c5149fa6",
          "name": "üìà Recommendations",
          "description": {
            "content": "AI-powered content and course recommendations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e97f6bd2-12bb-4c8d-8812-71a006770ae4",
              "name": "Recommendations Health",
              "request": {
                "url": {
                  "path": [
                    "recommendations",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "a3757f2c-fee9-46f7-badf-66f67f8049e3",
              "name": "Get User Recommendations",
              "request": {
                "url": {
                  "path": [
                    "recommendations",
                    "api",
                    "{{api_version}}",
                    "users",
                    "{{test_user_id}}",
                    "recommendations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "courses"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1b9f8c55-bfe7-4fb3-9589-fb5ac7770a8a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Recommendations retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.recommendations).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "83136293-0342-4dc0-b5fe-e76e86a3d357"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8560d728-dfdb-4d03-8c79-1d412f6508d8",
          "length": 32,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "777693d6-5ba2-4078-87c4-3c43f093d1d6",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "eaf44a36-d9c8-4831-8902-d2894ada7a85",
          "timestamp": 1755644195745,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "a3757f2c-fee9-46f7-badf-66f67f8049e3",
          "name": "Get User Recommendations",
          "request": {
            "url": {
              "path": [
                "recommendations",
                "api",
                "{{api_version}}",
                "users",
                "{{test_user_id}}",
                "recommendations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "courses"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1b9f8c55-bfe7-4fb3-9589-fb5ac7770a8a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Recommendations retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.recommendations).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "83136293-0342-4dc0-b5fe-e76e86a3d357"
              }
            }
          ]
        },
        "parent": {
          "id": "452c0631-8bf0-477b-b48d-b328c5149fa6",
          "name": "üìà Recommendations",
          "description": {
            "content": "AI-powered content and course recommendations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e97f6bd2-12bb-4c8d-8812-71a006770ae4",
              "name": "Recommendations Health",
              "request": {
                "url": {
                  "path": [
                    "recommendations",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "a3757f2c-fee9-46f7-badf-66f67f8049e3",
              "name": "Get User Recommendations",
              "request": {
                "url": {
                  "path": [
                    "recommendations",
                    "api",
                    "{{api_version}}",
                    "users",
                    "{{test_user_id}}",
                    "recommendations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "courses"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1b9f8c55-bfe7-4fb3-9589-fb5ac7770a8a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Recommendations retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.recommendations).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "83136293-0342-4dc0-b5fe-e76e86a3d357"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a0d05a76-6ee7-4d23-b9e6-0c6752bcaee4",
          "length": 32,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f1917142-8d83-4782-b819-5bfef87f71a6",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Recommendations retrieved",
          "message": "expected undefined to be an array",
          "stack": "AssertionError: expected undefined to be an array\n   at Object.eval sandbox-script.js:1:30)",
          "checksum": "86d0870bac5462a4d21b492936d1e05c",
          "id": "95a9b9fd-08ac-4f77-8e2a-9a59abe76d87",
          "timestamp": 1755644195746,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 30,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a3757f2c-fee9-46f7-badf-66f67f8049e3",
          "name": "Get User Recommendations",
          "request": {
            "url": {
              "path": [
                "recommendations",
                "api",
                "{{api_version}}",
                "users",
                "{{test_user_id}}",
                "recommendations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "courses"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1b9f8c55-bfe7-4fb3-9589-fb5ac7770a8a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Recommendations retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.recommendations).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "83136293-0342-4dc0-b5fe-e76e86a3d357"
              }
            }
          ]
        },
        "parent": {
          "id": "452c0631-8bf0-477b-b48d-b328c5149fa6",
          "name": "üìà Recommendations",
          "description": {
            "content": "AI-powered content and course recommendations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e97f6bd2-12bb-4c8d-8812-71a006770ae4",
              "name": "Recommendations Health",
              "request": {
                "url": {
                  "path": [
                    "recommendations",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "a3757f2c-fee9-46f7-badf-66f67f8049e3",
              "name": "Get User Recommendations",
              "request": {
                "url": {
                  "path": [
                    "recommendations",
                    "api",
                    "{{api_version}}",
                    "users",
                    "{{test_user_id}}",
                    "recommendations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "courses"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1b9f8c55-bfe7-4fb3-9589-fb5ac7770a8a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Recommendations retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.recommendations).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "83136293-0342-4dc0-b5fe-e76e86a3d357"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a0d05a76-6ee7-4d23-b9e6-0c6752bcaee4",
          "length": 32,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f1917142-8d83-4782-b819-5bfef87f71a6",
          "scriptId": "1b9f8c55-bfe7-4fb3-9589-fb5ac7770a8a",
          "execution": "83136293-0342-4dc0-b5fe-e76e86a3d357"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "1cd08b1a-2028-487e-af8d-e00c72f34d3b",
          "timestamp": 1755644195758,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "1afc09b4-3fd3-477b-9438-33003d88c60d",
          "name": "Admin Dashboard Health",
          "request": {
            "url": {
              "path": [
                "admin",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "parent": {
          "id": "c715546c-bfd0-40ca-889d-b1764d9e1807",
          "name": "üîß Admin Operations",
          "description": {
            "content": "Administrative operations and system management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1afc09b4-3fd3-477b-9438-33003d88c60d",
              "name": "Admin Dashboard Health",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "58dbc737-148f-431b-b1cc-2264e23433b5",
              "name": "Get System Status",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "api",
                    "{{api_version}}",
                    "system",
                    "status"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8be45ff-3b4c-4afd-9ce8-7ae6a1cc23bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('System status retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.services).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "489eafe4-b2c0-465b-bc44-a0cc40e9e0d3"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "044d2f4e-e269-40f2-8e8f-3753690d41d1",
          "length": 32,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c4890d90-ac9f-46a1-a1eb-9293cca921cb",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "fd873311-1f13-46e4-b265-9ba65c2bf8d3",
          "timestamp": 1755644195770,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "58dbc737-148f-431b-b1cc-2264e23433b5",
          "name": "Get System Status",
          "request": {
            "url": {
              "path": [
                "admin",
                "api",
                "{{api_version}}",
                "system",
                "status"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b8be45ff-3b4c-4afd-9ce8-7ae6a1cc23bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('System status retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.services).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "489eafe4-b2c0-465b-bc44-a0cc40e9e0d3"
              }
            }
          ]
        },
        "parent": {
          "id": "c715546c-bfd0-40ca-889d-b1764d9e1807",
          "name": "üîß Admin Operations",
          "description": {
            "content": "Administrative operations and system management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1afc09b4-3fd3-477b-9438-33003d88c60d",
              "name": "Admin Dashboard Health",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "58dbc737-148f-431b-b1cc-2264e23433b5",
              "name": "Get System Status",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "api",
                    "{{api_version}}",
                    "system",
                    "status"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8be45ff-3b4c-4afd-9ce8-7ae6a1cc23bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('System status retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.services).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "489eafe4-b2c0-465b-bc44-a0cc40e9e0d3"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "04e12063-be7e-4217-adc1-97985147651b",
          "length": 32,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "02047267-c4a0-4257-b04a-be504a14dfe8",
          "scriptId": "eed42074-bbbc-4bf0-ac95-1c1c2a526774"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "System status retrieved",
          "message": "expected undefined to exist",
          "stack": "AssertionError: expected undefined to exist\n   at Object.eval sandbox-script.js:1:32)",
          "checksum": "46a808d2dde35a6620a2393af326586e",
          "id": "8932f2f4-7db6-43b5-80c3-19cd476c412e",
          "timestamp": 1755644195771,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "58dbc737-148f-431b-b1cc-2264e23433b5",
          "name": "Get System Status",
          "request": {
            "url": {
              "path": [
                "admin",
                "api",
                "{{api_version}}",
                "system",
                "status"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b8be45ff-3b4c-4afd-9ce8-7ae6a1cc23bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('System status retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.services).to.exist;",
                  "});"
                ],
                "_lastExecutionId": "489eafe4-b2c0-465b-bc44-a0cc40e9e0d3"
              }
            }
          ]
        },
        "parent": {
          "id": "c715546c-bfd0-40ca-889d-b1764d9e1807",
          "name": "üîß Admin Operations",
          "description": {
            "content": "Administrative operations and system management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1afc09b4-3fd3-477b-9438-33003d88c60d",
              "name": "Admin Dashboard Health",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "58dbc737-148f-431b-b1cc-2264e23433b5",
              "name": "Get System Status",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "api",
                    "{{api_version}}",
                    "system",
                    "status"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8be45ff-3b4c-4afd-9ce8-7ae6a1cc23bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('System status retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.services).to.exist;",
                      "});"
                    ],
                    "_lastExecutionId": "489eafe4-b2c0-465b-bc44-a0cc40e9e0d3"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "04e12063-be7e-4217-adc1-97985147651b",
          "length": 32,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "02047267-c4a0-4257-b04a-be504a14dfe8",
          "scriptId": "b8be45ff-3b4c-4afd-9ce8-7ae6a1cc23bc",
          "execution": "489eafe4-b2c0-465b-bc44-a0cc40e9e0d3"
        }
      }
    ],
    "error": null
  }
}