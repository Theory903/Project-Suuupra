# Suuupra Platform - Working Services Only (Production Grade)
# This includes only the confirmed working services for immediate deployment
version: '3.8'

networks:
  suuupra-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  jaeger_data:
  kafka_data:
  zookeeper_data:

services:
  # ============================================================================
  # INFRASTRUCTURE SERVICES
  # ============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: suuupra-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_MULTIPLE_DATABASES: identity,commerce,payments,ledger,bank_simulator,upi_core
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      suuupra-network:
        ipv4_address: 172.20.0.10
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: suuupra-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      suuupra-network:
        ipv4_address: 172.20.0.11
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: suuupra-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      suuupra-network:
        ipv4_address: 172.20.0.12
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: suuupra-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 172.20.0.12:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://172.20.0.13:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      suuupra-network:
        ipv4_address: 172.20.0.13
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: suuupra-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
      SPAN_STORAGE_TYPE: memory
    volumes:
      - jaeger_data:/tmp
    networks:
      suuupra-network:
        ipv4_address: 172.20.0.14
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: suuupra-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      suuupra-network:
        ipv4_address: 172.20.0.15
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.2.0
    container_name: suuupra-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      suuupra-network:
        ipv4_address: 172.20.0.16
    restart: unless-stopped

  # ============================================================================
  # WORKING SERVICES
  # ============================================================================

  # UPI Core - Known Working
  upi-core:
    build:
      context: ./services/upi-core
      dockerfile: Dockerfile
    container_name: suuupra-upi-core
    ports:
      - "8083:8081"
      - "50051:50051"
      - "9091:9090"
    environment:
      UPI_CORE_APP_ENVIRONMENT: production
      UPI_CORE_SERVER_HOST: 0.0.0.0
      UPI_CORE_SERVER_PORT: 50051
      UPI_CORE_DATABASE_HOST: 172.20.0.10
      UPI_CORE_DATABASE_PORT: 5432
      UPI_CORE_DATABASE_USERNAME: postgres
      UPI_CORE_DATABASE_PASSWORD: password
      UPI_CORE_DATABASE_DATABASE: upi_core
      UPI_CORE_REDIS_HOST: 172.20.0.11
      UPI_CORE_REDIS_PORT: 6379
      UPI_CORE_KAFKA_BROKERS: 172.20.0.13:9092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      suuupra-network:
        ipv4_address: 172.20.0.32
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Bank Simulator - Known Working
  bank-simulator:
    build:
      context: ./services/bank-simulator
      dockerfile: Dockerfile
    container_name: suuupra-bank-simulator
    ports:
      - "3000:3000"
      - "50050:50050"
      - "9094:9090"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:password@172.20.0.10:5432/bank_simulator
      GRPC_PORT: 50050
      PORT: 3000
      HOST: 0.0.0.0
      JWT_SECRET: your-super-secret-jwt-key-production
      LOG_LEVEL: info
      ENABLE_METRICS: true
      ENABLE_TRACING: true
      JAEGER_ENDPOINT: http://172.20.0.14:14268/api/traces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      suuupra-network:
        ipv4_address: 172.20.0.33
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Commerce Service - Working (needs minor fix)
  commerce:
    build:
      context: ./services/commerce
      dockerfile: Dockerfile
    container_name: suuupra-commerce
    ports:
      - "8084:8084"
    environment:
      ENVIRONMENT: production
      DATABASE_URL: postgresql+asyncpg://postgres:password@172.20.0.10:5432/commerce
      REDIS_URL: redis://172.20.0.11:6379/1
      KAFKA_BOOTSTRAP_SERVERS: 172.20.0.13:9092
      JAEGER_ENDPOINT: http://172.20.0.14:14268
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      suuupra-network:
        ipv4_address: 172.20.0.30
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Identity Service - Working
  identity:
    build:
      context: ./services/identity
      dockerfile: Dockerfile
    container_name: suuupra-identity
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://172.20.0.10:5432/identity
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_REDIS_HOST: 172.20.0.11
      SPRING_REDIS_PORT: 6379
      SECURITY_JWT_ISSUER: http://172.20.0.21:8081
      KMS_KEKBASE64: dGVzdC1rZXktZm9yLWRldmVsb3BtZW50LW9ubHk=
      SECURITY_MFA_KEKBASE64: dGVzdC1tZmEta2V5LWZvci1kZXZlbG9wbWVudA==
      KAFKA_BOOTSTRAP_SERVERS: 172.20.0.13:9092
    networks:
      suuupra-network:
        ipv4_address: 172.20.0.21
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Health Monitor - Dashboard for all services
  health-monitor:
    image: nginx:alpine
    container_name: suuupra-health-monitor
    ports:
      - "9999:80"
    volumes:
      - ./monitoring/health-check.html:/usr/share/nginx/html/index.html
      - ./monitoring/nginx-health.conf:/etc/nginx/nginx.conf
    depends_on:
      - identity
      - upi-core
      - bank-simulator
      - commerce
    networks:
      suuupra-network:
        ipv4_address: 172.20.0.100
    restart: unless-stopped
