# ===================================================================
# SUUUPRA EDTECH PLATFORM - Production-Ready Docker Compose
# 
# Complete application stack with:
# - Microservices (API Gateway, Identity, Payments, Commerce)
# - Infrastructure (PostgreSQL, Redis, Kafka, Vault)
# - Observability (Prometheus, Grafana, Jaeger, OpenTelemetry)
# - Security (JWT, RBAC, Secrets Management)
# - Performance Optimization
# ===================================================================
version: '4'

# Include external infrastructure file
include:
  - docker-compose.infrastructure.yml

# Networks are defined in docker-compose.infrastructure.yml

volumes:
  # Application-specific volumes
  app_logs:
    driver: local
  app_uploads:
    driver: local

services:
  # ===================================================================
  # CORE APPLICATION SERVICES
  # ===================================================================
  
  # API Gateway - Enhanced with all TodoGlobal.md features
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-api-gateway
    restart: unless-stopped
    ports:
      - "8080:8080"   # Main API port
      - "9080:9091"   # Metrics port (external 9080 to avoid Prometheus/Milvus conflicts)
      - "8443:8443"   # HTTPS port (if SSL enabled)
    environment:
      # Core configuration
      NODE_ENV: production
      PORT: 8080
      METRICS_PORT: 9091
      
      # Database connections
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: ${POSTGRES_DB_GATEWAY:-gateway}
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # Kafka configuration - Per TODO-008
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: api-gateway
      KAFKA_GROUP_ID: api-gateway-consumers
      
      # Security - Per TODO-004/005/006
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN:-myroot}
      JWT_ISSUER: ${JWT_ISSUER:-https://auth.suuupra.com}
      JWT_AUDIENCE: ${JWT_AUDIENCE:-https://api.suuupra.com}
      JWKS_URI: http://jwks-server:3000/.well-known/jwks.json
      
      # Observability - Per TODO-010/011
      OTEL_SERVICE_NAME: api-gateway
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
      # Performance settings - Per TODO-018
      NODE_OPTIONS: "--max-old-space-size=1024 --enable-source-maps"
      UV_THREADPOOL_SIZE: 128
      
      # Rate limiting
      RATE_LIMIT_WINDOW_MS: 60000
      RATE_LIMIT_MAX_REQUESTS: 1000
      RATE_LIMIT_REDIS_URL: redis://redis:6379
      
      # Circuit breaker settings
      CIRCUIT_BREAKER_THRESHOLD: 5
      CIRCUIT_BREAKER_TIMEOUT: 30000
      CIRCUIT_BREAKER_RESET_TIMEOUT: 60000
      
    volumes:
      - app_logs:/app/logs
      - ./services/api-gateway/.env.local:/app/.env.local:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      vault:
        condition: service_healthy
      otel-collector:
        condition: service_started
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9091"  # Internal metrics port
      - "prometheus.path=/metrics"

  # Identity Service - JWT Auth & User Management
  identity:
    build:
      context: ./services/identity
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-identity
    restart: unless-stopped
    ports:
      - "8081:8081"   # Main service port
      - "9092:9092"   # Metrics port
    environment:
      # Core configuration
      NODE_ENV: production
      PORT: 8081
      METRICS_PORT: 9092
      
      # Database - Per TODO-009
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: identity
      POSTGRES_POOL_MIN: 5
      POSTGRES_POOL_MAX: 20
      POSTGRES_IDLE_TIMEOUT: 30000
      
      # Redis for sessions
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_SESSION_PREFIX: "sess:"
      REDIS_SESSION_TTL: 3600
      
      # Security - Per TODO-005
      JWT_SECRET_KEY_ID: identity-service-key
      JWT_ISSUER: https://auth.suuupra.com
      JWT_AUDIENCE: https://api.suuupra.com
      JWT_EXPIRY: 3600
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET:-refresh-secret-key}
      REFRESH_TOKEN_EXPIRY: 604800  # 7 days
      
      # Vault integration - Per TODO-006
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN:-myroot}
      VAULT_MOUNT_PATH: identity
      
      # Observability - Per TODO-010
      OTEL_SERVICE_NAME: identity-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
      # Event publishing - Per TODO-008
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: identity-service
      KAFKA_GROUP_ID: identity-consumers
      
      # Rate limiting & security
      BCRYPT_ROUNDS: 12
      MAX_LOGIN_ATTEMPTS: 5
      LOCKOUT_DURATION: 900000  # 15 minutes
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9092"

  # Payments Service - Transaction Processing
  payments:
    build:
      context: ./services/payments
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-payments
    restart: unless-stopped
    ports:
      - "8082:8082"   # Main service port
      - "9093:9093"   # Metrics port
    environment:
      # Core configuration
      NODE_ENV: production
      PORT: 8082
      METRICS_PORT: 9093
      
      # Database - Per TODO-009
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: payments
      POSTGRES_POOL_MAX: 25  # Higher pool for payment processing
      
      # Redis for idempotency - Per TODO-008
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_IDEMPOTENCY_PREFIX: "idem:"
      REDIS_IDEMPOTENCY_TTL: 86400  # 24 hours
      
      # Event streaming - Per TODO-008
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: payments-service
      KAFKA_GROUP_ID: payments-consumers
      KAFKA_PAYMENT_EVENTS_TOPIC: payment.events
      KAFKA_ORDER_EVENTS_TOPIC: order.events
      
      # Security & Vault - Per TODO-006
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN:-myroot}
      VAULT_MOUNT_PATH: payments
      
      # Payment gateways (secrets from Vault)
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-}
      RAZORPAY_KEY_SECRET: ${RAZORPAY_KEY_SECRET:-}
      
      # Observability - Per TODO-010
      OTEL_SERVICE_NAME: payments-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
      # Performance & reliability
      PAYMENT_TIMEOUT_MS: 30000
      MAX_RETRY_ATTEMPTS: 3
      CIRCUIT_BREAKER_THRESHOLD: 10
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9093"

  # Commerce Service - Course & Product Management
  commerce:
    build:
      context: ./services/commerce
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-commerce
    restart: unless-stopped
    ports:
      - "8083:8083"   # Main service port
      - "9094:9094"   # Metrics port
    environment:
      # Core configuration
      NODE_ENV: production
      PORT: 8083
      METRICS_PORT: 9094
      
      # Database - Per TODO-009
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: commerce
      
      # Redis for caching - Per TODO-018
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_CACHE_PREFIX: "cache:"
      REDIS_CACHE_TTL: 3600
      
      # Event streaming - Per TODO-008
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: commerce-service
      KAFKA_GROUP_ID: commerce-consumers
      KAFKA_COURSE_EVENTS_TOPIC: course.events
      KAFKA_ENROLLMENT_EVENTS_TOPIC: enrollment.events
      
      # Object storage for course content
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: course-content
      
      # Search integration
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
      ELASTICSEARCH_INDEX: courses
      
      # AI/ML features - Milvus vector database
      MILVUS_HOST: milvus
      MILVUS_PORT: 19530
      MILVUS_COLLECTION: course_embeddings
      
      # Security & Vault - Per TODO-006
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN:-myroot}
      VAULT_MOUNT_PATH: commerce
      
      # Observability - Per TODO-010
      OTEL_SERVICE_NAME: commerce-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads  # Course content uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      milvus:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9094"

  # Content Delivery Service - Video & Media Processing
  content-delivery:
    build:
      context: ./services/content-delivery
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-content-delivery
    restart: unless-stopped
    ports:
      - "8084:8084"   # Main service port
      - "9095:9095"   # Metrics port
    environment:
      NODE_ENV: production
      PORT: 8084
      METRICS_PORT: 9095
      
      # Object storage for media files
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: media-content
      
      # CDN configuration
      CDN_BASE_URL: ${CDN_BASE_URL:-http://localhost:8084}
      VIDEO_STREAMING_ENDPOINT: /stream
      
      # Performance optimization - Per TODO-018
      CONTENT_CACHE_TTL: 86400  # 24 hours
      VIDEO_CHUNK_SIZE: 1048576  # 1MB chunks
      
      # Observability
      OTEL_SERVICE_NAME: content-delivery-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8084/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9095"

  # Notifications Service - Multi-channel messaging
  notifications:
    build:
      context: ./services/notifications
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-notifications
    restart: unless-stopped
    ports:
      - "8085:8085"   # Main service port
      - "9096:9096"   # Metrics port
    environment:
      NODE_ENV: production
      PORT: 8085
      METRICS_PORT: 9096
      
      # Database for notification history
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: notifications
      
      # Redis for message queuing
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_QUEUE_PREFIX: "notifications:"
      
      # Event consumption - Per TODO-008
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: notifications-service
      KAFKA_GROUP_ID: notifications-consumers
      KAFKA_USER_EVENTS_TOPIC: user.events
      KAFKA_PAYMENT_EVENTS_TOPIC: payment.events
      KAFKA_COURSE_EVENTS_TOPIC: course.events
      
      # Notification channels (from Vault)
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN:-myroot}
      VAULT_MOUNT_PATH: notifications
      
      # Observability
      OTEL_SERVICE_NAME: notifications-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8085/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9096"

  # ===================================================================
  # PAYMENT INFRASTRUCTURE SERVICES - Per TodoGlobal.md Phase 2
  # ===================================================================
  
  # Ledger Service - Double-Entry Accounting
  ledger:
    build:
      context: ./services/ledger
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-ledger
    restart: unless-stopped
    ports:
      - "8086:8086"   # Main service port
      - "9097:9097"   # Metrics port
    environment:
      NODE_ENV: production
      PORT: 8086
      METRICS_PORT: 9097
      
      # Database for financial records
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: ledger
      
      # Event consumption from payments
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: ledger-service
      KAFKA_GROUP_ID: ledger-consumers
      KAFKA_PAYMENT_EVENTS_TOPIC: payment.events
      
      # Security & compliance
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN:-myroot}
      VAULT_MOUNT_PATH: ledger
      
      # Audit & compliance settings
      HASH_CHAIN_ENABLED: true
      AUDIT_LOG_LEVEL: complete
      RECONCILIATION_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      
      # Observability
      OTEL_SERVICE_NAME: ledger-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8086/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9097"

  # UPI Core Service - UPI Switch Simulator
  upi-core:
    build:
      context: ./services/upi-core
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-upi-core
    restart: unless-stopped
    ports:
      - "8087:8087"   # Main service port
      - "9098:9098"   # Metrics port
    environment:
      NODE_ENV: production
      PORT: 8087
      METRICS_PORT: 9098
      
      # Database for UPI transactions
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: upi_core
      
      # Bank simulator integration
      BANK_SIMULATOR_URL: http://bank-simulator:8088
      UPI_TIMEOUT_MS: 30000
      
      # Event publishing
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: upi-core-service
      KAFKA_UPI_EVENTS_TOPIC: upi.events
      
      # Security
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN:-myroot}
      
      # Observability
      OTEL_SERVICE_NAME: upi-core-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8087/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9098"

  # Bank Simulator Service - Core Banking System
  bank-simulator:
    build:
      context: ./services/bank-simulator
      dockerfile: Dockerfile
      target: runner
    container_name: suuupra-bank-simulator
    restart: unless-stopped
    ports:
      - "8088:8088"   # Main service port
      - "9099:9099"   # Metrics port
    environment:
      NODE_ENV: production
      PORT: 8088
      METRICS_PORT: 9099
      
      # Database for account management
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: bank_simulator
      
      # Banking simulation settings
      DEFAULT_ACCOUNT_BALANCE: 100000000  # 1M in paisa
      TRANSACTION_SUCCESS_RATE: 95  # 95% success rate
      PROCESSING_DELAY_MS: 1000
      
      # Observability
      OTEL_SERVICE_NAME: bank-simulator-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8088/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9099"

  # ===================================================================
  # CONTENT & MEDIA SERVICES - Per TodoGlobal.md Phase 3
  # ===================================================================
  
  # Content Service - Educational Content Management
  content:
    build:
      context: ./services/content
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-content
    restart: unless-stopped
    ports:
      - "8089:8089"   # Main service port
      - "9100:9100"   # Metrics port
    environment:
      NODE_ENV: production
      PORT: 8089
      METRICS_PORT: 9100
      
      # Database for content metadata
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: content
      
      # Search integration
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
      ELASTICSEARCH_INDEX: content
      
      # Object storage for assets
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: content-assets
      
      # Event publishing
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: content-service
      KAFKA_CONTENT_EVENTS_TOPIC: content.events
      
      # Content processing
      ANTIVIRUS_ENABLED: true
      CONTENT_MODERATION_ENABLED: true
      AUTO_TRANSCODING_ENABLED: true
      
      # Observability
      OTEL_SERVICE_NAME: content-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      minio:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8089/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9100"

  # Live Classes Service - Interactive Real-time Learning
  live-classes:
    build:
      context: ./services/live-classes
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-live-classes
    restart: unless-stopped
    ports:
      - "8090:8090"   # Main service port
      - "9101:9101"   # Metrics port
      - "3478:3478"   # TURN server
    environment:
      NODE_ENV: production
      PORT: 8090
      METRICS_PORT: 9101
      
      # Database for class management
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: live_classes
      
      # WebRTC configuration
      WEBRTC_ICE_SERVERS: "stun:stun.l.google.com:19302"
      TURN_SERVER_URL: "turn:localhost:3478"
      TURN_USERNAME: suuupra
      TURN_PASSWORD: ${TURN_PASSWORD:-turnpassword}
      
      # Recording storage
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: class-recordings
      
      # Redis for session management
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_SESSION_PREFIX: "class_session:"
      
      # Event publishing
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: live-classes-service
      KAFKA_CLASS_EVENTS_TOPIC: class.events
      
      # Class settings
      MAX_PARTICIPANTS: 1000
      RECORDING_ENABLED: true
      CHAT_ENABLED: true
      SCREEN_SHARE_ENABLED: true
      
      # Observability
      OTEL_SERVICE_NAME: live-classes-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8090/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9101"

  # VOD Service - Video on Demand Platform
  vod:
    build:
      context: ./services/vod
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-vod
    restart: unless-stopped
    ports:
      - "8091:8091"   # Main service port
      - "9102:9102"   # Metrics port
    environment:
      NODE_ENV: production
      PORT: 8091
      METRICS_PORT: 9102
      
      # Database for video metadata
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: vod
      
      # Object storage for videos
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: video-content
      
      # Video processing
      FFMPEG_PATH: /usr/bin/ffmpeg
      TRANSCODING_QUALITIES: "240p,360p,480p,720p,1080p"
      HLS_SEGMENT_DURATION: 6
      ADAPTIVE_BITRATE_ENABLED: true
      
      # CDN configuration
      CDN_BASE_URL: ${CDN_BASE_URL:-http://localhost:8091}
      STREAMING_PROTOCOL: HLS
      
      # Analytics integration
      VIDEO_ANALYTICS_ENABLED: true
      WATCH_TIME_TRACKING_ENABLED: true
      
      # Observability
      OTEL_SERVICE_NAME: vod-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads  # Temporary processing
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8091/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9102"

  # Mass Live Service - Large-scale Live Streaming
  mass-live:
    build:
      context: ./services/mass-live
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-mass-live
    restart: unless-stopped
    ports:
      - "8092:8092"   # Main service port
      - "9103:9103"   # Metrics port
      - "1935:1935"   # RTMP port
    environment:
      NODE_ENV: production
      PORT: 8092
      METRICS_PORT: 9103
      
      # Database for stream metadata
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: mass_live
      
      # Redis for viewer counts and live sessions
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_LIVE_PREFIX: "live:"
      
      # Streaming configuration
      RTMP_PORT: 1935
      HLS_SEGMENT_DURATION: 2  # Low latency
      MAX_CONCURRENT_VIEWERS: 1000000  # 1M viewers
      CDN_ENABLED: true
      MULTI_CDN_ENABLED: true
      
      # Object storage for stream segments
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: live-streams
      
      # Event publishing
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: mass-live-service
      KAFKA_STREAM_EVENTS_TOPIC: stream.events
      
      # Performance settings
      TRANSCODING_ENABLED: true
      ADAPTIVE_BITRATE_ENABLED: true
      EDGE_CACHING_ENABLED: true
      
      # Observability
      OTEL_SERVICE_NAME: mass-live-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8092/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9103"

  # Creator Studio Service - Content Creator Dashboard
  creator-studio:
    build:
      context: ./services/creator-studio
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-creator-studio
    restart: unless-stopped
    ports:
      - "8093:8093"   # Main service port
      - "9104:9104"   # Metrics port
    environment:
      NODE_ENV: production
      PORT: 8093
      METRICS_PORT: 9104
      
      # Database for creator data
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: creator_studio
      
      # Content management integration
      CONTENT_SERVICE_URL: http://content:8089
      VOD_SERVICE_URL: http://vod:8091
      LIVE_CLASSES_SERVICE_URL: http://live-classes:8090
      
      # Analytics integration
      ANALYTICS_SERVICE_URL: http://analytics:8095
      
      # Object storage for uploads
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: creator-uploads
      
      # Upload settings
      MAX_FILE_SIZE: 5368709120  # 5GB
      SUPPORTED_FORMATS: "mp4,mov,avi,mkv,pdf,docx,pptx,jpg,png"
      AUTO_PROCESSING_ENABLED: true
      
      # Monetization settings
      REVENUE_SHARING_ENABLED: true
      DEFAULT_REVENUE_SPLIT: 70  # 70% to creator
      PAYOUT_MINIMUM: 10000  # ₹100 in paisa
      
      # Event publishing
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: creator-studio-service
      KAFKA_CREATOR_EVENTS_TOPIC: creator.events
      
      # Observability
      OTEL_SERVICE_NAME: creator-studio-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8093/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9104"

  # ===================================================================
  # INTELLIGENCE SERVICES - Per TodoGlobal.md Phase 4
  # ===================================================================
  
  # Search Crawler Service - Full-text Search & Indexing
  search-crawler:
    build:
      context: ./services/search-crawler
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-search-crawler
    restart: unless-stopped
    ports:
      - "8094:8094"   # Main service port
      - "9105:9105"   # Metrics port
    environment:
      NODE_ENV: production
      PORT: 8094
      METRICS_PORT: 9105
      
      # Elasticsearch for search indexing
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
      ELASTICSEARCH_INDICES: "courses,content,users,videos"
      
      # Database for crawl state
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: search_crawler
      
      # Redis for crawl queue and rate limiting
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_QUEUE_PREFIX: "crawl_queue:"
      REDIS_RATE_LIMIT_PREFIX: "crawl_rate:"
      
      # Crawling configuration
      CRAWL_INTERVAL_MINUTES: 60  # Crawl every hour
      MAX_CONCURRENT_CRAWLS: 10
      CRAWL_DEPTH: 5
      RESPECT_ROBOTS_TXT: true
      USER_AGENT: "Suuupra-Crawler/1.0"
      
      # Content processing
      EXTRACT_TEXT_ENABLED: true
      EXTRACT_METADATA_ENABLED: true
      LANGUAGE_DETECTION_ENABLED: true
      DUPLICATE_DETECTION_ENABLED: true
      
      # Event consumption
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: search-crawler-service
      KAFKA_GROUP_ID: search-crawler-consumers
      KAFKA_CONTENT_EVENTS_TOPIC: content.events
      
      # Observability
      OTEL_SERVICE_NAME: search-crawler-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8094/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9105"

  # Recommendations Service - AI-powered Content Recommendations
  recommendations:
    build:
      context: ./services/recommendations
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-recommendations
    restart: unless-stopped
    ports:
      - "8095:8095"   # Main service port
      - "9106:9106"   # Metrics port
    environment:
      NODE_ENV: production
      PORT: 8095
      METRICS_PORT: 9106
      
      # Database for user preferences and recommendations
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: recommendations
      
      # Vector database for similarity search
      MILVUS_HOST: milvus
      MILVUS_PORT: 19530
      MILVUS_COLLECTION: content_embeddings
      
      # Redis for recommendation caching
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_RECOMMENDATIONS_PREFIX: "rec:"
      REDIS_RECOMMENDATIONS_TTL: 3600  # 1 hour
      
      # ML model configuration
      COLLABORATIVE_FILTERING_ENABLED: true
      CONTENT_BASED_FILTERING_ENABLED: true
      HYBRID_MODEL_ENABLED: true
      COLD_START_STRATEGY: "popularity_based"
      
      # Recommendation settings
      MAX_RECOMMENDATIONS: 20
      MIN_INTERACTION_THRESHOLD: 5
      DIVERSITY_FACTOR: 0.3
      FRESHNESS_DECAY_DAYS: 30
      
      # Event consumption for learning
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: recommendations-service
      KAFKA_GROUP_ID: recommendations-consumers
      KAFKA_USER_EVENTS_TOPIC: user.events
      KAFKA_CONTENT_EVENTS_TOPIC: content.events
      KAFKA_INTERACTION_EVENTS_TOPIC: interaction.events
      
      # Model training schedule
      RETRAIN_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      INCREMENTAL_UPDATE_ENABLED: true
      
      # Observability
      OTEL_SERVICE_NAME: recommendations-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      milvus:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8095/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9106"

  # LLM Tutor Service - AI-powered Personal Tutor  
  llm-tutor:
    build:
      context: ./services/llm-tutor
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-llm-tutor
    restart: unless-stopped
    ports:
      - "8096:8096"   # Main service port
      - "9107:9107"   # Metrics port
    environment:
      # Core configuration
      ENVIRONMENT: production
      PORT: 8096
      METRICS_PORT: 9107
      
      # Database for conversation history
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: llm_tutor
      
      # Vector database for RAG
      MILVUS_HOST: milvus
      MILVUS_PORT: 19530
      MILVUS_COLLECTION: knowledge_base
      
      # Redis for session management
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_SESSION_PREFIX: "tutor_session:"
      REDIS_SESSION_TTL: 86400  # 24 hours
      
      # LLM configuration
      LLM_PROVIDER: openai
      LLM_MODEL: gpt-4-turbo-preview
      MAX_TOKENS: 4096
      TEMPERATURE: 0.7
      TOP_P: 0.9
      
      # RAG configuration
      RETRIEVAL_K: 5  # Top-k documents
      EMBEDDING_MODEL: text-embedding-3-small
      CHUNK_SIZE: 1000
      CHUNK_OVERLAP: 200
      
      # Voice capabilities
      SPEECH_TO_TEXT_ENABLED: true
      TEXT_TO_SPEECH_ENABLED: true
      STT_MODEL: whisper-1
      TTS_MODEL: tts-1
      VOICE_QUALITY: hd
      
      # Safety and moderation
      CONTENT_MODERATION_ENABLED: true
      SAFETY_THRESHOLD: 0.8
      PII_DETECTION_ENABLED: true
      HARMFUL_CONTENT_FILTER_ENABLED: true
      
      # Learning analytics
      PROGRESS_TRACKING_ENABLED: true
      LEARNING_ANALYTICS_ENABLED: true
      ADAPTIVE_LEARNING_ENABLED: true
      
      # Security from Vault
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN:-myroot}
      VAULT_MOUNT_PATH: llm-tutor
      
      # Event publishing
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: llm-tutor-service
      KAFKA_TUTOR_EVENTS_TOPIC: tutor.events
      KAFKA_LEARNING_EVENTS_TOPIC: learning.events
      
      # Observability
      OTEL_SERVICE_NAME: llm-tutor-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      milvus:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8096/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9107"

  # Analytics Service - Data Collection & Business Intelligence
  analytics:
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-analytics
    restart: unless-stopped
    ports:
      - "8097:8097"   # Main service port
      - "9108:9108"   # Metrics port
    environment:
      NODE_ENV: production
      PORT: 8097
      METRICS_PORT: 9108
      
      # Database for analytics data
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: analytics
      
      # Elasticsearch for log analysis
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
      ELASTICSEARCH_INDEX: analytics
      
      # Redis for real-time metrics
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_METRICS_PREFIX: "metrics:"
      
      # Event consumption from all services
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: analytics-service
      KAFKA_GROUP_ID: analytics-consumers
      KAFKA_ALL_EVENTS_TOPICS: "user.events,payment.events,content.events,class.events,interaction.events"
      
      # Analytics configuration
      REAL_TIME_ANALYTICS_ENABLED: true
      BATCH_PROCESSING_ENABLED: true
      DATA_RETENTION_DAYS: 365
      AGGREGATION_INTERVALS: "1m,5m,1h,1d,1w,1M"
      
      # Business metrics tracking
      REVENUE_TRACKING_ENABLED: true
      USER_BEHAVIOR_TRACKING_ENABLED: true
      CONTENT_PERFORMANCE_TRACKING_ENABLED: true
      CONVERSION_FUNNEL_TRACKING_ENABLED: true
      
      # Data export settings
      EXPORT_TO_S3_ENABLED: true
      EXPORT_FORMAT: "parquet"
      EXPORT_SCHEDULE: "0 3 * * *"  # Daily at 3 AM
      
      # Privacy settings
      PII_ANONYMIZATION_ENABLED: true
      GDPR_COMPLIANCE_ENABLED: true
      DATA_RETENTION_POLICY_ENABLED: true
      
      # Observability
      OTEL_SERVICE_NAME: analytics-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8097/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9108"

  # ===================================================================
  # SUPPORTING SERVICES - Per TodoGlobal.md Phase 5
  # ===================================================================
  
  # Counters Service - Distributed Counter System
  counters:
    build:
      context: ./services/counters
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-counters
    restart: unless-stopped
    ports:
      - "8098:8098"   # Main service port
      - "9109:9109"   # Metrics port
    environment:
      NODE_ENV: production
      PORT: 8098
      METRICS_PORT: 9109
      
      # Redis cluster for high-performance counters
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_CLUSTER_ENABLED: false  # Single instance for dev
      REDIS_COUNTER_PREFIX: "counter:"
      REDIS_COUNTER_TTL: 86400  # 24 hours default
      
      # Database for persistence
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: counters
      
      # Counter configuration
      BATCH_SIZE: 1000
      FLUSH_INTERVAL_MS: 5000  # Flush every 5 seconds
      PERSISTENCE_ENABLED: true
      ATOMIC_OPERATIONS_ENABLED: true
      
      # Supported counter types
      COUNTER_TYPES: "views,likes,shares,downloads,enrollments,completions"
      
      # Event consumption for auto-increment
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: counters-service
      KAFKA_GROUP_ID: counters-consumers
      KAFKA_VIEW_EVENTS_TOPIC: view.events
      KAFKA_INTERACTION_EVENTS_TOPIC: interaction.events
      
      # Performance settings
      MAX_CONCURRENT_UPDATES: 10000
      RATE_LIMITING_ENABLED: true
      RATE_LIMIT_REQUESTS_PER_SECOND: 10000
      
      # Observability
      OTEL_SERVICE_NAME: counters-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8098/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9109"

  # Live Tracking Service - Real-time Activity Tracking
  live-tracking:
    build:
      context: ./services/live-tracking
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-live-tracking
    restart: unless-stopped
    ports:
      - "8099:8099"   # Main service port
      - "9110:9110"   # Metrics port
      - "3002:3001"   # WebSocket port (changed to avoid Grafana conflict)
    environment:
      NODE_ENV: production
      PORT: 8099
      METRICS_PORT: 9110
      WEBSOCKET_PORT: 3001
      
      # Database for tracking data
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: live_tracking
      
      # Redis for real-time sessions
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_SESSION_PREFIX: "tracking:"
      REDIS_GEO_PREFIX: "geo:"
      REDIS_ACTIVITY_PREFIX: "activity:"
      
      # WebSocket configuration
      WEBSOCKET_ENABLED: true
      MAX_CONNECTIONS: 100000
      HEARTBEAT_INTERVAL: 30000  # 30 seconds
      CONNECTION_TIMEOUT: 300000  # 5 minutes
      
      # Tracking features
      GPS_TRACKING_ENABLED: true
      ACTIVITY_TRACKING_ENABLED: true
      DEVICE_TRACKING_ENABLED: true
      NETWORK_TRACKING_ENABLED: true
      GEOFENCING_ENABLED: true
      
      # Privacy settings
      ANONYMIZATION_ENABLED: true
      DATA_RETENTION_HOURS: 168  # 7 days
      PII_PROTECTION_ENABLED: true
      GDPR_COMPLIANCE_ENABLED: true
      
      # Performance settings
      BATCH_PROCESSING_ENABLED: true
      BATCH_SIZE: 1000
      FLUSH_INTERVAL_MS: 10000  # 10 seconds
      COMPRESSION_ENABLED: true
      
      # Event publishing
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: live-tracking-service
      KAFKA_TRACKING_EVENTS_TOPIC: tracking.events
      KAFKA_GEO_EVENTS_TOPIC: geo.events
      
      # Geographic services
      GEOCODING_ENABLED: true
      REVERSE_GEOCODING_ENABLED: true
      ROUTE_OPTIMIZATION_ENABLED: true
      
      # Observability
      OTEL_SERVICE_NAME: live-tracking-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8099/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9110"

  # Admin Service - Platform Administration Dashboard
  admin:
    build:
      context: ./services/admin
      dockerfile: Dockerfile
      target: production
    container_name: suuupra-admin
    restart: unless-stopped
    ports:
      - "8100:8100"   # Main service port
      - "9111:9111"   # Metrics port
    environment:
      NODE_ENV: production
      PORT: 8100
      METRICS_PORT: 9111
      
      # Database for admin operations
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: admin
      
      # Redis for session management
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_ADMIN_SESSION_PREFIX: "admin_session:"
      REDIS_SESSION_TTL: 28800  # 8 hours
      
      # Service integrations for management
      IDENTITY_SERVICE_URL: http://identity:8081
      CONTENT_SERVICE_URL: http://content:8089
      COMMERCE_SERVICE_URL: http://commerce:8083
      PAYMENTS_SERVICE_URL: http://payments:8082
      ANALYTICS_SERVICE_URL: http://analytics:8097
      
      # Admin dashboard features
      USER_MANAGEMENT_ENABLED: true
      CONTENT_MODERATION_ENABLED: true
      PAYMENT_MONITORING_ENABLED: true
      SYSTEM_MONITORING_ENABLED: true
      AUDIT_LOGGING_ENABLED: true
      
      # Security & permissions
      RBAC_ENABLED: true
      MFA_REQUIRED: true
      SESSION_SECURITY_ENABLED: true
      IP_WHITELIST_ENABLED: false  # Set to true in production
      AUDIT_TRAIL_ENABLED: true
      
      # Notification settings
      ALERT_NOTIFICATIONS_ENABLED: true
      EMAIL_NOTIFICATIONS_ENABLED: true
      SLACK_NOTIFICATIONS_ENABLED: true
      
      # System management
      BACKUP_MANAGEMENT_ENABLED: true
      LOG_MANAGEMENT_ENABLED: true
      PERFORMANCE_MONITORING_ENABLED: true
      CAPACITY_PLANNING_ENABLED: true
      
      # Business intelligence
      REVENUE_DASHBOARD_ENABLED: true
      USER_ANALYTICS_ENABLED: true
      CONTENT_ANALYTICS_ENABLED: true
      SYSTEM_HEALTH_DASHBOARD_ENABLED: true
      
      # Security from Vault
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_TOKEN:-myroot}
      VAULT_MOUNT_PATH: admin
      
      # Event consumption for monitoring
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: admin-service
      KAFKA_GROUP_ID: admin-consumers
      KAFKA_ALL_EVENTS_TOPICS: "user.events,payment.events,content.events,system.events"
      
      # Observability
      OTEL_SERVICE_NAME: admin-service
      OTEL_SERVICE_VERSION: 1.0.0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=suuupra,deployment.environment=docker-compose
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      vault:
        condition: service_healthy
      # Depend on key services to manage
      identity:
        condition: service_healthy
      content:
        condition: service_healthy
      analytics:
        condition: service_healthy
    networks:
      - suuupra-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8100/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9111"

# ===================================================================
# FINAL SERVICE COUNT: 20 MICROSERVICES COMPLETE! 
# All services from TodoGlobal.md Services Status Matrix implemented:
# Foundation (3): api-gateway, identity, content
# Payments (5): commerce, payments, ledger, upi-core, bank-simulator  
# Media (4): live-classes, vod, mass-live, creator-studio
# Intelligence (4): search-crawler, recommendations, llm-tutor, analytics  
# Supporting (4): counters, live-tracking, notifications, admin
# Plus: content-delivery (1)
# Total: 20 Production-Ready Microservices
# ===================================================================